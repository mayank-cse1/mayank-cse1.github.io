{"version":3,"file":"static/js/111.289eb856.chunk.js","mappings":"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","sources":["../node_modules/extend/index.js","../node_modules/inline-style-parser/index.js","../node_modules/mdurl/encode.js","../node_modules/react-markdown/node_modules/react-is/cjs/react-is.production.min.js","../node_modules/react-markdown/node_modules/react-is/index.js","../node_modules/style-to-object/index.js","../node_modules/unified/node_modules/is-buffer/index.js","../node_modules/vfile/node_modules/is-buffer/index.js","../node_modules/@babel/runtime/helpers/esm/construct.js","../node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","../node_modules/@babel/runtime/helpers/esm/isNativeFunction.js","../node_modules/unist-util-stringify-position/lib/index.js","../node_modules/vfile-message/lib/index.js","../node_modules/vfile/lib/minpath.browser.js","../node_modules/vfile/lib/minproc.browser.js","../node_modules/vfile/lib/minurl.shared.js","../node_modules/vfile/lib/minurl.browser.js","../node_modules/vfile/lib/index.js","../node_modules/@babel/runtime/helpers/esm/toArray.js","../node_modules/bail/index.js","../node_modules/is-plain-obj/index.js","../node_modules/trough/index.js","../node_modules/unified/lib/index.js","../node_modules/mdast-util-to-string/lib/index.js","../node_modules/micromark-util-chunked/index.js","../node_modules/micromark-util-combine-extensions/index.js","../node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","../node_modules/micromark-util-character/index.js","../node_modules/micromark-factory-space/index.js","../node_modules/micromark/lib/initialize/content.js","../node_modules/micromark/lib/initialize/document.js","../node_modules/micromark-core-commonmark/lib/blank-line.js","../node_modules/micromark-util-subtokenize/index.js","../node_modules/micromark-core-commonmark/lib/content.js","../node_modules/micromark/lib/initialize/flow.js","../node_modules/micromark/lib/initialize/text.js","../node_modules/micromark-util-resolve-all/index.js","../node_modules/micromark/lib/create-tokenizer.js","../node_modules/micromark-core-commonmark/lib/thematic-break.js","../node_modules/micromark-core-commonmark/lib/list.js","../node_modules/micromark-core-commonmark/lib/block-quote.js","../node_modules/micromark-factory-destination/index.js","../node_modules/micromark-factory-label/index.js","../node_modules/micromark-factory-title/index.js","../node_modules/micromark-factory-whitespace/index.js","../node_modules/micromark-util-normalize-identifier/index.js","../node_modules/micromark-core-commonmark/lib/definition.js","../node_modules/micromark-core-commonmark/lib/code-indented.js","../node_modules/micromark-core-commonmark/lib/heading-atx.js","../node_modules/micromark-core-commonmark/lib/setext-underline.js","../node_modules/micromark-util-html-tag-name/index.js","../node_modules/micromark-core-commonmark/lib/html-flow.js","../node_modules/micromark-core-commonmark/lib/code-fenced.js","../node_modules/decode-named-character-reference/index.dom.js","../node_modules/micromark-core-commonmark/lib/character-reference.js","../node_modules/micromark-core-commonmark/lib/character-escape.js","../node_modules/micromark-core-commonmark/lib/line-ending.js","../node_modules/micromark-core-commonmark/lib/label-end.js","../node_modules/micromark-core-commonmark/lib/label-start-image.js","../node_modules/micromark-util-classify-character/index.js","../node_modules/micromark-core-commonmark/lib/attention.js","../node_modules/micromark-core-commonmark/lib/autolink.js","../node_modules/micromark-core-commonmark/lib/html-text.js","../node_modules/micromark-core-commonmark/lib/label-start-link.js","../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../node_modules/micromark-core-commonmark/lib/code-text.js","../node_modules/micromark/lib/constructs.js","../node_modules/micromark/lib/parse.js","../node_modules/micromark/lib/preprocess.js","../node_modules/micromark-util-decode-numeric-character-reference/index.js","../node_modules/micromark-util-decode-string/index.js","../node_modules/mdast-util-from-markdown/lib/index.js","../node_modules/micromark/lib/postprocess.js","../node_modules/remark-parse/lib/index.js","../node_modules/unist-builder/lib/index.js","../node_modules/unist-util-is/lib/index.js","../node_modules/unist-util-visit-parents/lib/index.js","../node_modules/unist-util-visit/lib/index.js","../node_modules/unist-util-position/lib/index.js","../node_modules/mdast-util-definitions/lib/index.js","../node_modules/mdast-util-to-hast/lib/traverse.js","../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../node_modules/mdast-util-to-hast/lib/wrap.js","../node_modules/mdast-util-to-hast/lib/handlers/list.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../node_modules/mdast-util-to-hast/lib/revert.js","../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../node_modules/mdast-util-to-hast/lib/handlers/index.js","../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../node_modules/mdast-util-to-hast/lib/handlers/break.js","../node_modules/mdast-util-to-hast/lib/handlers/code.js","../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote.js","../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../node_modules/mdast-util-to-hast/lib/handlers/html.js","../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/image.js","../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/link.js","../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../node_modules/mdast-util-to-hast/lib/handlers/root.js","../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../node_modules/mdast-util-to-hast/lib/handlers/table.js","../node_modules/mdast-util-to-hast/lib/handlers/text.js","../node_modules/mdast-util-to-hast/lib/index.js","../node_modules/unist-util-generated/lib/index.js","../node_modules/mdast-util-to-hast/lib/footer.js","../node_modules/remark-rehype/index.js","../node_modules/property-information/lib/util/schema.js","../node_modules/property-information/lib/util/merge.js","../node_modules/property-information/lib/normalize.js","../node_modules/property-information/lib/util/info.js","../node_modules/property-information/lib/util/types.js","../node_modules/property-information/lib/util/defined-info.js","../node_modules/property-information/lib/util/create.js","../node_modules/property-information/lib/xlink.js","../node_modules/property-information/lib/xml.js","../node_modules/property-information/lib/util/case-sensitive-transform.js","../node_modules/property-information/lib/util/case-insensitive-transform.js","../node_modules/property-information/lib/xmlns.js","../node_modules/property-information/lib/aria.js","../node_modules/property-information/lib/html.js","../node_modules/property-information/lib/svg.js","../node_modules/property-information/index.js","../node_modules/react-markdown/lib/rehype-filter.js","../node_modules/react-markdown/lib/uri-transformer.js","../node_modules/hast-util-whitespace/index.js","../node_modules/property-information/lib/find.js","../node_modules/property-information/lib/hast-to-react.js","../node_modules/react-markdown/lib/ast-to-react.js","../node_modules/comma-separated-tokens/index.js","../node_modules/space-separated-tokens/index.js","../node_modules/react-markdown/lib/react-markdown.js"],"sourcesContent":["'use strict';\r\n\r\nvar hasOwn = Object.prototype.hasOwnProperty;\r\nvar toStr = Object.prototype.toString;\r\nvar defineProperty = Object.defineProperty;\r\nvar gOPD = Object.getOwnPropertyDescriptor;\r\n\r\nvar isArray = function isArray(arr) {\r\n\tif (typeof Array.isArray === 'function') {\r\n\t\treturn Array.isArray(arr);\r\n\t}\r\n\r\n\treturn toStr.call(arr) === '[object Array]';\r\n};\r\n\r\nvar isPlainObject = function isPlainObject(obj) {\r\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\r\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\r\n\t// Not own constructor property must be Object\r\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Own properties are enumerated firstly, so to speed up,\r\n\t// if last one is own, then all properties are own.\r\n\tvar key;\r\n\tfor (key in obj) { /**/ }\r\n\r\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\r\n};\r\n\r\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\r\nvar setProperty = function setProperty(target, options) {\r\n\tif (defineProperty && options.name === '__proto__') {\r\n\t\tdefineProperty(target, options.name, {\r\n\t\t\tenumerable: true,\r\n\t\t\tconfigurable: true,\r\n\t\t\tvalue: options.newValue,\r\n\t\t\twritable: true\r\n\t\t});\r\n\t} else {\r\n\t\ttarget[options.name] = options.newValue;\r\n\t}\r\n};\r\n\r\n// Return undefined instead of __proto__ if '__proto__' is not an own property\r\nvar getProperty = function getProperty(obj, name) {\r\n\tif (name === '__proto__') {\r\n\t\tif (!hasOwn.call(obj, name)) {\r\n\t\t\treturn void 0;\r\n\t\t} else if (gOPD) {\r\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\r\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\r\n\t\t\treturn gOPD(obj, name).value;\r\n\t\t}\r\n\t}\r\n\r\n\treturn obj[name];\r\n};\r\n\r\nmodule.exports = function extend() {\r\n\tvar options, name, src, copy, copyIsArray, clone;\r\n\tvar target = arguments[0];\r\n\tvar i = 1;\r\n\tvar length = arguments.length;\r\n\tvar deep = false;\r\n\r\n\t// Handle a deep copy situation\r\n\tif (typeof target === 'boolean') {\r\n\t\tdeep = target;\r\n\t\ttarget = arguments[1] || {};\r\n\t\t// skip the boolean and the target\r\n\t\ti = 2;\r\n\t}\r\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\r\n\t\ttarget = {};\r\n\t}\r\n\r\n\tfor (; i < length; ++i) {\r\n\t\toptions = arguments[i];\r\n\t\t// Only deal with non-null/undefined values\r\n\t\tif (options != null) {\r\n\t\t\t// Extend the base object\r\n\t\t\tfor (name in options) {\r\n\t\t\t\tsrc = getProperty(target, name);\r\n\t\t\t\tcopy = getProperty(options, name);\r\n\r\n\t\t\t\t// Prevent never-ending loop\r\n\t\t\t\tif (target !== copy) {\r\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\r\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\r\n\t\t\t\t\t\tif (copyIsArray) {\r\n\t\t\t\t\t\t\tcopyIsArray = false;\r\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Never move original objects, clone them\r\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\r\n\r\n\t\t\t\t\t// Don't bring in undefined values\r\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\r\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Return the modified object\r\n\treturn target;\r\n};\r\n","// http://www.w3.org/TR/CSS21/grammar.html\r\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\r\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\r\n\r\nvar NEWLINE_REGEX = /\\n/g;\r\nvar WHITESPACE_REGEX = /^\\s*/;\r\n\r\n// declaration\r\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\r\nvar COLON_REGEX = /^:\\s*/;\r\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\r\nvar SEMICOLON_REGEX = /^[;\\s]*/;\r\n\r\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\r\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\r\n\r\n// strings\r\nvar NEWLINE = '\\n';\r\nvar FORWARD_SLASH = '/';\r\nvar ASTERISK = '*';\r\nvar EMPTY_STRING = '';\r\n\r\n// types\r\nvar TYPE_COMMENT = 'comment';\r\nvar TYPE_DECLARATION = 'declaration';\r\n\r\n/**\r\n * @param {String} style\r\n * @param {Object} [options]\r\n * @return {Object[]}\r\n * @throws {TypeError}\r\n * @throws {Error}\r\n */\r\nmodule.exports = function(style, options) {\r\n  if (typeof style !== 'string') {\r\n    throw new TypeError('First argument must be a string');\r\n  }\r\n\r\n  if (!style) return [];\r\n\r\n  options = options || {};\r\n\r\n  /**\r\n   * Positional.\r\n   */\r\n  var lineno = 1;\r\n  var column = 1;\r\n\r\n  /**\r\n   * Update lineno and column based on `str`.\r\n   *\r\n   * @param {String} str\r\n   */\r\n  function updatePosition(str) {\r\n    var lines = str.match(NEWLINE_REGEX);\r\n    if (lines) lineno += lines.length;\r\n    var i = str.lastIndexOf(NEWLINE);\r\n    column = ~i ? str.length - i : column + str.length;\r\n  }\r\n\r\n  /**\r\n   * Mark position and patch `node.position`.\r\n   *\r\n   * @return {Function}\r\n   */\r\n  function position() {\r\n    var start = { line: lineno, column: column };\r\n    return function(node) {\r\n      node.position = new Position(start);\r\n      whitespace();\r\n      return node;\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Store position information for a node.\r\n   *\r\n   * @constructor\r\n   * @property {Object} start\r\n   * @property {Object} end\r\n   * @property {undefined|String} source\r\n   */\r\n  function Position(start) {\r\n    this.start = start;\r\n    this.end = { line: lineno, column: column };\r\n    this.source = options.source;\r\n  }\r\n\r\n  /**\r\n   * Non-enumerable source string.\r\n   */\r\n  Position.prototype.content = style;\r\n\r\n  var errorsList = [];\r\n\r\n  /**\r\n   * Error `msg`.\r\n   *\r\n   * @param {String} msg\r\n   * @throws {Error}\r\n   */\r\n  function error(msg) {\r\n    var err = new Error(\r\n      options.source + ':' + lineno + ':' + column + ': ' + msg\r\n    );\r\n    err.reason = msg;\r\n    err.filename = options.source;\r\n    err.line = lineno;\r\n    err.column = column;\r\n    err.source = style;\r\n\r\n    if (options.silent) {\r\n      errorsList.push(err);\r\n    } else {\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Match `re` and return captures.\r\n   *\r\n   * @param {RegExp} re\r\n   * @return {undefined|Array}\r\n   */\r\n  function match(re) {\r\n    var m = re.exec(style);\r\n    if (!m) return;\r\n    var str = m[0];\r\n    updatePosition(str);\r\n    style = style.slice(str.length);\r\n    return m;\r\n  }\r\n\r\n  /**\r\n   * Parse whitespace.\r\n   */\r\n  function whitespace() {\r\n    match(WHITESPACE_REGEX);\r\n  }\r\n\r\n  /**\r\n   * Parse comments.\r\n   *\r\n   * @param {Object[]} [rules]\r\n   * @return {Object[]}\r\n   */\r\n  function comments(rules) {\r\n    var c;\r\n    rules = rules || [];\r\n    while ((c = comment())) {\r\n      if (c !== false) {\r\n        rules.push(c);\r\n      }\r\n    }\r\n    return rules;\r\n  }\r\n\r\n  /**\r\n   * Parse comment.\r\n   *\r\n   * @return {Object}\r\n   * @throws {Error}\r\n   */\r\n  function comment() {\r\n    var pos = position();\r\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\r\n\r\n    var i = 2;\r\n    while (\r\n      EMPTY_STRING != style.charAt(i) &&\r\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\r\n    ) {\r\n      ++i;\r\n    }\r\n    i += 2;\r\n\r\n    if (EMPTY_STRING === style.charAt(i - 1)) {\r\n      return error('End of comment missing');\r\n    }\r\n\r\n    var str = style.slice(2, i - 2);\r\n    column += 2;\r\n    updatePosition(str);\r\n    style = style.slice(i);\r\n    column += 2;\r\n\r\n    return pos({\r\n      type: TYPE_COMMENT,\r\n      comment: str\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Parse declaration.\r\n   *\r\n   * @return {Object}\r\n   * @throws {Error}\r\n   */\r\n  function declaration() {\r\n    var pos = position();\r\n\r\n    // prop\r\n    var prop = match(PROPERTY_REGEX);\r\n    if (!prop) return;\r\n    comment();\r\n\r\n    // :\r\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\r\n\r\n    // val\r\n    var val = match(VALUE_REGEX);\r\n\r\n    var ret = pos({\r\n      type: TYPE_DECLARATION,\r\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\r\n      value: val\r\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\r\n        : EMPTY_STRING\r\n    });\r\n\r\n    // ;\r\n    match(SEMICOLON_REGEX);\r\n\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * Parse declarations.\r\n   *\r\n   * @return {Object[]}\r\n   */\r\n  function declarations() {\r\n    var decls = [];\r\n\r\n    comments(decls);\r\n\r\n    // declarations\r\n    var decl;\r\n    while ((decl = declaration())) {\r\n      if (decl !== false) {\r\n        decls.push(decl);\r\n        comments(decls);\r\n      }\r\n    }\r\n\r\n    return decls;\r\n  }\r\n\r\n  whitespace();\r\n  return declarations();\r\n};\r\n\r\n/**\r\n * Trim `str`.\r\n *\r\n * @param {String} str\r\n * @return {String}\r\n */\r\nfunction trim(str) {\r\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\r\n}\r\n","\r\n'use strict';\r\n\r\n\r\nvar encodeCache = {};\r\n\r\n\r\n// Create a lookup array where anything but characters in `chars` string\r\n// and alphanumeric chars is percent-encoded.\r\n//\r\nfunction getEncodeCache(exclude) {\r\n  var i, ch, cache = encodeCache[exclude];\r\n  if (cache) { return cache; }\r\n\r\n  cache = encodeCache[exclude] = [];\r\n\r\n  for (i = 0; i < 128; i++) {\r\n    ch = String.fromCharCode(i);\r\n\r\n    if (/^[0-9a-z]$/i.test(ch)) {\r\n      // always allow unencoded alphanumeric characters\r\n      cache.push(ch);\r\n    } else {\r\n      cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2));\r\n    }\r\n  }\r\n\r\n  for (i = 0; i < exclude.length; i++) {\r\n    cache[exclude.charCodeAt(i)] = exclude[i];\r\n  }\r\n\r\n  return cache;\r\n}\r\n\r\n\r\n// Encode unsafe characters with percent-encoding, skipping already\r\n// encoded sequences.\r\n//\r\n//  - string       - string to encode\r\n//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)\r\n//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)\r\n//\r\nfunction encode(string, exclude, keepEscaped) {\r\n  var i, l, code, nextCode, cache,\r\n      result = '';\r\n\r\n  if (typeof exclude !== 'string') {\r\n    // encode(string, keepEscaped)\r\n    keepEscaped  = exclude;\r\n    exclude = encode.defaultChars;\r\n  }\r\n\r\n  if (typeof keepEscaped === 'undefined') {\r\n    keepEscaped = true;\r\n  }\r\n\r\n  cache = getEncodeCache(exclude);\r\n\r\n  for (i = 0, l = string.length; i < l; i++) {\r\n    code = string.charCodeAt(i);\r\n\r\n    if (keepEscaped && code === 0x25 /* % */ && i + 2 < l) {\r\n      if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {\r\n        result += string.slice(i, i + 3);\r\n        i += 2;\r\n        continue;\r\n      }\r\n    }\r\n\r\n    if (code < 128) {\r\n      result += cache[code];\r\n      continue;\r\n    }\r\n\r\n    if (code >= 0xD800 && code <= 0xDFFF) {\r\n      if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {\r\n        nextCode = string.charCodeAt(i + 1);\r\n        if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {\r\n          result += encodeURIComponent(string[i] + string[i + 1]);\r\n          i++;\r\n          continue;\r\n        }\r\n      }\r\n      result += '%EF%BF%BD';\r\n      continue;\r\n    }\r\n\r\n    result += encodeURIComponent(string[i]);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nencode.defaultChars   = \";/?:@&=+$,-_.!~*'()#\";\r\nencode.componentChars = \"-_.!~*'()\";\r\n\r\n\r\nmodule.exports = encode;\r\n","/** @license React v17.0.2\r\n * react-is.production.min.js\r\n *\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n'use strict';var b=60103,c=60106,d=60107,e=60108,f=60114,g=60109,h=60110,k=60112,l=60113,m=60120,n=60115,p=60116,q=60121,r=60122,u=60117,v=60129,w=60131;\r\nif(\"function\"===typeof Symbol&&Symbol.for){var x=Symbol.for;b=x(\"react.element\");c=x(\"react.portal\");d=x(\"react.fragment\");e=x(\"react.strict_mode\");f=x(\"react.profiler\");g=x(\"react.provider\");h=x(\"react.context\");k=x(\"react.forward_ref\");l=x(\"react.suspense\");m=x(\"react.suspense_list\");n=x(\"react.memo\");p=x(\"react.lazy\");q=x(\"react.block\");r=x(\"react.server.block\");u=x(\"react.fundamental\");v=x(\"react.debug_trace_mode\");w=x(\"react.legacy_hidden\")}\r\nfunction y(a){if(\"object\"===typeof a&&null!==a){var t=a.$$typeof;switch(t){case b:switch(a=a.type,a){case d:case f:case e:case l:case m:return a;default:switch(a=a&&a.$$typeof,a){case h:case k:case p:case n:case g:return a;default:return t}}case c:return t}}}var z=g,A=b,B=k,C=d,D=p,E=n,F=c,G=f,H=e,I=l;exports.ContextConsumer=h;exports.ContextProvider=z;exports.Element=A;exports.ForwardRef=B;exports.Fragment=C;exports.Lazy=D;exports.Memo=E;exports.Portal=F;exports.Profiler=G;exports.StrictMode=H;\r\nexports.Suspense=I;exports.isAsyncMode=function(){return!1};exports.isConcurrentMode=function(){return!1};exports.isContextConsumer=function(a){return y(a)===h};exports.isContextProvider=function(a){return y(a)===g};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===b};exports.isForwardRef=function(a){return y(a)===k};exports.isFragment=function(a){return y(a)===d};exports.isLazy=function(a){return y(a)===p};exports.isMemo=function(a){return y(a)===n};\r\nexports.isPortal=function(a){return y(a)===c};exports.isProfiler=function(a){return y(a)===f};exports.isStrictMode=function(a){return y(a)===e};exports.isSuspense=function(a){return y(a)===l};exports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===d||a===f||a===v||a===e||a===l||a===m||a===w||\"object\"===typeof a&&null!==a&&(a.$$typeof===p||a.$$typeof===n||a.$$typeof===g||a.$$typeof===h||a.$$typeof===k||a.$$typeof===u||a.$$typeof===q||a[0]===r)?!0:!1};\r\nexports.typeOf=y;\r\n","'use strict';\r\n\r\nif (process.env.NODE_ENV === 'production') {\r\n  module.exports = require('./cjs/react-is.production.min.js');\r\n} else {\r\n  module.exports = require('./cjs/react-is.development.js');\r\n}\r\n","var parse = require('inline-style-parser');\r\n\r\n/**\r\n * Parses inline style to object.\r\n *\r\n * @example\r\n * // returns { 'line-height': '42' }\r\n * StyleToObject('line-height: 42;');\r\n *\r\n * @param  {String}      style      - The inline style.\r\n * @param  {Function}    [iterator] - The iterator function.\r\n * @return {null|Object}\r\n */\r\nfunction StyleToObject(style, iterator) {\r\n  var output = null;\r\n  if (!style || typeof style !== 'string') {\r\n    return output;\r\n  }\r\n\r\n  var declaration;\r\n  var declarations = parse(style);\r\n  var hasIterator = typeof iterator === 'function';\r\n  var property;\r\n  var value;\r\n\r\n  for (var i = 0, len = declarations.length; i < len; i++) {\r\n    declaration = declarations[i];\r\n    property = declaration.property;\r\n    value = declaration.value;\r\n\r\n    if (hasIterator) {\r\n      iterator(property, value, declaration);\r\n    } else if (value) {\r\n      output || (output = {});\r\n      output[property] = value;\r\n    }\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\nmodule.exports = StyleToObject;\r\n","/*!\r\n * Determine if an object is a Buffer\r\n *\r\n * @author   Feross Aboukhadijeh <https://feross.org>\r\n * @license  MIT\r\n */\r\n\r\nmodule.exports = function isBuffer (obj) {\r\n  return obj != null && obj.constructor != null &&\r\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\r\n}\r\n","/*!\r\n * Determine if an object is a Buffer\r\n *\r\n * @author   Feross Aboukhadijeh <https://feross.org>\r\n * @license  MIT\r\n */\r\n\r\nmodule.exports = function isBuffer (obj) {\r\n  return obj != null && obj.constructor != null &&\r\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\r\n}\r\n","import setPrototypeOf from \"./setPrototypeOf.js\";\r\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\r\nexport default function _construct(Parent, args, Class) {\r\n  if (isNativeReflectConstruct()) {\r\n    _construct = Reflect.construct.bind();\r\n  } else {\r\n    _construct = function _construct(Parent, args, Class) {\r\n      var a = [null];\r\n      a.push.apply(a, args);\r\n      var Constructor = Function.bind.apply(Parent, a);\r\n      var instance = new Constructor();\r\n      if (Class) setPrototypeOf(instance, Class.prototype);\r\n      return instance;\r\n    };\r\n  }\r\n  return _construct.apply(null, arguments);\r\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\r\nimport setPrototypeOf from \"./setPrototypeOf.js\";\r\nimport isNativeFunction from \"./isNativeFunction.js\";\r\nimport construct from \"./construct.js\";\r\nexport default function _wrapNativeSuper(Class) {\r\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\r\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\r\n    if (Class === null || !isNativeFunction(Class)) return Class;\r\n    if (typeof Class !== \"function\") {\r\n      throw new TypeError(\"Super expression must either be null or a function\");\r\n    }\r\n    if (typeof _cache !== \"undefined\") {\r\n      if (_cache.has(Class)) return _cache.get(Class);\r\n      _cache.set(Class, Wrapper);\r\n    }\r\n    function Wrapper() {\r\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\r\n    }\r\n    Wrapper.prototype = Object.create(Class.prototype, {\r\n      constructor: {\r\n        value: Wrapper,\r\n        enumerable: false,\r\n        writable: true,\r\n        configurable: true\r\n      }\r\n    });\r\n    return setPrototypeOf(Wrapper, Class);\r\n  };\r\n  return _wrapNativeSuper(Class);\r\n}","export default function _isNativeFunction(fn) {\r\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\r\n}","/**\r\n * @typedef {import('unist').Node} Node\r\n * @typedef {import('unist').Point} Point\r\n * @typedef {import('unist').Position} Position\r\n */\r\n\r\n/**\r\n * @typedef NodeLike\r\n * @property {string} type\r\n * @property {PositionLike | null | undefined} [position]\r\n *\r\n * @typedef PositionLike\r\n * @property {PointLike | null | undefined} [start]\r\n * @property {PointLike | null | undefined} [end]\r\n *\r\n * @typedef PointLike\r\n * @property {number | null | undefined} [line]\r\n * @property {number | null | undefined} [column]\r\n * @property {number | null | undefined} [offset]\r\n */\r\n\r\n/**\r\n * Serialize the positional info of a point, position (start and end points),\r\n * or node.\r\n *\r\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\r\n *   Node, position, or point.\r\n * @returns {string}\r\n *   Pretty printed positional info of a node (`string`).\r\n *\r\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\r\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\r\n *   column, `s` for `start`, and `e` for end.\r\n *   An empty string (`''`) is returned if the given value is neither `node`,\r\n *   `position`, nor `point`.\r\n */\r\nexport function stringifyPosition(value) {\r\n  // Nothing.\r\n  if (!value || typeof value !== 'object') {\r\n    return ''\r\n  }\r\n\r\n  // Node.\r\n  if ('position' in value || 'type' in value) {\r\n    return position(value.position)\r\n  }\r\n\r\n  // Position.\r\n  if ('start' in value || 'end' in value) {\r\n    return position(value)\r\n  }\r\n\r\n  // Point.\r\n  if ('line' in value || 'column' in value) {\r\n    return point(value)\r\n  }\r\n\r\n  // ?\r\n  return ''\r\n}\r\n\r\n/**\r\n * @param {Point | PointLike | null | undefined} point\r\n * @returns {string}\r\n */\r\nfunction point(point) {\r\n  return index(point && point.line) + ':' + index(point && point.column)\r\n}\r\n\r\n/**\r\n * @param {Position | PositionLike | null | undefined} pos\r\n * @returns {string}\r\n */\r\nfunction position(pos) {\r\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\r\n}\r\n\r\n/**\r\n * @param {number | null | undefined} value\r\n * @returns {number}\r\n */\r\nfunction index(value) {\r\n  return value && typeof value === 'number' ? value : 1\r\n}\r\n","/**\r\n * @typedef {import('unist').Node} Node\r\n * @typedef {import('unist').Position} Position\r\n * @typedef {import('unist').Point} Point\r\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\r\n */\r\n\r\nimport {stringifyPosition} from 'unist-util-stringify-position'\r\n\r\n/**\r\n * Message.\r\n */\r\nexport class VFileMessage extends Error {\r\n  /**\r\n   * Create a message for `reason` at `place` from `origin`.\r\n   *\r\n   * When an error is passed in as `reason`, the `stack` is copied.\r\n   *\r\n   * @param {string | Error | VFileMessage} reason\r\n   *   Reason for message, uses the stack and message of the error if given.\r\n   *\r\n   *   > 👉 **Note**: you should use markdown.\r\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\r\n   *   Place in file where the message occurred.\r\n   * @param {string | null | undefined} [origin]\r\n   *   Place in code where the message originates (example:\r\n   *   `'my-package:my-rule'` or `'my-rule'`).\r\n   * @returns\r\n   *   Instance of `VFileMessage`.\r\n   */\r\n  // To do: next major: expose `undefined` everywhere instead of `null`.\r\n  constructor(reason, place, origin) {\r\n    /** @type {[string | null, string | null]} */\r\n    const parts = [null, null]\r\n    /** @type {Position} */\r\n    let position = {\r\n      // @ts-expect-error: we always follows the structure of `position`.\r\n      start: {line: null, column: null},\r\n      // @ts-expect-error: \"\r\n      end: {line: null, column: null}\r\n    }\r\n\r\n    super()\r\n\r\n    if (typeof place === 'string') {\r\n      origin = place\r\n      place = undefined\r\n    }\r\n\r\n    if (typeof origin === 'string') {\r\n      const index = origin.indexOf(':')\r\n\r\n      if (index === -1) {\r\n        parts[1] = origin\r\n      } else {\r\n        parts[0] = origin.slice(0, index)\r\n        parts[1] = origin.slice(index + 1)\r\n      }\r\n    }\r\n\r\n    if (place) {\r\n      // Node.\r\n      if ('type' in place || 'position' in place) {\r\n        if (place.position) {\r\n          // To do: next major: deep clone.\r\n          // @ts-expect-error: looks like a position.\r\n          position = place.position\r\n        }\r\n      }\r\n      // Position.\r\n      else if ('start' in place || 'end' in place) {\r\n        // @ts-expect-error: looks like a position.\r\n        // To do: next major: deep clone.\r\n        position = place\r\n      }\r\n      // Point.\r\n      else if ('line' in place || 'column' in place) {\r\n        // To do: next major: deep clone.\r\n        position.start = place\r\n      }\r\n    }\r\n\r\n    // Fields from `Error`.\r\n    /**\r\n     * Serialized positional info of error.\r\n     *\r\n     * On normal errors, this would be something like `ParseError`, buit in\r\n     * `VFile` messages we use this space to show where an error happened.\r\n     */\r\n    this.name = stringifyPosition(place) || '1:1'\r\n\r\n    /**\r\n     * Reason for message.\r\n     *\r\n     * @type {string}\r\n     */\r\n    this.message = typeof reason === 'object' ? reason.message : reason\r\n\r\n    /**\r\n     * Stack of message.\r\n     *\r\n     * This is used by normal errors to show where something happened in\r\n     * programming code, irrelevant for `VFile` messages,\r\n     *\r\n     * @type {string}\r\n     */\r\n    this.stack = ''\r\n\r\n    if (typeof reason === 'object' && reason.stack) {\r\n      this.stack = reason.stack\r\n    }\r\n\r\n    /**\r\n     * Reason for message.\r\n     *\r\n     * > 👉 **Note**: you should use markdown.\r\n     *\r\n     * @type {string}\r\n     */\r\n    this.reason = this.message\r\n\r\n    /* eslint-disable no-unused-expressions */\r\n    /**\r\n     * State of problem.\r\n     *\r\n     * * `true` — marks associated file as no longer processable (error)\r\n     * * `false` — necessitates a (potential) change (warning)\r\n     * * `null | undefined` — for things that might not need changing (info)\r\n     *\r\n     * @type {boolean | null | undefined}\r\n     */\r\n    this.fatal\r\n\r\n    /**\r\n     * Starting line of error.\r\n     *\r\n     * @type {number | null}\r\n     */\r\n    this.line = position.start.line\r\n\r\n    /**\r\n     * Starting column of error.\r\n     *\r\n     * @type {number | null}\r\n     */\r\n    this.column = position.start.column\r\n\r\n    /**\r\n     * Full unist position.\r\n     *\r\n     * @type {Position | null}\r\n     */\r\n    this.position = position\r\n\r\n    /**\r\n     * Namespace of message (example: `'my-package'`).\r\n     *\r\n     * @type {string | null}\r\n     */\r\n    this.source = parts[0]\r\n\r\n    /**\r\n     * Category of message (example: `'my-rule'`).\r\n     *\r\n     * @type {string | null}\r\n     */\r\n    this.ruleId = parts[1]\r\n\r\n    /**\r\n     * Path of a file (used throughout the `VFile` ecosystem).\r\n     *\r\n     * @type {string | null}\r\n     */\r\n    this.file\r\n\r\n    // The following fields are “well known”.\r\n    // Not standard.\r\n    // Feel free to add other non-standard fields to your messages.\r\n\r\n    /**\r\n     * Specify the source value that’s being reported, which is deemed\r\n     * incorrect.\r\n     *\r\n     * @type {string | null}\r\n     */\r\n    this.actual\r\n\r\n    /**\r\n     * Suggest acceptable values that can be used instead of `actual`.\r\n     *\r\n     * @type {Array<string> | null}\r\n     */\r\n    this.expected\r\n\r\n    /**\r\n     * Link to docs for the message.\r\n     *\r\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\r\n     * > to `new URL(x)`.\r\n     *\r\n     * @type {string | null}\r\n     */\r\n    this.url\r\n\r\n    /**\r\n     * Long form description of the message (you should use markdown).\r\n     *\r\n     * @type {string | null}\r\n     */\r\n    this.note\r\n    /* eslint-enable no-unused-expressions */\r\n  }\r\n}\r\n\r\nVFileMessage.prototype.file = ''\r\nVFileMessage.prototype.name = ''\r\nVFileMessage.prototype.reason = ''\r\nVFileMessage.prototype.message = ''\r\nVFileMessage.prototype.stack = ''\r\nVFileMessage.prototype.fatal = null\r\nVFileMessage.prototype.column = null\r\nVFileMessage.prototype.line = null\r\nVFileMessage.prototype.source = null\r\nVFileMessage.prototype.ruleId = null\r\nVFileMessage.prototype.position = null\r\n","// A derivative work based on:\r\n// <https://github.com/browserify/path-browserify>.\r\n// Which is licensed:\r\n//\r\n// MIT License\r\n//\r\n// Copyright (c) 2013 James Halliday\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\r\n// this software and associated documentation files (the \"Software\"), to deal in\r\n// the Software without restriction, including without limitation the rights to\r\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\n// the Software, and to permit persons to whom the Software is furnished to do so,\r\n// subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in all\r\n// copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n// A derivative work based on:\r\n//\r\n// Parts of that are extracted from Node’s internal `path` module:\r\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\r\n// Which is licensed:\r\n//\r\n// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\nexport const path = {basename, dirname, extname, join, sep: '/'}\r\n\r\n/* eslint-disable max-depth, complexity */\r\n\r\n/**\r\n * Get the basename from a path.\r\n *\r\n * @param {string} path\r\n *   File path.\r\n * @param {string | undefined} [ext]\r\n *   Extension to strip.\r\n * @returns {string}\r\n *   Stem or basename.\r\n */\r\nfunction basename(path, ext) {\r\n  if (ext !== undefined && typeof ext !== 'string') {\r\n    throw new TypeError('\"ext\" argument must be a string')\r\n  }\r\n\r\n  assertPath(path)\r\n  let start = 0\r\n  let end = -1\r\n  let index = path.length\r\n  /** @type {boolean | undefined} */\r\n  let seenNonSlash\r\n\r\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\r\n    while (index--) {\r\n      if (path.charCodeAt(index) === 47 /* `/` */) {\r\n        // If we reached a path separator that was not part of a set of path\r\n        // separators at the end of the string, stop now.\r\n        if (seenNonSlash) {\r\n          start = index + 1\r\n          break\r\n        }\r\n      } else if (end < 0) {\r\n        // We saw the first non-path separator, mark this as the end of our\r\n        // path component.\r\n        seenNonSlash = true\r\n        end = index + 1\r\n      }\r\n    }\r\n\r\n    return end < 0 ? '' : path.slice(start, end)\r\n  }\r\n\r\n  if (ext === path) {\r\n    return ''\r\n  }\r\n\r\n  let firstNonSlashEnd = -1\r\n  let extIndex = ext.length - 1\r\n\r\n  while (index--) {\r\n    if (path.charCodeAt(index) === 47 /* `/` */) {\r\n      // If we reached a path separator that was not part of a set of path\r\n      // separators at the end of the string, stop now.\r\n      if (seenNonSlash) {\r\n        start = index + 1\r\n        break\r\n      }\r\n    } else {\r\n      if (firstNonSlashEnd < 0) {\r\n        // We saw the first non-path separator, remember this index in case\r\n        // we need it if the extension ends up not matching.\r\n        seenNonSlash = true\r\n        firstNonSlashEnd = index + 1\r\n      }\r\n\r\n      if (extIndex > -1) {\r\n        // Try to match the explicit extension.\r\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\r\n          if (extIndex < 0) {\r\n            // We matched the extension, so mark this as the end of our path\r\n            // component\r\n            end = index\r\n          }\r\n        } else {\r\n          // Extension does not match, so our result is the entire path\r\n          // component\r\n          extIndex = -1\r\n          end = firstNonSlashEnd\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (start === end) {\r\n    end = firstNonSlashEnd\r\n  } else if (end < 0) {\r\n    end = path.length\r\n  }\r\n\r\n  return path.slice(start, end)\r\n}\r\n\r\n/**\r\n * Get the dirname from a path.\r\n *\r\n * @param {string} path\r\n *   File path.\r\n * @returns {string}\r\n *   File path.\r\n */\r\nfunction dirname(path) {\r\n  assertPath(path)\r\n\r\n  if (path.length === 0) {\r\n    return '.'\r\n  }\r\n\r\n  let end = -1\r\n  let index = path.length\r\n  /** @type {boolean | undefined} */\r\n  let unmatchedSlash\r\n\r\n  // Prefix `--` is important to not run on `0`.\r\n  while (--index) {\r\n    if (path.charCodeAt(index) === 47 /* `/` */) {\r\n      if (unmatchedSlash) {\r\n        end = index\r\n        break\r\n      }\r\n    } else if (!unmatchedSlash) {\r\n      // We saw the first non-path separator\r\n      unmatchedSlash = true\r\n    }\r\n  }\r\n\r\n  return end < 0\r\n    ? path.charCodeAt(0) === 47 /* `/` */\r\n      ? '/'\r\n      : '.'\r\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\r\n    ? '//'\r\n    : path.slice(0, end)\r\n}\r\n\r\n/**\r\n * Get an extname from a path.\r\n *\r\n * @param {string} path\r\n *   File path.\r\n * @returns {string}\r\n *   Extname.\r\n */\r\nfunction extname(path) {\r\n  assertPath(path)\r\n\r\n  let index = path.length\r\n\r\n  let end = -1\r\n  let startPart = 0\r\n  let startDot = -1\r\n  // Track the state of characters (if any) we see before our first dot and\r\n  // after any path separator we find.\r\n  let preDotState = 0\r\n  /** @type {boolean | undefined} */\r\n  let unmatchedSlash\r\n\r\n  while (index--) {\r\n    const code = path.charCodeAt(index)\r\n\r\n    if (code === 47 /* `/` */) {\r\n      // If we reached a path separator that was not part of a set of path\r\n      // separators at the end of the string, stop now.\r\n      if (unmatchedSlash) {\r\n        startPart = index + 1\r\n        break\r\n      }\r\n\r\n      continue\r\n    }\r\n\r\n    if (end < 0) {\r\n      // We saw the first non-path separator, mark this as the end of our\r\n      // extension.\r\n      unmatchedSlash = true\r\n      end = index + 1\r\n    }\r\n\r\n    if (code === 46 /* `.` */) {\r\n      // If this is our first dot, mark it as the start of our extension.\r\n      if (startDot < 0) {\r\n        startDot = index\r\n      } else if (preDotState !== 1) {\r\n        preDotState = 1\r\n      }\r\n    } else if (startDot > -1) {\r\n      // We saw a non-dot and non-path separator before our dot, so we should\r\n      // have a good chance at having a non-empty extension.\r\n      preDotState = -1\r\n    }\r\n  }\r\n\r\n  if (\r\n    startDot < 0 ||\r\n    end < 0 ||\r\n    // We saw a non-dot character immediately before the dot.\r\n    preDotState === 0 ||\r\n    // The (right-most) trimmed path component is exactly `..`.\r\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\r\n  ) {\r\n    return ''\r\n  }\r\n\r\n  return path.slice(startDot, end)\r\n}\r\n\r\n/**\r\n * Join segments from a path.\r\n *\r\n * @param {Array<string>} segments\r\n *   Path segments.\r\n * @returns {string}\r\n *   File path.\r\n */\r\nfunction join(...segments) {\r\n  let index = -1\r\n  /** @type {string | undefined} */\r\n  let joined\r\n\r\n  while (++index < segments.length) {\r\n    assertPath(segments[index])\r\n\r\n    if (segments[index]) {\r\n      joined =\r\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\r\n    }\r\n  }\r\n\r\n  return joined === undefined ? '.' : normalize(joined)\r\n}\r\n\r\n/**\r\n * Normalize a basic file path.\r\n *\r\n * @param {string} path\r\n *   File path.\r\n * @returns {string}\r\n *   File path.\r\n */\r\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\r\n// manually removed from it.\r\nfunction normalize(path) {\r\n  assertPath(path)\r\n\r\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\r\n\r\n  // Normalize the path according to POSIX rules.\r\n  let value = normalizeString(path, !absolute)\r\n\r\n  if (value.length === 0 && !absolute) {\r\n    value = '.'\r\n  }\r\n\r\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\r\n    value += '/'\r\n  }\r\n\r\n  return absolute ? '/' + value : value\r\n}\r\n\r\n/**\r\n * Resolve `.` and `..` elements in a path with directory names.\r\n *\r\n * @param {string} path\r\n *   File path.\r\n * @param {boolean} allowAboveRoot\r\n *   Whether `..` can move above root.\r\n * @returns {string}\r\n *   File path.\r\n */\r\nfunction normalizeString(path, allowAboveRoot) {\r\n  let result = ''\r\n  let lastSegmentLength = 0\r\n  let lastSlash = -1\r\n  let dots = 0\r\n  let index = -1\r\n  /** @type {number | undefined} */\r\n  let code\r\n  /** @type {number} */\r\n  let lastSlashIndex\r\n\r\n  while (++index <= path.length) {\r\n    if (index < path.length) {\r\n      code = path.charCodeAt(index)\r\n    } else if (code === 47 /* `/` */) {\r\n      break\r\n    } else {\r\n      code = 47 /* `/` */\r\n    }\r\n\r\n    if (code === 47 /* `/` */) {\r\n      if (lastSlash === index - 1 || dots === 1) {\r\n        // Empty.\r\n      } else if (lastSlash !== index - 1 && dots === 2) {\r\n        if (\r\n          result.length < 2 ||\r\n          lastSegmentLength !== 2 ||\r\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\r\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\r\n        ) {\r\n          if (result.length > 2) {\r\n            lastSlashIndex = result.lastIndexOf('/')\r\n\r\n            if (lastSlashIndex !== result.length - 1) {\r\n              if (lastSlashIndex < 0) {\r\n                result = ''\r\n                lastSegmentLength = 0\r\n              } else {\r\n                result = result.slice(0, lastSlashIndex)\r\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\r\n              }\r\n\r\n              lastSlash = index\r\n              dots = 0\r\n              continue\r\n            }\r\n          } else if (result.length > 0) {\r\n            result = ''\r\n            lastSegmentLength = 0\r\n            lastSlash = index\r\n            dots = 0\r\n            continue\r\n          }\r\n        }\r\n\r\n        if (allowAboveRoot) {\r\n          result = result.length > 0 ? result + '/..' : '..'\r\n          lastSegmentLength = 2\r\n        }\r\n      } else {\r\n        if (result.length > 0) {\r\n          result += '/' + path.slice(lastSlash + 1, index)\r\n        } else {\r\n          result = path.slice(lastSlash + 1, index)\r\n        }\r\n\r\n        lastSegmentLength = index - lastSlash - 1\r\n      }\r\n\r\n      lastSlash = index\r\n      dots = 0\r\n    } else if (code === 46 /* `.` */ && dots > -1) {\r\n      dots++\r\n    } else {\r\n      dots = -1\r\n    }\r\n  }\r\n\r\n  return result\r\n}\r\n\r\n/**\r\n * Make sure `path` is a string.\r\n *\r\n * @param {string} path\r\n *   File path.\r\n * @returns {asserts path is string}\r\n *   Nothing.\r\n */\r\nfunction assertPath(path) {\r\n  if (typeof path !== 'string') {\r\n    throw new TypeError(\r\n      'Path must be a string. Received ' + JSON.stringify(path)\r\n    )\r\n  }\r\n}\r\n\r\n/* eslint-enable max-depth, complexity */\r\n","// Somewhat based on:\r\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\r\n// But I don’t think one tiny line of code can be copyrighted. 😅\r\nexport const proc = {cwd}\r\n\r\nfunction cwd() {\r\n  return '/'\r\n}\r\n","/**\r\n * @typedef URL\r\n * @property {string} hash\r\n * @property {string} host\r\n * @property {string} hostname\r\n * @property {string} href\r\n * @property {string} origin\r\n * @property {string} password\r\n * @property {string} pathname\r\n * @property {string} port\r\n * @property {string} protocol\r\n * @property {string} search\r\n * @property {any} searchParams\r\n * @property {string} username\r\n * @property {() => string} toString\r\n * @property {() => string} toJSON\r\n */\r\n\r\n/**\r\n * Check if `fileUrlOrPath` looks like a URL.\r\n *\r\n * @param {unknown} fileUrlOrPath\r\n *   File path or URL.\r\n * @returns {fileUrlOrPath is URL}\r\n *   Whether it’s a URL.\r\n */\r\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\r\nexport function isUrl(fileUrlOrPath) {\r\n  return (\r\n    fileUrlOrPath !== null &&\r\n    typeof fileUrlOrPath === 'object' &&\r\n    // @ts-expect-error: indexable.\r\n    fileUrlOrPath.href &&\r\n    // @ts-expect-error: indexable.\r\n    fileUrlOrPath.origin\r\n  )\r\n}\r\n","/// <reference lib=\"dom\" />\r\n\r\nimport {isUrl} from './minurl.shared.js'\r\n\r\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\r\n\r\n/**\r\n * @param {string | URL} path\r\n *   File URL.\r\n * @returns {string}\r\n *   File URL.\r\n */\r\nexport function urlToPath(path) {\r\n  if (typeof path === 'string') {\r\n    path = new URL(path)\r\n  } else if (!isUrl(path)) {\r\n    /** @type {NodeJS.ErrnoException} */\r\n    const error = new TypeError(\r\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\r\n        path +\r\n        '`'\r\n    )\r\n    error.code = 'ERR_INVALID_ARG_TYPE'\r\n    throw error\r\n  }\r\n\r\n  if (path.protocol !== 'file:') {\r\n    /** @type {NodeJS.ErrnoException} */\r\n    const error = new TypeError('The URL must be of scheme file')\r\n    error.code = 'ERR_INVALID_URL_SCHEME'\r\n    throw error\r\n  }\r\n\r\n  return getPathFromURLPosix(path)\r\n}\r\n\r\n/**\r\n * Get a path from a POSIX URL.\r\n *\r\n * @param {URL} url\r\n *   URL.\r\n * @returns {string}\r\n *   File path.\r\n */\r\nfunction getPathFromURLPosix(url) {\r\n  if (url.hostname !== '') {\r\n    /** @type {NodeJS.ErrnoException} */\r\n    const error = new TypeError(\r\n      'File URL host must be \"localhost\" or empty on darwin'\r\n    )\r\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\r\n    throw error\r\n  }\r\n\r\n  const pathname = url.pathname\r\n  let index = -1\r\n\r\n  while (++index < pathname.length) {\r\n    if (\r\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\r\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\r\n    ) {\r\n      const third = pathname.charCodeAt(index + 2)\r\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\r\n        /** @type {NodeJS.ErrnoException} */\r\n        const error = new TypeError(\r\n          'File URL path must not include encoded / characters'\r\n        )\r\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\r\n        throw error\r\n      }\r\n    }\r\n  }\r\n\r\n  return decodeURIComponent(pathname)\r\n}\r\n\r\nexport {isUrl} from './minurl.shared.js'\r\n","/**\r\n * @typedef {import('unist').Node} Node\r\n * @typedef {import('unist').Position} Position\r\n * @typedef {import('unist').Point} Point\r\n * @typedef {import('./minurl.shared.js').URL} URL\r\n * @typedef {import('../index.js').Data} Data\r\n * @typedef {import('../index.js').Value} Value\r\n */\r\n\r\n/**\r\n * @typedef {Record<string, unknown> & {type: string, position?: Position | undefined}} NodeLike\r\n *\r\n * @typedef {'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex'} BufferEncoding\r\n *   Encodings supported by the buffer class.\r\n *\r\n *   This is a copy of the types from Node, copied to prevent Node globals from\r\n *   being needed.\r\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\r\n *\r\n * @typedef {Options | URL | Value | VFile} Compatible\r\n *   Things that can be passed to the constructor.\r\n *\r\n * @typedef VFileCoreOptions\r\n *   Set multiple values.\r\n * @property {Value | null | undefined} [value]\r\n *   Set `value`.\r\n * @property {string | null | undefined} [cwd]\r\n *   Set `cwd`.\r\n * @property {Array<string> | null | undefined} [history]\r\n *   Set `history`.\r\n * @property {URL | string | null | undefined} [path]\r\n *   Set `path`.\r\n * @property {string | null | undefined} [basename]\r\n *   Set `basename`.\r\n * @property {string | null | undefined} [stem]\r\n *   Set `stem`.\r\n * @property {string | null | undefined} [extname]\r\n *   Set `extname`.\r\n * @property {string | null | undefined} [dirname]\r\n *   Set `dirname`.\r\n * @property {Data | null | undefined} [data]\r\n *   Set `data`.\r\n *\r\n * @typedef Map\r\n *   Raw source map.\r\n *\r\n *   See:\r\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\r\n * @property {number} version\r\n *   Which version of the source map spec this map is following.\r\n * @property {Array<string>} sources\r\n *   An array of URLs to the original source files.\r\n * @property {Array<string>} names\r\n *   An array of identifiers which can be referenced by individual mappings.\r\n * @property {string | undefined} [sourceRoot]\r\n *   The URL root from which all sources are relative.\r\n * @property {Array<string> | undefined} [sourcesContent]\r\n *   An array of contents of the original source files.\r\n * @property {string} mappings\r\n *   A string of base64 VLQs which contain the actual mappings.\r\n * @property {string} file\r\n *   The generated file this source map is associated with.\r\n *\r\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\r\n *   Configuration.\r\n *\r\n *   A bunch of keys that will be shallow copied over to the new file.\r\n *\r\n * @typedef {Record<string, unknown>} ReporterSettings\r\n *   Configuration for reporters.\r\n */\r\n\r\n/**\r\n * @template {ReporterSettings} Settings\r\n *   Options type.\r\n * @callback Reporter\r\n *   Type for a reporter.\r\n * @param {Array<VFile>} files\r\n *   Files to report.\r\n * @param {Settings} options\r\n *   Configuration.\r\n * @returns {string}\r\n *   Report.\r\n */\r\n\r\nimport bufferLike from 'is-buffer'\r\nimport {VFileMessage} from 'vfile-message'\r\nimport {path} from './minpath.js'\r\nimport {proc} from './minproc.js'\r\nimport {urlToPath, isUrl} from './minurl.js'\r\n\r\n/**\r\n * Order of setting (least specific to most), we need this because otherwise\r\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\r\n * stem can be set.\r\n *\r\n * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}\r\n */\r\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\r\n\r\nexport class VFile {\r\n  /**\r\n   * Create a new virtual file.\r\n   *\r\n   * `options` is treated as:\r\n   *\r\n   * *   `string` or `Buffer` — `{value: options}`\r\n   * *   `URL` — `{path: options}`\r\n   * *   `VFile` — shallow copies its data over to the new file\r\n   * *   `object` — all fields are shallow copied over to the new file\r\n   *\r\n   * Path related fields are set in the following order (least specific to\r\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\r\n   * `dirname`.\r\n   *\r\n   * You cannot set `dirname` or `extname` without setting either `history`,\r\n   * `path`, `basename`, or `stem` too.\r\n   *\r\n   * @param {Compatible | null | undefined} [value]\r\n   *   File value.\r\n   * @returns\r\n   *   New instance.\r\n   */\r\n  constructor(value) {\r\n    /** @type {Options | VFile} */\r\n    let options\r\n\r\n    if (!value) {\r\n      options = {}\r\n    } else if (typeof value === 'string' || buffer(value)) {\r\n      options = {value}\r\n    } else if (isUrl(value)) {\r\n      options = {path: value}\r\n    } else {\r\n      options = value\r\n    }\r\n\r\n    /**\r\n     * Place to store custom information (default: `{}`).\r\n     *\r\n     * It’s OK to store custom data directly on the file but moving it to\r\n     * `data` is recommended.\r\n     *\r\n     * @type {Data}\r\n     */\r\n    this.data = {}\r\n\r\n    /**\r\n     * List of messages associated with the file.\r\n     *\r\n     * @type {Array<VFileMessage>}\r\n     */\r\n    this.messages = []\r\n\r\n    /**\r\n     * List of filepaths the file moved between.\r\n     *\r\n     * The first is the original path and the last is the current path.\r\n     *\r\n     * @type {Array<string>}\r\n     */\r\n    this.history = []\r\n\r\n    /**\r\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\r\n     *\r\n     * @type {string}\r\n     */\r\n    this.cwd = proc.cwd()\r\n\r\n    /* eslint-disable no-unused-expressions */\r\n    /**\r\n     * Raw value.\r\n     *\r\n     * @type {Value}\r\n     */\r\n    this.value\r\n\r\n    // The below are non-standard, they are “well-known”.\r\n    // As in, used in several tools.\r\n\r\n    /**\r\n     * Whether a file was saved to disk.\r\n     *\r\n     * This is used by vfile reporters.\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    this.stored\r\n\r\n    /**\r\n     * Custom, non-string, compiled, representation.\r\n     *\r\n     * This is used by unified to store non-string results.\r\n     * One example is when turning markdown into React nodes.\r\n     *\r\n     * @type {unknown}\r\n     */\r\n    this.result\r\n\r\n    /**\r\n     * Source map.\r\n     *\r\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\r\n     * module.\r\n     *\r\n     * @type {Map | null | undefined}\r\n     */\r\n    this.map\r\n    /* eslint-enable no-unused-expressions */\r\n\r\n    // Set path related properties in the correct order.\r\n    let index = -1\r\n\r\n    while (++index < order.length) {\r\n      const prop = order[index]\r\n\r\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\r\n      // `vfile`s too.\r\n      if (\r\n        prop in options &&\r\n        options[prop] !== undefined &&\r\n        options[prop] !== null\r\n      ) {\r\n        // @ts-expect-error: TS doesn’t understand basic reality.\r\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\r\n      }\r\n    }\r\n\r\n    /** @type {string} */\r\n    let prop\r\n\r\n    // Set non-path related properties.\r\n    for (prop in options) {\r\n      // @ts-expect-error: fine to set other things.\r\n      if (!order.includes(prop)) {\r\n        // @ts-expect-error: fine to set other things.\r\n        this[prop] = options[prop]\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the full path (example: `'~/index.min.js'`).\r\n   *\r\n   * @returns {string}\r\n   */\r\n  get path() {\r\n    return this.history[this.history.length - 1]\r\n  }\r\n\r\n  /**\r\n   * Set the full path (example: `'~/index.min.js'`).\r\n   *\r\n   * Cannot be nullified.\r\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\r\n   * be turned into a path with `url.fileURLToPath`.\r\n   *\r\n   * @param {string | URL} path\r\n   */\r\n  set path(path) {\r\n    if (isUrl(path)) {\r\n      path = urlToPath(path)\r\n    }\r\n\r\n    assertNonEmpty(path, 'path')\r\n\r\n    if (this.path !== path) {\r\n      this.history.push(path)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the parent path (example: `'~'`).\r\n   */\r\n  get dirname() {\r\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\r\n  }\r\n\r\n  /**\r\n   * Set the parent path (example: `'~'`).\r\n   *\r\n   * Cannot be set if there’s no `path` yet.\r\n   */\r\n  set dirname(dirname) {\r\n    assertPath(this.basename, 'dirname')\r\n    this.path = path.join(dirname || '', this.basename)\r\n  }\r\n\r\n  /**\r\n   * Get the basename (including extname) (example: `'index.min.js'`).\r\n   */\r\n  get basename() {\r\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\r\n  }\r\n\r\n  /**\r\n   * Set basename (including extname) (`'index.min.js'`).\r\n   *\r\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\r\n   * on windows).\r\n   * Cannot be nullified (use `file.path = file.dirname` instead).\r\n   */\r\n  set basename(basename) {\r\n    assertNonEmpty(basename, 'basename')\r\n    assertPart(basename, 'basename')\r\n    this.path = path.join(this.dirname || '', basename)\r\n  }\r\n\r\n  /**\r\n   * Get the extname (including dot) (example: `'.js'`).\r\n   */\r\n  get extname() {\r\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\r\n  }\r\n\r\n  /**\r\n   * Set the extname (including dot) (example: `'.js'`).\r\n   *\r\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\r\n   * on windows).\r\n   * Cannot be set if there’s no `path` yet.\r\n   */\r\n  set extname(extname) {\r\n    assertPart(extname, 'extname')\r\n    assertPath(this.dirname, 'extname')\r\n\r\n    if (extname) {\r\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\r\n        throw new Error('`extname` must start with `.`')\r\n      }\r\n\r\n      if (extname.includes('.', 1)) {\r\n        throw new Error('`extname` cannot contain multiple dots')\r\n      }\r\n    }\r\n\r\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\r\n  }\r\n\r\n  /**\r\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\r\n   */\r\n  get stem() {\r\n    return typeof this.path === 'string'\r\n      ? path.basename(this.path, this.extname)\r\n      : undefined\r\n  }\r\n\r\n  /**\r\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\r\n   *\r\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\r\n   * on windows).\r\n   * Cannot be nullified (use `file.path = file.dirname` instead).\r\n   */\r\n  set stem(stem) {\r\n    assertNonEmpty(stem, 'stem')\r\n    assertPart(stem, 'stem')\r\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\r\n  }\r\n\r\n  /**\r\n   * Serialize the file.\r\n   *\r\n   * @param {BufferEncoding | null | undefined} [encoding='utf8']\r\n   *   Character encoding to understand `value` as when it’s a `Buffer`\r\n   *   (default: `'utf8'`).\r\n   * @returns {string}\r\n   *   Serialized file.\r\n   */\r\n  toString(encoding) {\r\n    return (this.value || '').toString(encoding || undefined)\r\n  }\r\n\r\n  /**\r\n   * Create a warning message associated with the file.\r\n   *\r\n   * Its `fatal` is set to `false` and `file` is set to the current file path.\r\n   * Its added to `file.messages`.\r\n   *\r\n   * @param {string | Error | VFileMessage} reason\r\n   *   Reason for message, uses the stack and message of the error if given.\r\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\r\n   *   Place in file where the message occurred.\r\n   * @param {string | null | undefined} [origin]\r\n   *   Place in code where the message originates (example:\r\n   *   `'my-package:my-rule'` or `'my-rule'`).\r\n   * @returns {VFileMessage}\r\n   *   Message.\r\n   */\r\n  message(reason, place, origin) {\r\n    const message = new VFileMessage(reason, place, origin)\r\n\r\n    if (this.path) {\r\n      message.name = this.path + ':' + message.name\r\n      message.file = this.path\r\n    }\r\n\r\n    message.fatal = false\r\n\r\n    this.messages.push(message)\r\n\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Create an info message associated with the file.\r\n   *\r\n   * Its `fatal` is set to `null` and `file` is set to the current file path.\r\n   * Its added to `file.messages`.\r\n   *\r\n   * @param {string | Error | VFileMessage} reason\r\n   *   Reason for message, uses the stack and message of the error if given.\r\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\r\n   *   Place in file where the message occurred.\r\n   * @param {string | null | undefined} [origin]\r\n   *   Place in code where the message originates (example:\r\n   *   `'my-package:my-rule'` or `'my-rule'`).\r\n   * @returns {VFileMessage}\r\n   *   Message.\r\n   */\r\n  info(reason, place, origin) {\r\n    const message = this.message(reason, place, origin)\r\n\r\n    message.fatal = null\r\n\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Create a fatal error associated with the file.\r\n   *\r\n   * Its `fatal` is set to `true` and `file` is set to the current file path.\r\n   * Its added to `file.messages`.\r\n   *\r\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\r\n   *\r\n   * @param {string | Error | VFileMessage} reason\r\n   *   Reason for message, uses the stack and message of the error if given.\r\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\r\n   *   Place in file where the message occurred.\r\n   * @param {string | null | undefined} [origin]\r\n   *   Place in code where the message originates (example:\r\n   *   `'my-package:my-rule'` or `'my-rule'`).\r\n   * @returns {never}\r\n   *   Message.\r\n   * @throws {VFileMessage}\r\n   *   Message.\r\n   */\r\n  fail(reason, place, origin) {\r\n    const message = this.message(reason, place, origin)\r\n\r\n    message.fatal = true\r\n\r\n    throw message\r\n  }\r\n}\r\n\r\n/**\r\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\r\n *\r\n * @param {string | null | undefined} part\r\n *   File path part.\r\n * @param {string} name\r\n *   Part name.\r\n * @returns {void}\r\n *   Nothing.\r\n */\r\nfunction assertPart(part, name) {\r\n  if (part && part.includes(path.sep)) {\r\n    throw new Error(\r\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Assert that `part` is not empty.\r\n *\r\n * @param {string | undefined} part\r\n *   Thing.\r\n * @param {string} name\r\n *   Part name.\r\n * @returns {asserts part is string}\r\n *   Nothing.\r\n */\r\nfunction assertNonEmpty(part, name) {\r\n  if (!part) {\r\n    throw new Error('`' + name + '` cannot be empty')\r\n  }\r\n}\r\n\r\n/**\r\n * Assert `path` exists.\r\n *\r\n * @param {string | undefined} path\r\n *   Path.\r\n * @param {string} name\r\n *   Dependency name.\r\n * @returns {asserts path is string}\r\n *   Nothing.\r\n */\r\nfunction assertPath(path, name) {\r\n  if (!path) {\r\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\r\n  }\r\n}\r\n\r\n/**\r\n * Assert `value` is a buffer.\r\n *\r\n * @param {unknown} value\r\n *   thing.\r\n * @returns {value is Buffer}\r\n *   Whether `value` is a Node.js buffer.\r\n */\r\nfunction buffer(value) {\r\n  return bufferLike(value)\r\n}\r\n","import arrayWithHoles from \"./arrayWithHoles.js\";\r\nimport iterableToArray from \"./iterableToArray.js\";\r\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\r\nimport nonIterableRest from \"./nonIterableRest.js\";\r\nexport default function _toArray(arr) {\r\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\r\n}","/**\r\n * Throw a given error.\r\n *\r\n * @param {Error|null|undefined} [error]\r\n *   Maybe error.\r\n * @returns {asserts error is null|undefined}\r\n */\r\nexport function bail(error) {\r\n  if (error) {\r\n    throw error\r\n  }\r\n}\r\n","export default function isPlainObject(value) {\r\n\tif (typeof value !== 'object' || value === null) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tconst prototype = Object.getPrototypeOf(value);\r\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\r\n}\r\n","/**\r\n * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback\r\n * @typedef {(...input: Array<any>) => any} Middleware\r\n *\r\n * @typedef {(...input: Array<any>) => void} Run\r\n *   Call all middleware.\r\n * @typedef {(fn: Middleware) => Pipeline} Use\r\n *   Add `fn` (middleware) to the list.\r\n * @typedef {{run: Run, use: Use}} Pipeline\r\n *   Middleware.\r\n */\r\n\r\n/**\r\n * Create new middleware.\r\n *\r\n * @returns {Pipeline}\r\n */\r\nexport function trough() {\r\n  /** @type {Array<Middleware>} */\r\n  const fns = []\r\n  /** @type {Pipeline} */\r\n  const pipeline = {run, use}\r\n\r\n  return pipeline\r\n\r\n  /** @type {Run} */\r\n  function run(...values) {\r\n    let middlewareIndex = -1\r\n    /** @type {Callback} */\r\n    const callback = values.pop()\r\n\r\n    if (typeof callback !== 'function') {\r\n      throw new TypeError('Expected function as last argument, not ' + callback)\r\n    }\r\n\r\n    next(null, ...values)\r\n\r\n    /**\r\n     * Run the next `fn`, or we’re done.\r\n     *\r\n     * @param {Error|null|undefined} error\r\n     * @param {Array<any>} output\r\n     */\r\n    function next(error, ...output) {\r\n      const fn = fns[++middlewareIndex]\r\n      let index = -1\r\n\r\n      if (error) {\r\n        callback(error)\r\n        return\r\n      }\r\n\r\n      // Copy non-nullish input into values.\r\n      while (++index < values.length) {\r\n        if (output[index] === null || output[index] === undefined) {\r\n          output[index] = values[index]\r\n        }\r\n      }\r\n\r\n      // Save the newly created `output` for the next call.\r\n      values = output\r\n\r\n      // Next or done.\r\n      if (fn) {\r\n        wrap(fn, next)(...output)\r\n      } else {\r\n        callback(null, ...output)\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @type {Use} */\r\n  function use(middelware) {\r\n    if (typeof middelware !== 'function') {\r\n      throw new TypeError(\r\n        'Expected `middelware` to be a function, not ' + middelware\r\n      )\r\n    }\r\n\r\n    fns.push(middelware)\r\n    return pipeline\r\n  }\r\n}\r\n\r\n/**\r\n * Wrap `middleware`.\r\n * Can be sync or async; return a promise, receive a callback, or return new\r\n * values and errors.\r\n *\r\n * @param {Middleware} middleware\r\n * @param {Callback} callback\r\n */\r\nexport function wrap(middleware, callback) {\r\n  /** @type {boolean} */\r\n  let called\r\n\r\n  return wrapped\r\n\r\n  /**\r\n   * Call `middleware`.\r\n   * @this {any}\r\n   * @param {Array<any>} parameters\r\n   * @returns {void}\r\n   */\r\n  function wrapped(...parameters) {\r\n    const fnExpectsCallback = middleware.length > parameters.length\r\n    /** @type {any} */\r\n    let result\r\n\r\n    if (fnExpectsCallback) {\r\n      parameters.push(done)\r\n    }\r\n\r\n    try {\r\n      result = middleware.apply(this, parameters)\r\n    } catch (error) {\r\n      const exception = /** @type {Error} */ (error)\r\n\r\n      // Well, this is quite the pickle.\r\n      // `middleware` received a callback and called it synchronously, but that\r\n      // threw an error.\r\n      // The only thing left to do is to throw the thing instead.\r\n      if (fnExpectsCallback && called) {\r\n        throw exception\r\n      }\r\n\r\n      return done(exception)\r\n    }\r\n\r\n    if (!fnExpectsCallback) {\r\n      if (result instanceof Promise) {\r\n        result.then(then, done)\r\n      } else if (result instanceof Error) {\r\n        done(result)\r\n      } else {\r\n        then(result)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Call `callback`, only once.\r\n   * @type {Callback}\r\n   */\r\n  function done(error, ...output) {\r\n    if (!called) {\r\n      called = true\r\n      callback(error, ...output)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Call `done` with one value.\r\n   *\r\n   * @param {any} [value]\r\n   */\r\n  function then(value) {\r\n    done(null, value)\r\n  }\r\n}\r\n","/**\r\n * @typedef {import('unist').Node} Node\r\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\r\n * @typedef {import('vfile').VFileValue} VFileValue\r\n * @typedef {import('..').Processor} Processor\r\n * @typedef {import('..').Plugin} Plugin\r\n * @typedef {import('..').Preset} Preset\r\n * @typedef {import('..').Pluggable} Pluggable\r\n * @typedef {import('..').PluggableList} PluggableList\r\n * @typedef {import('..').Transformer} Transformer\r\n * @typedef {import('..').Parser} Parser\r\n * @typedef {import('..').Compiler} Compiler\r\n * @typedef {import('..').RunCallback} RunCallback\r\n * @typedef {import('..').ProcessCallback} ProcessCallback\r\n *\r\n * @typedef Context\r\n * @property {Node} tree\r\n * @property {VFile} file\r\n */\r\n\r\nimport {bail} from 'bail'\r\nimport isBuffer from 'is-buffer'\r\nimport extend from 'extend'\r\nimport isPlainObj from 'is-plain-obj'\r\nimport {trough} from 'trough'\r\nimport {VFile} from 'vfile'\r\n\r\n// Expose a frozen processor.\r\nexport const unified = base().freeze()\r\n\r\nconst own = {}.hasOwnProperty\r\n\r\n// Function to create the first processor.\r\n/**\r\n * @returns {Processor}\r\n */\r\nfunction base() {\r\n  const transformers = trough()\r\n  /** @type {Processor['attachers']} */\r\n  const attachers = []\r\n  /** @type {Record<string, unknown>} */\r\n  let namespace = {}\r\n  /** @type {boolean|undefined} */\r\n  let frozen\r\n  let freezeIndex = -1\r\n\r\n  // Data management.\r\n  // @ts-expect-error: overloads are handled.\r\n  processor.data = data\r\n  processor.Parser = undefined\r\n  processor.Compiler = undefined\r\n\r\n  // Lock.\r\n  processor.freeze = freeze\r\n\r\n  // Plugins.\r\n  processor.attachers = attachers\r\n  // @ts-expect-error: overloads are handled.\r\n  processor.use = use\r\n\r\n  // API.\r\n  processor.parse = parse\r\n  processor.stringify = stringify\r\n  // @ts-expect-error: overloads are handled.\r\n  processor.run = run\r\n  processor.runSync = runSync\r\n  // @ts-expect-error: overloads are handled.\r\n  processor.process = process\r\n  processor.processSync = processSync\r\n\r\n  // Expose.\r\n  return processor\r\n\r\n  // Create a new processor based on the processor in the current scope.\r\n  /** @type {Processor} */\r\n  function processor() {\r\n    const destination = base()\r\n    let index = -1\r\n\r\n    while (++index < attachers.length) {\r\n      destination.use(...attachers[index])\r\n    }\r\n\r\n    destination.data(extend(true, {}, namespace))\r\n\r\n    return destination\r\n  }\r\n\r\n  /**\r\n   * @param {string|Record<string, unknown>} [key]\r\n   * @param {unknown} [value]\r\n   * @returns {unknown}\r\n   */\r\n  function data(key, value) {\r\n    if (typeof key === 'string') {\r\n      // Set `key`.\r\n      if (arguments.length === 2) {\r\n        assertUnfrozen('data', frozen)\r\n        namespace[key] = value\r\n        return processor\r\n      }\r\n\r\n      // Get `key`.\r\n      return (own.call(namespace, key) && namespace[key]) || null\r\n    }\r\n\r\n    // Set space.\r\n    if (key) {\r\n      assertUnfrozen('data', frozen)\r\n      namespace = key\r\n      return processor\r\n    }\r\n\r\n    // Get space.\r\n    return namespace\r\n  }\r\n\r\n  /** @type {Processor['freeze']} */\r\n  function freeze() {\r\n    if (frozen) {\r\n      return processor\r\n    }\r\n\r\n    while (++freezeIndex < attachers.length) {\r\n      const [attacher, ...options] = attachers[freezeIndex]\r\n\r\n      if (options[0] === false) {\r\n        continue\r\n      }\r\n\r\n      if (options[0] === true) {\r\n        options[0] = undefined\r\n      }\r\n\r\n      /** @type {Transformer|void} */\r\n      const transformer = attacher.call(processor, ...options)\r\n\r\n      if (typeof transformer === 'function') {\r\n        transformers.use(transformer)\r\n      }\r\n    }\r\n\r\n    frozen = true\r\n    freezeIndex = Number.POSITIVE_INFINITY\r\n\r\n    return processor\r\n  }\r\n\r\n  /**\r\n   * @param {Pluggable|null|undefined} [value]\r\n   * @param {...unknown} options\r\n   * @returns {Processor}\r\n   */\r\n  function use(value, ...options) {\r\n    /** @type {Record<string, unknown>|undefined} */\r\n    let settings\r\n\r\n    assertUnfrozen('use', frozen)\r\n\r\n    if (value === null || value === undefined) {\r\n      // Empty.\r\n    } else if (typeof value === 'function') {\r\n      addPlugin(value, ...options)\r\n    } else if (typeof value === 'object') {\r\n      if (Array.isArray(value)) {\r\n        addList(value)\r\n      } else {\r\n        addPreset(value)\r\n      }\r\n    } else {\r\n      throw new TypeError('Expected usable value, not `' + value + '`')\r\n    }\r\n\r\n    if (settings) {\r\n      namespace.settings = Object.assign(namespace.settings || {}, settings)\r\n    }\r\n\r\n    return processor\r\n\r\n    /**\r\n     * @param {import('..').Pluggable<unknown[]>} value\r\n     * @returns {void}\r\n     */\r\n    function add(value) {\r\n      if (typeof value === 'function') {\r\n        addPlugin(value)\r\n      } else if (typeof value === 'object') {\r\n        if (Array.isArray(value)) {\r\n          const [plugin, ...options] = value\r\n          addPlugin(plugin, ...options)\r\n        } else {\r\n          addPreset(value)\r\n        }\r\n      } else {\r\n        throw new TypeError('Expected usable value, not `' + value + '`')\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {Preset} result\r\n     * @returns {void}\r\n     */\r\n    function addPreset(result) {\r\n      addList(result.plugins)\r\n\r\n      if (result.settings) {\r\n        settings = Object.assign(settings || {}, result.settings)\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {PluggableList|null|undefined} [plugins]\r\n     * @returns {void}\r\n     */\r\n    function addList(plugins) {\r\n      let index = -1\r\n\r\n      if (plugins === null || plugins === undefined) {\r\n        // Empty.\r\n      } else if (Array.isArray(plugins)) {\r\n        while (++index < plugins.length) {\r\n          const thing = plugins[index]\r\n          add(thing)\r\n        }\r\n      } else {\r\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {Plugin} plugin\r\n     * @param {...unknown} [value]\r\n     * @returns {void}\r\n     */\r\n    function addPlugin(plugin, value) {\r\n      let index = -1\r\n      /** @type {Processor['attachers'][number]|undefined} */\r\n      let entry\r\n\r\n      while (++index < attachers.length) {\r\n        if (attachers[index][0] === plugin) {\r\n          entry = attachers[index]\r\n          break\r\n        }\r\n      }\r\n\r\n      if (entry) {\r\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\r\n          value = extend(true, entry[1], value)\r\n        }\r\n\r\n        entry[1] = value\r\n      } else {\r\n        // @ts-expect-error: fine.\r\n        attachers.push([...arguments])\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @type {Processor['parse']} */\r\n  function parse(doc) {\r\n    processor.freeze()\r\n    const file = vfile(doc)\r\n    const Parser = processor.Parser\r\n    assertParser('parse', Parser)\r\n\r\n    if (newable(Parser, 'parse')) {\r\n      // @ts-expect-error: `newable` checks this.\r\n      return new Parser(String(file), file).parse()\r\n    }\r\n\r\n    // @ts-expect-error: `newable` checks this.\r\n    return Parser(String(file), file) // eslint-disable-line new-cap\r\n  }\r\n\r\n  /** @type {Processor['stringify']} */\r\n  function stringify(node, doc) {\r\n    processor.freeze()\r\n    const file = vfile(doc)\r\n    const Compiler = processor.Compiler\r\n    assertCompiler('stringify', Compiler)\r\n    assertNode(node)\r\n\r\n    if (newable(Compiler, 'compile')) {\r\n      // @ts-expect-error: `newable` checks this.\r\n      return new Compiler(node, file).compile()\r\n    }\r\n\r\n    // @ts-expect-error: `newable` checks this.\r\n    return Compiler(node, file) // eslint-disable-line new-cap\r\n  }\r\n\r\n  /**\r\n   * @param {Node} node\r\n   * @param {VFileCompatible|RunCallback} [doc]\r\n   * @param {RunCallback} [callback]\r\n   * @returns {Promise<Node>|void}\r\n   */\r\n  function run(node, doc, callback) {\r\n    assertNode(node)\r\n    processor.freeze()\r\n\r\n    if (!callback && typeof doc === 'function') {\r\n      callback = doc\r\n      doc = undefined\r\n    }\r\n\r\n    if (!callback) {\r\n      return new Promise(executor)\r\n    }\r\n\r\n    executor(null, callback)\r\n\r\n    /**\r\n     * @param {null|((node: Node) => void)} resolve\r\n     * @param {(error: Error) => void} reject\r\n     * @returns {void}\r\n     */\r\n    function executor(resolve, reject) {\r\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\r\n      transformers.run(node, vfile(doc), done)\r\n\r\n      /**\r\n       * @param {Error|null} error\r\n       * @param {Node} tree\r\n       * @param {VFile} file\r\n       * @returns {void}\r\n       */\r\n      function done(error, tree, file) {\r\n        tree = tree || node\r\n        if (error) {\r\n          reject(error)\r\n        } else if (resolve) {\r\n          resolve(tree)\r\n        } else {\r\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\r\n          callback(null, tree, file)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @type {Processor['runSync']} */\r\n  function runSync(node, file) {\r\n    /** @type {Node|undefined} */\r\n    let result\r\n    /** @type {boolean|undefined} */\r\n    let complete\r\n\r\n    processor.run(node, file, done)\r\n\r\n    assertDone('runSync', 'run', complete)\r\n\r\n    // @ts-expect-error: we either bailed on an error or have a tree.\r\n    return result\r\n\r\n    /**\r\n     * @param {Error|null} [error]\r\n     * @param {Node} [tree]\r\n     * @returns {void}\r\n     */\r\n    function done(error, tree) {\r\n      bail(error)\r\n      result = tree\r\n      complete = true\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {VFileCompatible} doc\r\n   * @param {ProcessCallback} [callback]\r\n   * @returns {Promise<VFile>|undefined}\r\n   */\r\n  function process(doc, callback) {\r\n    processor.freeze()\r\n    assertParser('process', processor.Parser)\r\n    assertCompiler('process', processor.Compiler)\r\n\r\n    if (!callback) {\r\n      return new Promise(executor)\r\n    }\r\n\r\n    executor(null, callback)\r\n\r\n    /**\r\n     * @param {null|((file: VFile) => void)} resolve\r\n     * @param {(error?: Error|null|undefined) => void} reject\r\n     * @returns {void}\r\n     */\r\n    function executor(resolve, reject) {\r\n      const file = vfile(doc)\r\n\r\n      processor.run(processor.parse(file), file, (error, tree, file) => {\r\n        if (error || !tree || !file) {\r\n          done(error)\r\n        } else {\r\n          /** @type {unknown} */\r\n          const result = processor.stringify(tree, file)\r\n\r\n          if (result === undefined || result === null) {\r\n            // Empty.\r\n          } else if (looksLikeAVFileValue(result)) {\r\n            file.value = result\r\n          } else {\r\n            file.result = result\r\n          }\r\n\r\n          done(error, file)\r\n        }\r\n      })\r\n\r\n      /**\r\n       * @param {Error|null|undefined} [error]\r\n       * @param {VFile|undefined} [file]\r\n       * @returns {void}\r\n       */\r\n      function done(error, file) {\r\n        if (error || !file) {\r\n          reject(error)\r\n        } else if (resolve) {\r\n          resolve(file)\r\n        } else {\r\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\r\n          callback(null, file)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @type {Processor['processSync']} */\r\n  function processSync(doc) {\r\n    /** @type {boolean|undefined} */\r\n    let complete\r\n\r\n    processor.freeze()\r\n    assertParser('processSync', processor.Parser)\r\n    assertCompiler('processSync', processor.Compiler)\r\n\r\n    const file = vfile(doc)\r\n\r\n    processor.process(file, done)\r\n\r\n    assertDone('processSync', 'process', complete)\r\n\r\n    return file\r\n\r\n    /**\r\n     * @param {Error|null|undefined} [error]\r\n     * @returns {void}\r\n     */\r\n    function done(error) {\r\n      complete = true\r\n      bail(error)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Check if `value` is a constructor.\r\n *\r\n * @param {unknown} value\r\n * @param {string} name\r\n * @returns {boolean}\r\n */\r\nfunction newable(value, name) {\r\n  return (\r\n    typeof value === 'function' &&\r\n    // Prototypes do exist.\r\n    // type-coverage:ignore-next-line\r\n    value.prototype &&\r\n    // A function with keys in its prototype is probably a constructor.\r\n    // Classes’ prototype methods are not enumerable, so we check if some value\r\n    // exists in the prototype.\r\n    // type-coverage:ignore-next-line\r\n    (keys(value.prototype) || name in value.prototype)\r\n  )\r\n}\r\n\r\n/**\r\n * Check if `value` is an object with keys.\r\n *\r\n * @param {Record<string, unknown>} value\r\n * @returns {boolean}\r\n */\r\nfunction keys(value) {\r\n  /** @type {string} */\r\n  let key\r\n\r\n  for (key in value) {\r\n    if (own.call(value, key)) {\r\n      return true\r\n    }\r\n  }\r\n\r\n  return false\r\n}\r\n\r\n/**\r\n * Assert a parser is available.\r\n *\r\n * @param {string} name\r\n * @param {unknown} value\r\n * @returns {asserts value is Parser}\r\n */\r\nfunction assertParser(name, value) {\r\n  if (typeof value !== 'function') {\r\n    throw new TypeError('Cannot `' + name + '` without `Parser`')\r\n  }\r\n}\r\n\r\n/**\r\n * Assert a compiler is available.\r\n *\r\n * @param {string} name\r\n * @param {unknown} value\r\n * @returns {asserts value is Compiler}\r\n */\r\nfunction assertCompiler(name, value) {\r\n  if (typeof value !== 'function') {\r\n    throw new TypeError('Cannot `' + name + '` without `Compiler`')\r\n  }\r\n}\r\n\r\n/**\r\n * Assert the processor is not frozen.\r\n *\r\n * @param {string} name\r\n * @param {unknown} frozen\r\n * @returns {asserts frozen is false}\r\n */\r\nfunction assertUnfrozen(name, frozen) {\r\n  if (frozen) {\r\n    throw new Error(\r\n      'Cannot call `' +\r\n        name +\r\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Assert `node` is a unist node.\r\n *\r\n * @param {unknown} node\r\n * @returns {asserts node is Node}\r\n */\r\nfunction assertNode(node) {\r\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\r\n  // type-coverage:ignore-next-line\r\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\r\n    throw new TypeError('Expected node, got `' + node + '`')\r\n    // Fine.\r\n  }\r\n}\r\n\r\n/**\r\n * Assert that `complete` is `true`.\r\n *\r\n * @param {string} name\r\n * @param {string} asyncName\r\n * @param {unknown} complete\r\n * @returns {asserts complete is true}\r\n */\r\nfunction assertDone(name, asyncName, complete) {\r\n  if (!complete) {\r\n    throw new Error(\r\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * @param {VFileCompatible} [value]\r\n * @returns {VFile}\r\n */\r\nfunction vfile(value) {\r\n  return looksLikeAVFile(value) ? value : new VFile(value)\r\n}\r\n\r\n/**\r\n * @param {VFileCompatible} [value]\r\n * @returns {value is VFile}\r\n */\r\nfunction looksLikeAVFile(value) {\r\n  return Boolean(\r\n    value &&\r\n      typeof value === 'object' &&\r\n      'message' in value &&\r\n      'messages' in value\r\n  )\r\n}\r\n\r\n/**\r\n * @param {unknown} [value]\r\n * @returns {value is VFileValue}\r\n */\r\nfunction looksLikeAVFileValue(value) {\r\n  return typeof value === 'string' || isBuffer(value)\r\n}\r\n","/**\r\n * @typedef {import('mdast').Root|import('mdast').Content} Node\r\n *\r\n * @typedef Options\r\n *   Configuration (optional).\r\n * @property {boolean | null | undefined} [includeImageAlt=true]\r\n *   Whether to use `alt` for `image`s.\r\n * @property {boolean | null | undefined} [includeHtml=true]\r\n *   Whether to use `value` of HTML.\r\n */\r\n\r\n/** @type {Options} */\r\nconst emptyOptions = {}\r\n\r\n/**\r\n * Get the text content of a node or list of nodes.\r\n *\r\n * Prefers the node’s plain-text fields, otherwise serializes its children,\r\n * and if the given value is an array, serialize the nodes in it.\r\n *\r\n * @param {unknown} value\r\n *   Thing to serialize, typically `Node`.\r\n * @param {Options | null | undefined} [options]\r\n *   Configuration (optional).\r\n * @returns {string}\r\n *   Serialized `value`.\r\n */\r\nexport function toString(value, options) {\r\n  const settings = options || emptyOptions\r\n  const includeImageAlt =\r\n    typeof settings.includeImageAlt === 'boolean'\r\n      ? settings.includeImageAlt\r\n      : true\r\n  const includeHtml =\r\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\r\n\r\n  return one(value, includeImageAlt, includeHtml)\r\n}\r\n\r\n/**\r\n * One node or several nodes.\r\n *\r\n * @param {unknown} value\r\n *   Thing to serialize.\r\n * @param {boolean} includeImageAlt\r\n *   Include image `alt`s.\r\n * @param {boolean} includeHtml\r\n *   Include HTML.\r\n * @returns {string}\r\n *   Serialized node.\r\n */\r\nfunction one(value, includeImageAlt, includeHtml) {\r\n  if (node(value)) {\r\n    if ('value' in value) {\r\n      return value.type === 'html' && !includeHtml ? '' : value.value\r\n    }\r\n\r\n    if (includeImageAlt && 'alt' in value && value.alt) {\r\n      return value.alt\r\n    }\r\n\r\n    if ('children' in value) {\r\n      return all(value.children, includeImageAlt, includeHtml)\r\n    }\r\n  }\r\n\r\n  if (Array.isArray(value)) {\r\n    return all(value, includeImageAlt, includeHtml)\r\n  }\r\n\r\n  return ''\r\n}\r\n\r\n/**\r\n * Serialize a list of nodes.\r\n *\r\n * @param {Array<unknown>} values\r\n *   Thing to serialize.\r\n * @param {boolean} includeImageAlt\r\n *   Include image `alt`s.\r\n * @param {boolean} includeHtml\r\n *   Include HTML.\r\n * @returns {string}\r\n *   Serialized nodes.\r\n */\r\nfunction all(values, includeImageAlt, includeHtml) {\r\n  /** @type {Array<string>} */\r\n  const result = []\r\n  let index = -1\r\n\r\n  while (++index < values.length) {\r\n    result[index] = one(values[index], includeImageAlt, includeHtml)\r\n  }\r\n\r\n  return result.join('')\r\n}\r\n\r\n/**\r\n * Check if `value` looks like a node.\r\n *\r\n * @param {unknown} value\r\n *   Thing.\r\n * @returns {value is Node}\r\n *   Whether `value` is a node.\r\n */\r\nfunction node(value) {\r\n  return Boolean(value && typeof value === 'object')\r\n}\r\n","/**\r\n * Like `Array#splice`, but smarter for giant arrays.\r\n *\r\n * `Array#splice` takes all items to be inserted as individual argument which\r\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\r\n *\r\n * Otherwise, this does not return the removed items, and takes `items` as an\r\n * array instead of rest parameters.\r\n *\r\n * @template {unknown} T\r\n *   Item type.\r\n * @param {Array<T>} list\r\n *   List to operate on.\r\n * @param {number} start\r\n *   Index to remove/insert at (can be negative).\r\n * @param {number} remove\r\n *   Number of items to remove.\r\n * @param {Array<T>} items\r\n *   Items to inject into `list`.\r\n * @returns {void}\r\n *   Nothing.\r\n */\r\nexport function splice(list, start, remove, items) {\r\n  const end = list.length\r\n  let chunkStart = 0\r\n  /** @type {Array<unknown>} */\r\n  let parameters\r\n\r\n  // Make start between zero and `end` (included).\r\n  if (start < 0) {\r\n    start = -start > end ? 0 : end + start\r\n  } else {\r\n    start = start > end ? end : start\r\n  }\r\n  remove = remove > 0 ? remove : 0\r\n\r\n  // No need to chunk the items if there’s only a couple (10k) items.\r\n  if (items.length < 10000) {\r\n    parameters = Array.from(items)\r\n    parameters.unshift(start, remove)\r\n    // @ts-expect-error Hush, it’s fine.\r\n    list.splice(...parameters)\r\n  } else {\r\n    // Delete `remove` items starting from `start`\r\n    if (remove) list.splice(start, remove)\r\n\r\n    // Insert the items in chunks to not cause stack overflows.\r\n    while (chunkStart < items.length) {\r\n      parameters = items.slice(chunkStart, chunkStart + 10000)\r\n      parameters.unshift(start, 0)\r\n      // @ts-expect-error Hush, it’s fine.\r\n      list.splice(...parameters)\r\n      chunkStart += 10000\r\n      start += 10000\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Append `items` (an array) at the end of `list` (another array).\r\n * When `list` was empty, returns `items` instead.\r\n *\r\n * This prevents a potentially expensive operation when `list` is empty,\r\n * and adds items in batches to prevent V8 from hanging.\r\n *\r\n * @template {unknown} T\r\n *   Item type.\r\n * @param {Array<T>} list\r\n *   List to operate on.\r\n * @param {Array<T>} items\r\n *   Items to add to `list`.\r\n * @returns {Array<T>}\r\n *   Either `list` or `items`.\r\n */\r\nexport function push(list, items) {\r\n  if (list.length > 0) {\r\n    splice(list, list.length, 0, items)\r\n    return list\r\n  }\r\n  return items\r\n}\r\n","/**\r\n * @typedef {import('micromark-util-types').Extension} Extension\r\n * @typedef {import('micromark-util-types').Handles} Handles\r\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\r\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\r\n */\r\n\r\nimport {splice} from 'micromark-util-chunked'\r\n\r\nconst hasOwnProperty = {}.hasOwnProperty\r\n\r\n/**\r\n * Combine multiple syntax extensions into one.\r\n *\r\n * @param {Array<Extension>} extensions\r\n *   List of syntax extensions.\r\n * @returns {NormalizedExtension}\r\n *   A single combined extension.\r\n */\r\nexport function combineExtensions(extensions) {\r\n  /** @type {NormalizedExtension} */\r\n  const all = {}\r\n  let index = -1\r\n\r\n  while (++index < extensions.length) {\r\n    syntaxExtension(all, extensions[index])\r\n  }\r\n\r\n  return all\r\n}\r\n\r\n/**\r\n * Merge `extension` into `all`.\r\n *\r\n * @param {NormalizedExtension} all\r\n *   Extension to merge into.\r\n * @param {Extension} extension\r\n *   Extension to merge.\r\n * @returns {void}\r\n */\r\nfunction syntaxExtension(all, extension) {\r\n  /** @type {keyof Extension} */\r\n  let hook\r\n\r\n  for (hook in extension) {\r\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\r\n    /** @type {Record<string, unknown>} */\r\n    const left = maybe || (all[hook] = {})\r\n    /** @type {Record<string, unknown> | undefined} */\r\n    const right = extension[hook]\r\n    /** @type {string} */\r\n    let code\r\n\r\n    if (right) {\r\n      for (code in right) {\r\n        if (!hasOwnProperty.call(left, code)) left[code] = []\r\n        const value = right[code]\r\n        constructs(\r\n          // @ts-expect-error Looks like a list.\r\n          left[code],\r\n          Array.isArray(value) ? value : value ? [value] : []\r\n        )\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Merge `list` into `existing` (both lists of constructs).\r\n * Mutates `existing`.\r\n *\r\n * @param {Array<unknown>} existing\r\n * @param {Array<unknown>} list\r\n * @returns {void}\r\n */\r\nfunction constructs(existing, list) {\r\n  let index = -1\r\n  /** @type {Array<unknown>} */\r\n  const before = []\r\n\r\n  while (++index < list.length) {\r\n    // @ts-expect-error Looks like an object.\r\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\r\n  }\r\n\r\n  splice(existing, 0, 0, before)\r\n}\r\n\r\n/**\r\n * Combine multiple HTML extensions into one.\r\n *\r\n * @param {Array<HtmlExtension>} htmlExtensions\r\n *   List of HTML extensions.\r\n * @returns {HtmlExtension}\r\n *   A single combined HTML extension.\r\n */\r\nexport function combineHtmlExtensions(htmlExtensions) {\r\n  /** @type {HtmlExtension} */\r\n  const handlers = {}\r\n  let index = -1\r\n\r\n  while (++index < htmlExtensions.length) {\r\n    htmlExtension(handlers, htmlExtensions[index])\r\n  }\r\n\r\n  return handlers\r\n}\r\n\r\n/**\r\n * Merge `extension` into `all`.\r\n *\r\n * @param {HtmlExtension} all\r\n *   Extension to merge into.\r\n * @param {HtmlExtension} extension\r\n *   Extension to merge.\r\n * @returns {void}\r\n */\r\nfunction htmlExtension(all, extension) {\r\n  /** @type {keyof HtmlExtension} */\r\n  let hook\r\n\r\n  for (hook in extension) {\r\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\r\n    const left = maybe || (all[hook] = {})\r\n    const right = extension[hook]\r\n    /** @type {keyof Handles} */\r\n    let type\r\n\r\n    if (right) {\r\n      for (type in right) {\r\n        // @ts-expect-error assume document vs regular handler are managed correctly.\r\n        left[type] = right[type]\r\n      }\r\n    }\r\n  }\r\n}\r\n","// This module is generated by `script/`.\r\n//\r\n// CommonMark handles attention (emphasis, strong) markers based on what comes\r\n// before or after them.\r\n// One such difference is if those characters are Unicode punctuation.\r\n// This script is generated from the Unicode data.\r\n\r\n/**\r\n * Regular expression that matches a unicode punctuation character.\r\n */\r\nexport const unicodePunctuationRegex =\r\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\r\n","/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n */\r\n\r\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\r\n\r\n/**\r\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\r\n * case insensitive).\r\n *\r\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\r\n *\r\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\r\n * to U+005A (`Z`).\r\n *\r\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\r\n * to U+007A (`z`).\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns\r\n *   Whether it matches.\r\n */\r\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\r\n\r\n/**\r\n * Check whether the character code represents an ASCII alphanumeric (`a`\r\n * through `z`, case insensitive, or `0` through `9`).\r\n *\r\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\r\n * (see `asciiAlpha`).\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns\r\n *   Whether it matches.\r\n */\r\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\r\n\r\n/**\r\n * Check whether the character code represents an ASCII atext.\r\n *\r\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\r\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\r\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\r\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\r\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\r\n * (`{`) to U+007E TILDE (`~`).\r\n *\r\n * See:\r\n * **\\[RFC5322]**:\r\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\r\n * P. Resnick.\r\n * IETF.\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns\r\n *   Whether it matches.\r\n */\r\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\r\n\r\n/**\r\n * Check whether a character code is an ASCII control character.\r\n *\r\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\r\n * to U+001F (US), or U+007F (DEL).\r\n *\r\n * @param {Code} code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport function asciiControl(code) {\r\n  return (\r\n    // Special whitespace codes (which have negative values), C0 and Control\r\n    // character DEL\r\n    code !== null && (code < 32 || code === 127)\r\n  )\r\n}\r\n\r\n/**\r\n * Check whether the character code represents an ASCII digit (`0` through `9`).\r\n *\r\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\r\n * U+0039 (`9`).\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns\r\n *   Whether it matches.\r\n */\r\nexport const asciiDigit = regexCheck(/\\d/)\r\n\r\n/**\r\n * Check whether the character code represents an ASCII hex digit (`a` through\r\n * `f`, case insensitive, or `0` through `9`).\r\n *\r\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\r\n * digit, or an ASCII lower hex digit.\r\n *\r\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\r\n * (`A`) to U+0046 (`F`).\r\n *\r\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\r\n * (`a`) to U+0066 (`f`).\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns\r\n *   Whether it matches.\r\n */\r\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\r\n\r\n/**\r\n * Check whether the character code represents ASCII punctuation.\r\n *\r\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\r\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\r\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\r\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns\r\n *   Whether it matches.\r\n */\r\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\r\n\r\n/**\r\n * Check whether a character code is a markdown line ending.\r\n *\r\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\r\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\r\n *\r\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\r\n * RETURN (CR) are replaced by these virtual characters depending on whether\r\n * they occurred together.\r\n *\r\n * @param {Code} code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport function markdownLineEnding(code) {\r\n  return code !== null && code < -2\r\n}\r\n\r\n/**\r\n * Check whether a character code is a markdown line ending (see\r\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\r\n *\r\n * @param {Code} code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport function markdownLineEndingOrSpace(code) {\r\n  return code !== null && (code < 0 || code === 32)\r\n}\r\n\r\n/**\r\n * Check whether a character code is a markdown space.\r\n *\r\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\r\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\r\n *\r\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\r\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\r\n * SPACE (VS) characters, depending on the column at which the tab occurred.\r\n *\r\n * @param {Code} code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport function markdownSpace(code) {\r\n  return code === -2 || code === -1 || code === 32\r\n}\r\n\r\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\r\n// In fact adds to the bundle size.\r\n/**\r\n * Check whether the character code represents Unicode punctuation.\r\n *\r\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\r\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\r\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\r\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\r\n * punctuation (see `asciiPunctuation`).\r\n *\r\n * See:\r\n * **\\[UNICODE]**:\r\n * [The Unicode Standard](https://www.unicode.org/versions/).\r\n * Unicode Consortium.\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns\r\n *   Whether it matches.\r\n */\r\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\r\n\r\n/**\r\n * Check whether the character code represents Unicode whitespace.\r\n *\r\n * Note that this does handle micromark specific markdown whitespace characters.\r\n * See `markdownLineEndingOrSpace` to check that.\r\n *\r\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\r\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\r\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\r\n *\r\n * See:\r\n * **\\[UNICODE]**:\r\n * [The Unicode Standard](https://www.unicode.org/versions/).\r\n * Unicode Consortium.\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns\r\n *   Whether it matches.\r\n */\r\nexport const unicodeWhitespace = regexCheck(/\\s/)\r\n\r\n/**\r\n * Create a code check from a regex.\r\n *\r\n * @param {RegExp} regex\r\n * @returns {(code: Code) => boolean}\r\n */\r\nfunction regexCheck(regex) {\r\n  return check\r\n\r\n  /**\r\n   * Check whether a code matches the bound regex.\r\n   *\r\n   * @param {Code} code\r\n   *   Character code.\r\n   * @returns {boolean}\r\n   *   Whether the character code matches the bound regex.\r\n   */\r\n  function check(code) {\r\n    return code !== null && regex.test(String.fromCharCode(code))\r\n  }\r\n}\r\n","/**\r\n * @typedef {import('micromark-util-types').Effects} Effects\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenType} TokenType\r\n */\r\n\r\nimport {markdownSpace} from 'micromark-util-character'\r\n\r\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\r\n\r\n/**\r\n * Parse spaces and tabs.\r\n *\r\n * There is no `nok` parameter:\r\n *\r\n * *   spaces in markdown are often optional, in which case this factory can be\r\n *     used and `ok` will be switched to whether spaces were found or not\r\n * *   one line ending or space can be detected with `markdownSpace(code)` right\r\n *     before using `factorySpace`\r\n *\r\n * ###### Examples\r\n *\r\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\r\n * single space.\r\n *\r\n * ```markdown\r\n * ␉\r\n * ␠␠␠␠\r\n * ␉␠\r\n * ```\r\n *\r\n * @param {Effects} effects\r\n *   Context.\r\n * @param {State} ok\r\n *   State switched to when successful.\r\n * @param {TokenType} type\r\n *   Type (`' \\t'`).\r\n * @param {number | undefined} [max=Infinity]\r\n *   Max (exclusive).\r\n * @returns\r\n *   Start state.\r\n */\r\nexport function factorySpace(effects, ok, type, max) {\r\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\r\n  let size = 0\r\n  return start\r\n\r\n  /** @type {State} */\r\n  function start(code) {\r\n    if (markdownSpace(code)) {\r\n      effects.enter(type)\r\n      return prefix(code)\r\n    }\r\n    return ok(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function prefix(code) {\r\n    if (markdownSpace(code) && size++ < limit) {\r\n      effects.consume(code)\r\n      return prefix\r\n    }\r\n    effects.exit(type)\r\n    return ok(code)\r\n  }\r\n}\r\n","/**\r\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\r\n * @typedef {import('micromark-util-types').Initializer} Initializer\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').Token} Token\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding} from 'micromark-util-character'\r\n/** @type {InitialConstruct} */\r\nexport const content = {\r\n  tokenize: initializeContent\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Initializer}\r\n */\r\nfunction initializeContent(effects) {\r\n  const contentStart = effects.attempt(\r\n    this.parser.constructs.contentInitial,\r\n    afterContentStartConstruct,\r\n    paragraphInitial\r\n  )\r\n  /** @type {Token} */\r\n  let previous\r\n  return contentStart\r\n\r\n  /** @type {State} */\r\n  function afterContentStartConstruct(code) {\r\n    if (code === null) {\r\n      effects.consume(code)\r\n      return\r\n    }\r\n    effects.enter('lineEnding')\r\n    effects.consume(code)\r\n    effects.exit('lineEnding')\r\n    return factorySpace(effects, contentStart, 'linePrefix')\r\n  }\r\n\r\n  /** @type {State} */\r\n  function paragraphInitial(code) {\r\n    effects.enter('paragraph')\r\n    return lineStart(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function lineStart(code) {\r\n    const token = effects.enter('chunkText', {\r\n      contentType: 'text',\r\n      previous\r\n    })\r\n    if (previous) {\r\n      previous.next = token\r\n    }\r\n    previous = token\r\n    return data(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function data(code) {\r\n    if (code === null) {\r\n      effects.exit('chunkText')\r\n      effects.exit('paragraph')\r\n      effects.consume(code)\r\n      return\r\n    }\r\n    if (markdownLineEnding(code)) {\r\n      effects.consume(code)\r\n      effects.exit('chunkText')\r\n      return lineStart\r\n    }\r\n\r\n    // Data.\r\n    effects.consume(code)\r\n    return data\r\n  }\r\n}\r\n","/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\r\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\r\n * @typedef {import('micromark-util-types').Initializer} Initializer\r\n * @typedef {import('micromark-util-types').Point} Point\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').Token} Token\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\n/**\r\n * @typedef {[Construct, ContainerState]} StackItem\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding} from 'micromark-util-character'\r\nimport {splice} from 'micromark-util-chunked'\r\n/** @type {InitialConstruct} */\r\nexport const document = {\r\n  tokenize: initializeDocument\r\n}\r\n\r\n/** @type {Construct} */\r\nconst containerConstruct = {\r\n  tokenize: tokenizeContainer\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Initializer}\r\n */\r\nfunction initializeDocument(effects) {\r\n  const self = this\r\n  /** @type {Array<StackItem>} */\r\n  const stack = []\r\n  let continued = 0\r\n  /** @type {TokenizeContext | undefined} */\r\n  let childFlow\r\n  /** @type {Token | undefined} */\r\n  let childToken\r\n  /** @type {number} */\r\n  let lineStartOffset\r\n  return start\r\n\r\n  /** @type {State} */\r\n  function start(code) {\r\n    // First we iterate through the open blocks, starting with the root\r\n    // document, and descending through last children down to the last open\r\n    // block.\r\n    // Each block imposes a condition that the line must satisfy if the block is\r\n    // to remain open.\r\n    // For example, a block quote requires a `>` character.\r\n    // A paragraph requires a non-blank line.\r\n    // In this phase we may match all or just some of the open blocks.\r\n    // But we cannot close unmatched blocks yet, because we may have a lazy\r\n    // continuation line.\r\n    if (continued < stack.length) {\r\n      const item = stack[continued]\r\n      self.containerState = item[1]\r\n      return effects.attempt(\r\n        item[0].continuation,\r\n        documentContinue,\r\n        checkNewContainers\r\n      )(code)\r\n    }\r\n\r\n    // Done.\r\n    return checkNewContainers(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function documentContinue(code) {\r\n    continued++\r\n\r\n    // Note: this field is called `_closeFlow` but it also closes containers.\r\n    // Perhaps a good idea to rename it but it’s already used in the wild by\r\n    // extensions.\r\n    if (self.containerState._closeFlow) {\r\n      self.containerState._closeFlow = undefined\r\n      if (childFlow) {\r\n        closeFlow()\r\n      }\r\n\r\n      // Note: this algorithm for moving events around is similar to the\r\n      // algorithm when dealing with lazy lines in `writeToChild`.\r\n      const indexBeforeExits = self.events.length\r\n      let indexBeforeFlow = indexBeforeExits\r\n      /** @type {Point | undefined} */\r\n      let point\r\n\r\n      // Find the flow chunk.\r\n      while (indexBeforeFlow--) {\r\n        if (\r\n          self.events[indexBeforeFlow][0] === 'exit' &&\r\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\r\n        ) {\r\n          point = self.events[indexBeforeFlow][1].end\r\n          break\r\n        }\r\n      }\r\n      exitContainers(continued)\r\n\r\n      // Fix positions.\r\n      let index = indexBeforeExits\r\n      while (index < self.events.length) {\r\n        self.events[index][1].end = Object.assign({}, point)\r\n        index++\r\n      }\r\n\r\n      // Inject the exits earlier (they’re still also at the end).\r\n      splice(\r\n        self.events,\r\n        indexBeforeFlow + 1,\r\n        0,\r\n        self.events.slice(indexBeforeExits)\r\n      )\r\n\r\n      // Discard the duplicate exits.\r\n      self.events.length = index\r\n      return checkNewContainers(code)\r\n    }\r\n    return start(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function checkNewContainers(code) {\r\n    // Next, after consuming the continuation markers for existing blocks, we\r\n    // look for new block starts (e.g. `>` for a block quote).\r\n    // If we encounter a new block start, we close any blocks unmatched in\r\n    // step 1 before creating the new block as a child of the last matched\r\n    // block.\r\n    if (continued === stack.length) {\r\n      // No need to `check` whether there’s a container, of `exitContainers`\r\n      // would be moot.\r\n      // We can instead immediately `attempt` to parse one.\r\n      if (!childFlow) {\r\n        return documentContinued(code)\r\n      }\r\n\r\n      // If we have concrete content, such as block HTML or fenced code,\r\n      // we can’t have containers “pierce” into them, so we can immediately\r\n      // start.\r\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\r\n        return flowStart(code)\r\n      }\r\n\r\n      // If we do have flow, it could still be a blank line,\r\n      // but we’d be interrupting it w/ a new container if there’s a current\r\n      // construct.\r\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\r\n      // needed in micromark-extension-gfm-table@1.0.6).\r\n      self.interrupt = Boolean(\r\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\r\n      )\r\n    }\r\n\r\n    // Check if there is a new container.\r\n    self.containerState = {}\r\n    return effects.check(\r\n      containerConstruct,\r\n      thereIsANewContainer,\r\n      thereIsNoNewContainer\r\n    )(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function thereIsANewContainer(code) {\r\n    if (childFlow) closeFlow()\r\n    exitContainers(continued)\r\n    return documentContinued(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function thereIsNoNewContainer(code) {\r\n    self.parser.lazy[self.now().line] = continued !== stack.length\r\n    lineStartOffset = self.now().offset\r\n    return flowStart(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function documentContinued(code) {\r\n    // Try new containers.\r\n    self.containerState = {}\r\n    return effects.attempt(\r\n      containerConstruct,\r\n      containerContinue,\r\n      flowStart\r\n    )(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function containerContinue(code) {\r\n    continued++\r\n    stack.push([self.currentConstruct, self.containerState])\r\n    // Try another.\r\n    return documentContinued(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function flowStart(code) {\r\n    if (code === null) {\r\n      if (childFlow) closeFlow()\r\n      exitContainers(0)\r\n      effects.consume(code)\r\n      return\r\n    }\r\n    childFlow = childFlow || self.parser.flow(self.now())\r\n    effects.enter('chunkFlow', {\r\n      contentType: 'flow',\r\n      previous: childToken,\r\n      _tokenizer: childFlow\r\n    })\r\n    return flowContinue(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function flowContinue(code) {\r\n    if (code === null) {\r\n      writeToChild(effects.exit('chunkFlow'), true)\r\n      exitContainers(0)\r\n      effects.consume(code)\r\n      return\r\n    }\r\n    if (markdownLineEnding(code)) {\r\n      effects.consume(code)\r\n      writeToChild(effects.exit('chunkFlow'))\r\n      // Get ready for the next line.\r\n      continued = 0\r\n      self.interrupt = undefined\r\n      return start\r\n    }\r\n    effects.consume(code)\r\n    return flowContinue\r\n  }\r\n\r\n  /**\r\n   * @param {Token} token\r\n   * @param {boolean | undefined} [eof]\r\n   * @returns {void}\r\n   */\r\n  function writeToChild(token, eof) {\r\n    const stream = self.sliceStream(token)\r\n    if (eof) stream.push(null)\r\n    token.previous = childToken\r\n    if (childToken) childToken.next = token\r\n    childToken = token\r\n    childFlow.defineSkip(token.start)\r\n    childFlow.write(stream)\r\n\r\n    // Alright, so we just added a lazy line:\r\n    //\r\n    // ```markdown\r\n    // > a\r\n    // b.\r\n    //\r\n    // Or:\r\n    //\r\n    // > ~~~c\r\n    // d\r\n    //\r\n    // Or:\r\n    //\r\n    // > | e |\r\n    // f\r\n    // ```\r\n    //\r\n    // The construct in the second example (fenced code) does not accept lazy\r\n    // lines, so it marked itself as done at the end of its first line, and\r\n    // then the content construct parses `d`.\r\n    // Most constructs in markdown match on the first line: if the first line\r\n    // forms a construct, a non-lazy line can’t “unmake” it.\r\n    //\r\n    // The construct in the third example is potentially a GFM table, and\r\n    // those are *weird*.\r\n    // It *could* be a table, from the first line, if the following line\r\n    // matches a condition.\r\n    // In this case, that second line is lazy, which “unmakes” the first line\r\n    // and turns the whole into one content block.\r\n    //\r\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\r\n    // whether the lazy line started a new flow block.\r\n    // If it did, we exit the current containers between the two flow blocks.\r\n    if (self.parser.lazy[token.start.line]) {\r\n      let index = childFlow.events.length\r\n      while (index--) {\r\n        if (\r\n          // The token starts before the line ending…\r\n          childFlow.events[index][1].start.offset < lineStartOffset &&\r\n          // …and either is not ended yet…\r\n          (!childFlow.events[index][1].end ||\r\n            // …or ends after it.\r\n            childFlow.events[index][1].end.offset > lineStartOffset)\r\n        ) {\r\n          // Exit: there’s still something open, which means it’s a lazy line\r\n          // part of something.\r\n          return\r\n        }\r\n      }\r\n\r\n      // Note: this algorithm for moving events around is similar to the\r\n      // algorithm when closing flow in `documentContinue`.\r\n      const indexBeforeExits = self.events.length\r\n      let indexBeforeFlow = indexBeforeExits\r\n      /** @type {boolean | undefined} */\r\n      let seen\r\n      /** @type {Point | undefined} */\r\n      let point\r\n\r\n      // Find the previous chunk (the one before the lazy line).\r\n      while (indexBeforeFlow--) {\r\n        if (\r\n          self.events[indexBeforeFlow][0] === 'exit' &&\r\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\r\n        ) {\r\n          if (seen) {\r\n            point = self.events[indexBeforeFlow][1].end\r\n            break\r\n          }\r\n          seen = true\r\n        }\r\n      }\r\n      exitContainers(continued)\r\n\r\n      // Fix positions.\r\n      index = indexBeforeExits\r\n      while (index < self.events.length) {\r\n        self.events[index][1].end = Object.assign({}, point)\r\n        index++\r\n      }\r\n\r\n      // Inject the exits earlier (they’re still also at the end).\r\n      splice(\r\n        self.events,\r\n        indexBeforeFlow + 1,\r\n        0,\r\n        self.events.slice(indexBeforeExits)\r\n      )\r\n\r\n      // Discard the duplicate exits.\r\n      self.events.length = index\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} size\r\n   * @returns {void}\r\n   */\r\n  function exitContainers(size) {\r\n    let index = stack.length\r\n\r\n    // Exit open containers.\r\n    while (index-- > size) {\r\n      const entry = stack[index]\r\n      self.containerState = entry[1]\r\n      entry[0].exit.call(self, effects)\r\n    }\r\n    stack.length = size\r\n  }\r\n  function closeFlow() {\r\n    childFlow.write([null])\r\n    childToken = undefined\r\n    childFlow = undefined\r\n    self.containerState._closeFlow = undefined\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeContainer(effects, ok, nok) {\r\n  // Always populated by defaults.\r\n\r\n  return factorySpace(\r\n    effects,\r\n    effects.attempt(this.parser.constructs.document, ok, nok),\r\n    'linePrefix',\r\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\r\n  )\r\n}\r\n","/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\r\n/** @type {Construct} */\r\nexport const blankLine = {\r\n  tokenize: tokenizeBlankLine,\r\n  partial: true\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeBlankLine(effects, ok, nok) {\r\n  return start\r\n\r\n  /**\r\n   * Start of blank line.\r\n   *\r\n   * > 👉 **Note**: `␠` represents a space character.\r\n   *\r\n   * ```markdown\r\n   * > | ␠␠␊\r\n   *     ^\r\n   * > | ␊\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    return markdownSpace(code)\r\n      ? factorySpace(effects, after, 'linePrefix')(code)\r\n      : after(code)\r\n  }\r\n\r\n  /**\r\n   * At eof/eol, after optional whitespace.\r\n   *\r\n   * > 👉 **Note**: `␠` represents a space character.\r\n   *\r\n   * ```markdown\r\n   * > | ␠␠␊\r\n   *       ^\r\n   * > | ␊\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\r\n  }\r\n}\r\n","/**\r\n * @typedef {import('micromark-util-types').Chunk} Chunk\r\n * @typedef {import('micromark-util-types').Event} Event\r\n * @typedef {import('micromark-util-types').Token} Token\r\n */\r\n\r\nimport {splice} from 'micromark-util-chunked'\r\n/**\r\n * Tokenize subcontent.\r\n *\r\n * @param {Array<Event>} events\r\n *   List of events.\r\n * @returns {boolean}\r\n *   Whether subtokens were found.\r\n */\r\nexport function subtokenize(events) {\r\n  /** @type {Record<string, number>} */\r\n  const jumps = {}\r\n  let index = -1\r\n  /** @type {Event} */\r\n  let event\r\n  /** @type {number | undefined} */\r\n  let lineIndex\r\n  /** @type {number} */\r\n  let otherIndex\r\n  /** @type {Event} */\r\n  let otherEvent\r\n  /** @type {Array<Event>} */\r\n  let parameters\r\n  /** @type {Array<Event>} */\r\n  let subevents\r\n  /** @type {boolean | undefined} */\r\n  let more\r\n  while (++index < events.length) {\r\n    while (index in jumps) {\r\n      index = jumps[index]\r\n    }\r\n    event = events[index]\r\n\r\n    // Add a hook for the GFM tasklist extension, which needs to know if text\r\n    // is in the first content of a list item.\r\n    if (\r\n      index &&\r\n      event[1].type === 'chunkFlow' &&\r\n      events[index - 1][1].type === 'listItemPrefix'\r\n    ) {\r\n      subevents = event[1]._tokenizer.events\r\n      otherIndex = 0\r\n      if (\r\n        otherIndex < subevents.length &&\r\n        subevents[otherIndex][1].type === 'lineEndingBlank'\r\n      ) {\r\n        otherIndex += 2\r\n      }\r\n      if (\r\n        otherIndex < subevents.length &&\r\n        subevents[otherIndex][1].type === 'content'\r\n      ) {\r\n        while (++otherIndex < subevents.length) {\r\n          if (subevents[otherIndex][1].type === 'content') {\r\n            break\r\n          }\r\n          if (subevents[otherIndex][1].type === 'chunkText') {\r\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\r\n            otherIndex++\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Enter.\r\n    if (event[0] === 'enter') {\r\n      if (event[1].contentType) {\r\n        Object.assign(jumps, subcontent(events, index))\r\n        index = jumps[index]\r\n        more = true\r\n      }\r\n    }\r\n    // Exit.\r\n    else if (event[1]._container) {\r\n      otherIndex = index\r\n      lineIndex = undefined\r\n      while (otherIndex--) {\r\n        otherEvent = events[otherIndex]\r\n        if (\r\n          otherEvent[1].type === 'lineEnding' ||\r\n          otherEvent[1].type === 'lineEndingBlank'\r\n        ) {\r\n          if (otherEvent[0] === 'enter') {\r\n            if (lineIndex) {\r\n              events[lineIndex][1].type = 'lineEndingBlank'\r\n            }\r\n            otherEvent[1].type = 'lineEnding'\r\n            lineIndex = otherIndex\r\n          }\r\n        } else {\r\n          break\r\n        }\r\n      }\r\n      if (lineIndex) {\r\n        // Fix position.\r\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\r\n\r\n        // Switch container exit w/ line endings.\r\n        parameters = events.slice(lineIndex, index)\r\n        parameters.unshift(event)\r\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\r\n      }\r\n    }\r\n  }\r\n  return !more\r\n}\r\n\r\n/**\r\n * Tokenize embedded tokens.\r\n *\r\n * @param {Array<Event>} events\r\n * @param {number} eventIndex\r\n * @returns {Record<string, number>}\r\n */\r\nfunction subcontent(events, eventIndex) {\r\n  const token = events[eventIndex][1]\r\n  const context = events[eventIndex][2]\r\n  let startPosition = eventIndex - 1\r\n  /** @type {Array<number>} */\r\n  const startPositions = []\r\n  const tokenizer =\r\n    token._tokenizer || context.parser[token.contentType](token.start)\r\n  const childEvents = tokenizer.events\r\n  /** @type {Array<[number, number]>} */\r\n  const jumps = []\r\n  /** @type {Record<string, number>} */\r\n  const gaps = {}\r\n  /** @type {Array<Chunk>} */\r\n  let stream\r\n  /** @type {Token | undefined} */\r\n  let previous\r\n  let index = -1\r\n  /** @type {Token | undefined} */\r\n  let current = token\r\n  let adjust = 0\r\n  let start = 0\r\n  const breaks = [start]\r\n\r\n  // Loop forward through the linked tokens to pass them in order to the\r\n  // subtokenizer.\r\n  while (current) {\r\n    // Find the position of the event for this token.\r\n    while (events[++startPosition][1] !== current) {\r\n      // Empty.\r\n    }\r\n    startPositions.push(startPosition)\r\n    if (!current._tokenizer) {\r\n      stream = context.sliceStream(current)\r\n      if (!current.next) {\r\n        stream.push(null)\r\n      }\r\n      if (previous) {\r\n        tokenizer.defineSkip(current.start)\r\n      }\r\n      if (current._isInFirstContentOfListItem) {\r\n        tokenizer._gfmTasklistFirstContentOfListItem = true\r\n      }\r\n      tokenizer.write(stream)\r\n      if (current._isInFirstContentOfListItem) {\r\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\r\n      }\r\n    }\r\n\r\n    // Unravel the next token.\r\n    previous = current\r\n    current = current.next\r\n  }\r\n\r\n  // Now, loop back through all events (and linked tokens), to figure out which\r\n  // parts belong where.\r\n  current = token\r\n  while (++index < childEvents.length) {\r\n    if (\r\n      // Find a void token that includes a break.\r\n      childEvents[index][0] === 'exit' &&\r\n      childEvents[index - 1][0] === 'enter' &&\r\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\r\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\r\n    ) {\r\n      start = index + 1\r\n      breaks.push(start)\r\n      // Help GC.\r\n      current._tokenizer = undefined\r\n      current.previous = undefined\r\n      current = current.next\r\n    }\r\n  }\r\n\r\n  // Help GC.\r\n  tokenizer.events = []\r\n\r\n  // If there’s one more token (which is the cases for lines that end in an\r\n  // EOF), that’s perfect: the last point we found starts it.\r\n  // If there isn’t then make sure any remaining content is added to it.\r\n  if (current) {\r\n    // Help GC.\r\n    current._tokenizer = undefined\r\n    current.previous = undefined\r\n  } else {\r\n    breaks.pop()\r\n  }\r\n\r\n  // Now splice the events from the subtokenizer into the current events,\r\n  // moving back to front so that splice indices aren’t affected.\r\n  index = breaks.length\r\n  while (index--) {\r\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\r\n    const start = startPositions.pop()\r\n    jumps.unshift([start, start + slice.length - 1])\r\n    splice(events, start, 2, slice)\r\n  }\r\n  index = -1\r\n  while (++index < jumps.length) {\r\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\r\n    adjust += jumps[index][1] - jumps[index][0] - 1\r\n  }\r\n  return gaps\r\n}\r\n","/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').Resolver} Resolver\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').Token} Token\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding} from 'micromark-util-character'\r\nimport {subtokenize} from 'micromark-util-subtokenize'\r\n/**\r\n * No name because it must not be turned off.\r\n * @type {Construct}\r\n */\r\nexport const content = {\r\n  tokenize: tokenizeContent,\r\n  resolve: resolveContent\r\n}\r\n\r\n/** @type {Construct} */\r\nconst continuationConstruct = {\r\n  tokenize: tokenizeContinuation,\r\n  partial: true\r\n}\r\n\r\n/**\r\n * Content is transparent: it’s parsed right now. That way, definitions are also\r\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\r\n *\r\n * @type {Resolver}\r\n */\r\nfunction resolveContent(events) {\r\n  subtokenize(events)\r\n  return events\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeContent(effects, ok) {\r\n  /** @type {Token | undefined} */\r\n  let previous\r\n  return chunkStart\r\n\r\n  /**\r\n   * Before a content chunk.\r\n   *\r\n   * ```markdown\r\n   * > | abc\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function chunkStart(code) {\r\n    effects.enter('content')\r\n    previous = effects.enter('chunkContent', {\r\n      contentType: 'content'\r\n    })\r\n    return chunkInside(code)\r\n  }\r\n\r\n  /**\r\n   * In a content chunk.\r\n   *\r\n   * ```markdown\r\n   * > | abc\r\n   *     ^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function chunkInside(code) {\r\n    if (code === null) {\r\n      return contentEnd(code)\r\n    }\r\n\r\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\r\n    // is stitched together resolving.\r\n    if (markdownLineEnding(code)) {\r\n      return effects.check(\r\n        continuationConstruct,\r\n        contentContinue,\r\n        contentEnd\r\n      )(code)\r\n    }\r\n\r\n    // Data.\r\n    effects.consume(code)\r\n    return chunkInside\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @type {State}\r\n   */\r\n  function contentEnd(code) {\r\n    effects.exit('chunkContent')\r\n    effects.exit('content')\r\n    return ok(code)\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @type {State}\r\n   */\r\n  function contentContinue(code) {\r\n    effects.consume(code)\r\n    effects.exit('chunkContent')\r\n    previous.next = effects.enter('chunkContent', {\r\n      contentType: 'content',\r\n      previous\r\n    })\r\n    previous = previous.next\r\n    return chunkInside\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeContinuation(effects, ok, nok) {\r\n  const self = this\r\n  return startLookahead\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @type {State}\r\n   */\r\n  function startLookahead(code) {\r\n    effects.exit('chunkContent')\r\n    effects.enter('lineEnding')\r\n    effects.consume(code)\r\n    effects.exit('lineEnding')\r\n    return factorySpace(effects, prefixed, 'linePrefix')\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @type {State}\r\n   */\r\n  function prefixed(code) {\r\n    if (code === null || markdownLineEnding(code)) {\r\n      return nok(code)\r\n    }\r\n\r\n    // Always populated by defaults.\r\n\r\n    const tail = self.events[self.events.length - 1]\r\n    if (\r\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\r\n      tail &&\r\n      tail[1].type === 'linePrefix' &&\r\n      tail[2].sliceSerialize(tail[1], true).length >= 4\r\n    ) {\r\n      return ok(code)\r\n    }\r\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\r\n  }\r\n}\r\n","/**\r\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\r\n * @typedef {import('micromark-util-types').Initializer} Initializer\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n */\r\n\r\nimport {blankLine, content} from 'micromark-core-commonmark'\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding} from 'micromark-util-character'\r\n/** @type {InitialConstruct} */\r\nexport const flow = {\r\n  tokenize: initializeFlow\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Initializer}\r\n */\r\nfunction initializeFlow(effects) {\r\n  const self = this\r\n  const initial = effects.attempt(\r\n    // Try to parse a blank line.\r\n    blankLine,\r\n    atBlankEnding,\r\n    // Try to parse initial flow (essentially, only code).\r\n    effects.attempt(\r\n      this.parser.constructs.flowInitial,\r\n      afterConstruct,\r\n      factorySpace(\r\n        effects,\r\n        effects.attempt(\r\n          this.parser.constructs.flow,\r\n          afterConstruct,\r\n          effects.attempt(content, afterConstruct)\r\n        ),\r\n        'linePrefix'\r\n      )\r\n    )\r\n  )\r\n  return initial\r\n\r\n  /** @type {State} */\r\n  function atBlankEnding(code) {\r\n    if (code === null) {\r\n      effects.consume(code)\r\n      return\r\n    }\r\n    effects.enter('lineEndingBlank')\r\n    effects.consume(code)\r\n    effects.exit('lineEndingBlank')\r\n    self.currentConstruct = undefined\r\n    return initial\r\n  }\r\n\r\n  /** @type {State} */\r\n  function afterConstruct(code) {\r\n    if (code === null) {\r\n      effects.consume(code)\r\n      return\r\n    }\r\n    effects.enter('lineEnding')\r\n    effects.consume(code)\r\n    effects.exit('lineEnding')\r\n    self.currentConstruct = undefined\r\n    return initial\r\n  }\r\n}\r\n","/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\r\n * @typedef {import('micromark-util-types').Initializer} Initializer\r\n * @typedef {import('micromark-util-types').Resolver} Resolver\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n */\r\n\r\nexport const resolver = {\r\n  resolveAll: createResolver()\r\n}\r\nexport const string = initializeFactory('string')\r\nexport const text = initializeFactory('text')\r\n\r\n/**\r\n * @param {'string' | 'text'} field\r\n * @returns {InitialConstruct}\r\n */\r\nfunction initializeFactory(field) {\r\n  return {\r\n    tokenize: initializeText,\r\n    resolveAll: createResolver(\r\n      field === 'text' ? resolveAllLineSuffixes : undefined\r\n    )\r\n  }\r\n\r\n  /**\r\n   * @this {TokenizeContext}\r\n   * @type {Initializer}\r\n   */\r\n  function initializeText(effects) {\r\n    const self = this\r\n    const constructs = this.parser.constructs[field]\r\n    const text = effects.attempt(constructs, start, notText)\r\n    return start\r\n\r\n    /** @type {State} */\r\n    function start(code) {\r\n      return atBreak(code) ? text(code) : notText(code)\r\n    }\r\n\r\n    /** @type {State} */\r\n    function notText(code) {\r\n      if (code === null) {\r\n        effects.consume(code)\r\n        return\r\n      }\r\n      effects.enter('data')\r\n      effects.consume(code)\r\n      return data\r\n    }\r\n\r\n    /** @type {State} */\r\n    function data(code) {\r\n      if (atBreak(code)) {\r\n        effects.exit('data')\r\n        return text(code)\r\n      }\r\n\r\n      // Data.\r\n      effects.consume(code)\r\n      return data\r\n    }\r\n\r\n    /**\r\n     * @param {Code} code\r\n     * @returns {boolean}\r\n     */\r\n    function atBreak(code) {\r\n      if (code === null) {\r\n        return true\r\n      }\r\n      const list = constructs[code]\r\n      let index = -1\r\n      if (list) {\r\n        // Always populated by defaults.\r\n\r\n        while (++index < list.length) {\r\n          const item = list[index]\r\n          if (!item.previous || item.previous.call(self, self.previous)) {\r\n            return true\r\n          }\r\n        }\r\n      }\r\n      return false\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Resolver | undefined} [extraResolver]\r\n * @returns {Resolver}\r\n */\r\nfunction createResolver(extraResolver) {\r\n  return resolveAllText\r\n\r\n  /** @type {Resolver} */\r\n  function resolveAllText(events, context) {\r\n    let index = -1\r\n    /** @type {number | undefined} */\r\n    let enter\r\n\r\n    // A rather boring computation (to merge adjacent `data` events) which\r\n    // improves mm performance by 29%.\r\n    while (++index <= events.length) {\r\n      if (enter === undefined) {\r\n        if (events[index] && events[index][1].type === 'data') {\r\n          enter = index\r\n          index++\r\n        }\r\n      } else if (!events[index] || events[index][1].type !== 'data') {\r\n        // Don’t do anything if there is one data token.\r\n        if (index !== enter + 2) {\r\n          events[enter][1].end = events[index - 1][1].end\r\n          events.splice(enter + 2, index - enter - 2)\r\n          index = enter + 2\r\n        }\r\n        enter = undefined\r\n      }\r\n    }\r\n    return extraResolver ? extraResolver(events, context) : events\r\n  }\r\n}\r\n\r\n/**\r\n * A rather ugly set of instructions which again looks at chunks in the input\r\n * stream.\r\n * The reason to do this here is that it is *much* faster to parse in reverse.\r\n * And that we can’t hook into `null` to split the line suffix before an EOF.\r\n * To do: figure out if we can make this into a clean utility, or even in core.\r\n * As it will be useful for GFMs literal autolink extension (and maybe even\r\n * tables?)\r\n *\r\n * @type {Resolver}\r\n */\r\nfunction resolveAllLineSuffixes(events, context) {\r\n  let eventIndex = 0 // Skip first.\r\n\r\n  while (++eventIndex <= events.length) {\r\n    if (\r\n      (eventIndex === events.length ||\r\n        events[eventIndex][1].type === 'lineEnding') &&\r\n      events[eventIndex - 1][1].type === 'data'\r\n    ) {\r\n      const data = events[eventIndex - 1][1]\r\n      const chunks = context.sliceStream(data)\r\n      let index = chunks.length\r\n      let bufferIndex = -1\r\n      let size = 0\r\n      /** @type {boolean | undefined} */\r\n      let tabs\r\n      while (index--) {\r\n        const chunk = chunks[index]\r\n        if (typeof chunk === 'string') {\r\n          bufferIndex = chunk.length\r\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\r\n            size++\r\n            bufferIndex--\r\n          }\r\n          if (bufferIndex) break\r\n          bufferIndex = -1\r\n        }\r\n        // Number\r\n        else if (chunk === -2) {\r\n          tabs = true\r\n          size++\r\n        } else if (chunk === -1) {\r\n          // Empty\r\n        } else {\r\n          // Replacement character, exit.\r\n          index++\r\n          break\r\n        }\r\n      }\r\n      if (size) {\r\n        const token = {\r\n          type:\r\n            eventIndex === events.length || tabs || size < 2\r\n              ? 'lineSuffix'\r\n              : 'hardBreakTrailing',\r\n          start: {\r\n            line: data.end.line,\r\n            column: data.end.column - size,\r\n            offset: data.end.offset - size,\r\n            _index: data.start._index + index,\r\n            _bufferIndex: index\r\n              ? bufferIndex\r\n              : data.start._bufferIndex + bufferIndex\r\n          },\r\n          end: Object.assign({}, data.end)\r\n        }\r\n        data.end = Object.assign({}, token.start)\r\n        if (data.start.offset === data.end.offset) {\r\n          Object.assign(data, token)\r\n        } else {\r\n          events.splice(\r\n            eventIndex,\r\n            0,\r\n            ['enter', token, context],\r\n            ['exit', token, context]\r\n          )\r\n          eventIndex += 2\r\n        }\r\n      }\r\n      eventIndex++\r\n    }\r\n  }\r\n  return events\r\n}\r\n","/**\r\n * @typedef {import('micromark-util-types').Event} Event\r\n * @typedef {import('micromark-util-types').Resolver} Resolver\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n */\r\n\r\n/**\r\n * Call all `resolveAll`s.\r\n *\r\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\r\n *   List of constructs, optionally with `resolveAll`s.\r\n * @param {Array<Event>} events\r\n *   List of events.\r\n * @param {TokenizeContext} context\r\n *   Context used by `tokenize`.\r\n * @returns {Array<Event>}\r\n *   Changed events.\r\n */\r\nexport function resolveAll(constructs, events, context) {\r\n  /** @type {Array<Resolver>} */\r\n  const called = []\r\n  let index = -1\r\n\r\n  while (++index < constructs.length) {\r\n    const resolve = constructs[index].resolveAll\r\n\r\n    if (resolve && !called.includes(resolve)) {\r\n      events = resolve(events, context)\r\n      called.push(resolve)\r\n    }\r\n  }\r\n\r\n  return events\r\n}\r\n","/**\r\n * @typedef {import('micromark-util-types').Chunk} Chunk\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\r\n * @typedef {import('micromark-util-types').Effects} Effects\r\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\r\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\r\n * @typedef {import('micromark-util-types').Point} Point\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').Token} Token\r\n * @typedef {import('micromark-util-types').TokenType} TokenType\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n */\r\n\r\n/**\r\n * @callback Restore\r\n * @returns {void}\r\n *\r\n * @typedef Info\r\n * @property {Restore} restore\r\n * @property {number} from\r\n *\r\n * @callback ReturnHandle\r\n *   Handle a successful run.\r\n * @param {Construct} construct\r\n * @param {Info} info\r\n * @returns {void}\r\n */\r\n\r\nimport {markdownLineEnding} from 'micromark-util-character'\r\nimport {push, splice} from 'micromark-util-chunked'\r\nimport {resolveAll} from 'micromark-util-resolve-all'\r\n/**\r\n * Create a tokenizer.\r\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\r\n * The parser is the object dealing with it all.\r\n * `initialize` works like other constructs, except that only its `tokenize`\r\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\r\n * `from` can be given to set the point before the first character, although\r\n * when further lines are indented, they must be set with `defineSkip`.\r\n *\r\n * @param {ParseContext} parser\r\n * @param {InitialConstruct} initialize\r\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\r\n * @returns {TokenizeContext}\r\n */\r\nexport function createTokenizer(parser, initialize, from) {\r\n  /** @type {Point} */\r\n  let point = Object.assign(\r\n    from\r\n      ? Object.assign({}, from)\r\n      : {\r\n          line: 1,\r\n          column: 1,\r\n          offset: 0\r\n        },\r\n    {\r\n      _index: 0,\r\n      _bufferIndex: -1\r\n    }\r\n  )\r\n  /** @type {Record<string, number>} */\r\n  const columnStart = {}\r\n  /** @type {Array<Construct>} */\r\n  const resolveAllConstructs = []\r\n  /** @type {Array<Chunk>} */\r\n  let chunks = []\r\n  /** @type {Array<Token>} */\r\n  let stack = []\r\n  /** @type {boolean | undefined} */\r\n  let consumed = true\r\n\r\n  /**\r\n   * Tools used for tokenizing.\r\n   *\r\n   * @type {Effects}\r\n   */\r\n  const effects = {\r\n    consume,\r\n    enter,\r\n    exit,\r\n    attempt: constructFactory(onsuccessfulconstruct),\r\n    check: constructFactory(onsuccessfulcheck),\r\n    interrupt: constructFactory(onsuccessfulcheck, {\r\n      interrupt: true\r\n    })\r\n  }\r\n\r\n  /**\r\n   * State and tools for resolving and serializing.\r\n   *\r\n   * @type {TokenizeContext}\r\n   */\r\n  const context = {\r\n    previous: null,\r\n    code: null,\r\n    containerState: {},\r\n    events: [],\r\n    parser,\r\n    sliceStream,\r\n    sliceSerialize,\r\n    now,\r\n    defineSkip,\r\n    write\r\n  }\r\n\r\n  /**\r\n   * The state function.\r\n   *\r\n   * @type {State | void}\r\n   */\r\n  let state = initialize.tokenize.call(context, effects)\r\n\r\n  /**\r\n   * Track which character we expect to be consumed, to catch bugs.\r\n   *\r\n   * @type {Code}\r\n   */\r\n  let expectedCode\r\n  if (initialize.resolveAll) {\r\n    resolveAllConstructs.push(initialize)\r\n  }\r\n  return context\r\n\r\n  /** @type {TokenizeContext['write']} */\r\n  function write(slice) {\r\n    chunks = push(chunks, slice)\r\n    main()\r\n\r\n    // Exit if we’re not done, resolve might change stuff.\r\n    if (chunks[chunks.length - 1] !== null) {\r\n      return []\r\n    }\r\n    addResult(initialize, 0)\r\n\r\n    // Otherwise, resolve, and exit.\r\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\r\n    return context.events\r\n  }\r\n\r\n  //\r\n  // Tools.\r\n  //\r\n\r\n  /** @type {TokenizeContext['sliceSerialize']} */\r\n  function sliceSerialize(token, expandTabs) {\r\n    return serializeChunks(sliceStream(token), expandTabs)\r\n  }\r\n\r\n  /** @type {TokenizeContext['sliceStream']} */\r\n  function sliceStream(token) {\r\n    return sliceChunks(chunks, token)\r\n  }\r\n\r\n  /** @type {TokenizeContext['now']} */\r\n  function now() {\r\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\r\n    const {line, column, offset, _index, _bufferIndex} = point\r\n    return {\r\n      line,\r\n      column,\r\n      offset,\r\n      _index,\r\n      _bufferIndex\r\n    }\r\n  }\r\n\r\n  /** @type {TokenizeContext['defineSkip']} */\r\n  function defineSkip(value) {\r\n    columnStart[value.line] = value.column\r\n    accountForPotentialSkip()\r\n  }\r\n\r\n  //\r\n  // State management.\r\n  //\r\n\r\n  /**\r\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\r\n   * `consume`).\r\n   * Here is where we walk through the chunks, which either include strings of\r\n   * several characters, or numerical character codes.\r\n   * The reason to do this in a loop instead of a call is so the stack can\r\n   * drain.\r\n   *\r\n   * @returns {void}\r\n   */\r\n  function main() {\r\n    /** @type {number} */\r\n    let chunkIndex\r\n    while (point._index < chunks.length) {\r\n      const chunk = chunks[point._index]\r\n\r\n      // If we’re in a buffer chunk, loop through it.\r\n      if (typeof chunk === 'string') {\r\n        chunkIndex = point._index\r\n        if (point._bufferIndex < 0) {\r\n          point._bufferIndex = 0\r\n        }\r\n        while (\r\n          point._index === chunkIndex &&\r\n          point._bufferIndex < chunk.length\r\n        ) {\r\n          go(chunk.charCodeAt(point._bufferIndex))\r\n        }\r\n      } else {\r\n        go(chunk)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deal with one code.\r\n   *\r\n   * @param {Code} code\r\n   * @returns {void}\r\n   */\r\n  function go(code) {\r\n    consumed = undefined\r\n    expectedCode = code\r\n    state = state(code)\r\n  }\r\n\r\n  /** @type {Effects['consume']} */\r\n  function consume(code) {\r\n    if (markdownLineEnding(code)) {\r\n      point.line++\r\n      point.column = 1\r\n      point.offset += code === -3 ? 2 : 1\r\n      accountForPotentialSkip()\r\n    } else if (code !== -1) {\r\n      point.column++\r\n      point.offset++\r\n    }\r\n\r\n    // Not in a string chunk.\r\n    if (point._bufferIndex < 0) {\r\n      point._index++\r\n    } else {\r\n      point._bufferIndex++\r\n\r\n      // At end of string chunk.\r\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\r\n      // strings.\r\n      if (point._bufferIndex === chunks[point._index].length) {\r\n        point._bufferIndex = -1\r\n        point._index++\r\n      }\r\n    }\r\n\r\n    // Expose the previous character.\r\n    context.previous = code\r\n\r\n    // Mark as consumed.\r\n    consumed = true\r\n  }\r\n\r\n  /** @type {Effects['enter']} */\r\n  function enter(type, fields) {\r\n    /** @type {Token} */\r\n    // @ts-expect-error Patch instead of assign required fields to help GC.\r\n    const token = fields || {}\r\n    token.type = type\r\n    token.start = now()\r\n    context.events.push(['enter', token, context])\r\n    stack.push(token)\r\n    return token\r\n  }\r\n\r\n  /** @type {Effects['exit']} */\r\n  function exit(type) {\r\n    const token = stack.pop()\r\n    token.end = now()\r\n    context.events.push(['exit', token, context])\r\n    return token\r\n  }\r\n\r\n  /**\r\n   * Use results.\r\n   *\r\n   * @type {ReturnHandle}\r\n   */\r\n  function onsuccessfulconstruct(construct, info) {\r\n    addResult(construct, info.from)\r\n  }\r\n\r\n  /**\r\n   * Discard results.\r\n   *\r\n   * @type {ReturnHandle}\r\n   */\r\n  function onsuccessfulcheck(_, info) {\r\n    info.restore()\r\n  }\r\n\r\n  /**\r\n   * Factory to attempt/check/interrupt.\r\n   *\r\n   * @param {ReturnHandle} onreturn\r\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\r\n   */\r\n  function constructFactory(onreturn, fields) {\r\n    return hook\r\n\r\n    /**\r\n     * Handle either an object mapping codes to constructs, a list of\r\n     * constructs, or a single construct.\r\n     *\r\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\r\n     * @param {State} returnState\r\n     * @param {State | undefined} [bogusState]\r\n     * @returns {State}\r\n     */\r\n    function hook(constructs, returnState, bogusState) {\r\n      /** @type {Array<Construct>} */\r\n      let listOfConstructs\r\n      /** @type {number} */\r\n      let constructIndex\r\n      /** @type {Construct} */\r\n      let currentConstruct\r\n      /** @type {Info} */\r\n      let info\r\n      return Array.isArray(constructs) /* c8 ignore next 1 */\r\n        ? handleListOfConstructs(constructs)\r\n        : 'tokenize' in constructs\r\n        ? // @ts-expect-error Looks like a construct.\r\n          handleListOfConstructs([constructs])\r\n        : handleMapOfConstructs(constructs)\r\n\r\n      /**\r\n       * Handle a list of construct.\r\n       *\r\n       * @param {ConstructRecord} map\r\n       * @returns {State}\r\n       */\r\n      function handleMapOfConstructs(map) {\r\n        return start\r\n\r\n        /** @type {State} */\r\n        function start(code) {\r\n          const def = code !== null && map[code]\r\n          const all = code !== null && map.null\r\n          const list = [\r\n            // To do: add more extension tests.\r\n            /* c8 ignore next 2 */\r\n            ...(Array.isArray(def) ? def : def ? [def] : []),\r\n            ...(Array.isArray(all) ? all : all ? [all] : [])\r\n          ]\r\n          return handleListOfConstructs(list)(code)\r\n        }\r\n      }\r\n\r\n      /**\r\n       * Handle a list of construct.\r\n       *\r\n       * @param {Array<Construct>} list\r\n       * @returns {State}\r\n       */\r\n      function handleListOfConstructs(list) {\r\n        listOfConstructs = list\r\n        constructIndex = 0\r\n        if (list.length === 0) {\r\n          return bogusState\r\n        }\r\n        return handleConstruct(list[constructIndex])\r\n      }\r\n\r\n      /**\r\n       * Handle a single construct.\r\n       *\r\n       * @param {Construct} construct\r\n       * @returns {State}\r\n       */\r\n      function handleConstruct(construct) {\r\n        return start\r\n\r\n        /** @type {State} */\r\n        function start(code) {\r\n          // To do: not needed to store if there is no bogus state, probably?\r\n          // Currently doesn’t work because `inspect` in document does a check\r\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\r\n          // by not storing.\r\n          info = store()\r\n          currentConstruct = construct\r\n          if (!construct.partial) {\r\n            context.currentConstruct = construct\r\n          }\r\n\r\n          // Always populated by defaults.\r\n\r\n          if (\r\n            construct.name &&\r\n            context.parser.constructs.disable.null.includes(construct.name)\r\n          ) {\r\n            return nok(code)\r\n          }\r\n          return construct.tokenize.call(\r\n            // If we do have fields, create an object w/ `context` as its\r\n            // prototype.\r\n            // This allows a “live binding”, which is needed for `interrupt`.\r\n            fields ? Object.assign(Object.create(context), fields) : context,\r\n            effects,\r\n            ok,\r\n            nok\r\n          )(code)\r\n        }\r\n      }\r\n\r\n      /** @type {State} */\r\n      function ok(code) {\r\n        consumed = true\r\n        onreturn(currentConstruct, info)\r\n        return returnState\r\n      }\r\n\r\n      /** @type {State} */\r\n      function nok(code) {\r\n        consumed = true\r\n        info.restore()\r\n        if (++constructIndex < listOfConstructs.length) {\r\n          return handleConstruct(listOfConstructs[constructIndex])\r\n        }\r\n        return bogusState\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Construct} construct\r\n   * @param {number} from\r\n   * @returns {void}\r\n   */\r\n  function addResult(construct, from) {\r\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\r\n      resolveAllConstructs.push(construct)\r\n    }\r\n    if (construct.resolve) {\r\n      splice(\r\n        context.events,\r\n        from,\r\n        context.events.length - from,\r\n        construct.resolve(context.events.slice(from), context)\r\n      )\r\n    }\r\n    if (construct.resolveTo) {\r\n      context.events = construct.resolveTo(context.events, context)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Store state.\r\n   *\r\n   * @returns {Info}\r\n   */\r\n  function store() {\r\n    const startPoint = now()\r\n    const startPrevious = context.previous\r\n    const startCurrentConstruct = context.currentConstruct\r\n    const startEventsIndex = context.events.length\r\n    const startStack = Array.from(stack)\r\n    return {\r\n      restore,\r\n      from: startEventsIndex\r\n    }\r\n\r\n    /**\r\n     * Restore state.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    function restore() {\r\n      point = startPoint\r\n      context.previous = startPrevious\r\n      context.currentConstruct = startCurrentConstruct\r\n      context.events.length = startEventsIndex\r\n      stack = startStack\r\n      accountForPotentialSkip()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Move the current point a bit forward in the line when it’s on a column\r\n   * skip.\r\n   *\r\n   * @returns {void}\r\n   */\r\n  function accountForPotentialSkip() {\r\n    if (point.line in columnStart && point.column < 2) {\r\n      point.column = columnStart[point.line]\r\n      point.offset += columnStart[point.line] - 1\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Get the chunks from a slice of chunks in the range of a token.\r\n *\r\n * @param {Array<Chunk>} chunks\r\n * @param {Pick<Token, 'end' | 'start'>} token\r\n * @returns {Array<Chunk>}\r\n */\r\nfunction sliceChunks(chunks, token) {\r\n  const startIndex = token.start._index\r\n  const startBufferIndex = token.start._bufferIndex\r\n  const endIndex = token.end._index\r\n  const endBufferIndex = token.end._bufferIndex\r\n  /** @type {Array<Chunk>} */\r\n  let view\r\n  if (startIndex === endIndex) {\r\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\r\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\r\n  } else {\r\n    view = chunks.slice(startIndex, endIndex)\r\n    if (startBufferIndex > -1) {\r\n      const head = view[0]\r\n      if (typeof head === 'string') {\r\n        view[0] = head.slice(startBufferIndex)\r\n      } else {\r\n        view.shift()\r\n      }\r\n    }\r\n    if (endBufferIndex > 0) {\r\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\r\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\r\n    }\r\n  }\r\n  return view\r\n}\r\n\r\n/**\r\n * Get the string value of a slice of chunks.\r\n *\r\n * @param {Array<Chunk>} chunks\r\n * @param {boolean | undefined} [expandTabs=false]\r\n * @returns {string}\r\n */\r\nfunction serializeChunks(chunks, expandTabs) {\r\n  let index = -1\r\n  /** @type {Array<string>} */\r\n  const result = []\r\n  /** @type {boolean | undefined} */\r\n  let atTab\r\n  while (++index < chunks.length) {\r\n    const chunk = chunks[index]\r\n    /** @type {string} */\r\n    let value\r\n    if (typeof chunk === 'string') {\r\n      value = chunk\r\n    } else\r\n      switch (chunk) {\r\n        case -5: {\r\n          value = '\\r'\r\n          break\r\n        }\r\n        case -4: {\r\n          value = '\\n'\r\n          break\r\n        }\r\n        case -3: {\r\n          value = '\\r' + '\\n'\r\n          break\r\n        }\r\n        case -2: {\r\n          value = expandTabs ? ' ' : '\\t'\r\n          break\r\n        }\r\n        case -1: {\r\n          if (!expandTabs && atTab) continue\r\n          value = ' '\r\n          break\r\n        }\r\n        default: {\r\n          // Currently only replacement character.\r\n          value = String.fromCharCode(chunk)\r\n        }\r\n      }\r\n    atTab = chunk === -2\r\n    result.push(value)\r\n  }\r\n  return result.join('')\r\n}\r\n","/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\r\n/** @type {Construct} */\r\nexport const thematicBreak = {\r\n  name: 'thematicBreak',\r\n  tokenize: tokenizeThematicBreak\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeThematicBreak(effects, ok, nok) {\r\n  let size = 0\r\n  /** @type {NonNullable<Code>} */\r\n  let marker\r\n  return start\r\n\r\n  /**\r\n   * Start of thematic break.\r\n   *\r\n   * ```markdown\r\n   * > | ***\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    effects.enter('thematicBreak')\r\n    // To do: parse indent like `markdown-rs`.\r\n    return before(code)\r\n  }\r\n\r\n  /**\r\n   * After optional whitespace, at marker.\r\n   *\r\n   * ```markdown\r\n   * > | ***\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function before(code) {\r\n    marker = code\r\n    return atBreak(code)\r\n  }\r\n\r\n  /**\r\n   * After something, before something else.\r\n   *\r\n   * ```markdown\r\n   * > | ***\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function atBreak(code) {\r\n    if (code === marker) {\r\n      effects.enter('thematicBreakSequence')\r\n      return sequence(code)\r\n    }\r\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\r\n      effects.exit('thematicBreak')\r\n      return ok(code)\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In sequence.\r\n   *\r\n   * ```markdown\r\n   * > | ***\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function sequence(code) {\r\n    if (code === marker) {\r\n      effects.consume(code)\r\n      size++\r\n      return sequence\r\n    }\r\n    effects.exit('thematicBreakSequence')\r\n    return markdownSpace(code)\r\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\r\n      : atBreak(code)\r\n  }\r\n}\r\n","/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\r\n * @typedef {import('micromark-util-types').Exiter} Exiter\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\r\nimport {blankLine} from './blank-line.js'\r\nimport {thematicBreak} from './thematic-break.js'\r\n\r\n/** @type {Construct} */\r\nexport const list = {\r\n  name: 'list',\r\n  tokenize: tokenizeListStart,\r\n  continuation: {\r\n    tokenize: tokenizeListContinuation\r\n  },\r\n  exit: tokenizeListEnd\r\n}\r\n\r\n/** @type {Construct} */\r\nconst listItemPrefixWhitespaceConstruct = {\r\n  tokenize: tokenizeListItemPrefixWhitespace,\r\n  partial: true\r\n}\r\n\r\n/** @type {Construct} */\r\nconst indentConstruct = {\r\n  tokenize: tokenizeIndent,\r\n  partial: true\r\n}\r\n\r\n// To do: `markdown-rs` parses list items on their own and later stitches them\r\n// together.\r\n\r\n/**\r\n * @type {Tokenizer}\r\n * @this {TokenizeContext}\r\n */\r\nfunction tokenizeListStart(effects, ok, nok) {\r\n  const self = this\r\n  const tail = self.events[self.events.length - 1]\r\n  let initialSize =\r\n    tail && tail[1].type === 'linePrefix'\r\n      ? tail[2].sliceSerialize(tail[1], true).length\r\n      : 0\r\n  let size = 0\r\n  return start\r\n\r\n  /** @type {State} */\r\n  function start(code) {\r\n    const kind =\r\n      self.containerState.type ||\r\n      (code === 42 || code === 43 || code === 45\r\n        ? 'listUnordered'\r\n        : 'listOrdered')\r\n    if (\r\n      kind === 'listUnordered'\r\n        ? !self.containerState.marker || code === self.containerState.marker\r\n        : asciiDigit(code)\r\n    ) {\r\n      if (!self.containerState.type) {\r\n        self.containerState.type = kind\r\n        effects.enter(kind, {\r\n          _container: true\r\n        })\r\n      }\r\n      if (kind === 'listUnordered') {\r\n        effects.enter('listItemPrefix')\r\n        return code === 42 || code === 45\r\n          ? effects.check(thematicBreak, nok, atMarker)(code)\r\n          : atMarker(code)\r\n      }\r\n      if (!self.interrupt || code === 49) {\r\n        effects.enter('listItemPrefix')\r\n        effects.enter('listItemValue')\r\n        return inside(code)\r\n      }\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function inside(code) {\r\n    if (asciiDigit(code) && ++size < 10) {\r\n      effects.consume(code)\r\n      return inside\r\n    }\r\n    if (\r\n      (!self.interrupt || size < 2) &&\r\n      (self.containerState.marker\r\n        ? code === self.containerState.marker\r\n        : code === 41 || code === 46)\r\n    ) {\r\n      effects.exit('listItemValue')\r\n      return atMarker(code)\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * @type {State}\r\n   **/\r\n  function atMarker(code) {\r\n    effects.enter('listItemMarker')\r\n    effects.consume(code)\r\n    effects.exit('listItemMarker')\r\n    self.containerState.marker = self.containerState.marker || code\r\n    return effects.check(\r\n      blankLine,\r\n      // Can’t be empty when interrupting.\r\n      self.interrupt ? nok : onBlank,\r\n      effects.attempt(\r\n        listItemPrefixWhitespaceConstruct,\r\n        endOfPrefix,\r\n        otherPrefix\r\n      )\r\n    )\r\n  }\r\n\r\n  /** @type {State} */\r\n  function onBlank(code) {\r\n    self.containerState.initialBlankLine = true\r\n    initialSize++\r\n    return endOfPrefix(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function otherPrefix(code) {\r\n    if (markdownSpace(code)) {\r\n      effects.enter('listItemPrefixWhitespace')\r\n      effects.consume(code)\r\n      effects.exit('listItemPrefixWhitespace')\r\n      return endOfPrefix\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function endOfPrefix(code) {\r\n    self.containerState.size =\r\n      initialSize +\r\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\r\n    return ok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @type {Tokenizer}\r\n * @this {TokenizeContext}\r\n */\r\nfunction tokenizeListContinuation(effects, ok, nok) {\r\n  const self = this\r\n  self.containerState._closeFlow = undefined\r\n  return effects.check(blankLine, onBlank, notBlank)\r\n\r\n  /** @type {State} */\r\n  function onBlank(code) {\r\n    self.containerState.furtherBlankLines =\r\n      self.containerState.furtherBlankLines ||\r\n      self.containerState.initialBlankLine\r\n\r\n    // We have a blank line.\r\n    // Still, try to consume at most the items size.\r\n    return factorySpace(\r\n      effects,\r\n      ok,\r\n      'listItemIndent',\r\n      self.containerState.size + 1\r\n    )(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function notBlank(code) {\r\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\r\n      self.containerState.furtherBlankLines = undefined\r\n      self.containerState.initialBlankLine = undefined\r\n      return notInCurrentItem(code)\r\n    }\r\n    self.containerState.furtherBlankLines = undefined\r\n    self.containerState.initialBlankLine = undefined\r\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function notInCurrentItem(code) {\r\n    // While we do continue, we signal that the flow should be closed.\r\n    self.containerState._closeFlow = true\r\n    // As we’re closing flow, we’re no longer interrupting.\r\n    self.interrupt = undefined\r\n    // Always populated by defaults.\r\n\r\n    return factorySpace(\r\n      effects,\r\n      effects.attempt(list, ok, nok),\r\n      'linePrefix',\r\n      self.parser.constructs.disable.null.includes('codeIndented')\r\n        ? undefined\r\n        : 4\r\n    )(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @type {Tokenizer}\r\n * @this {TokenizeContext}\r\n */\r\nfunction tokenizeIndent(effects, ok, nok) {\r\n  const self = this\r\n  return factorySpace(\r\n    effects,\r\n    afterPrefix,\r\n    'listItemIndent',\r\n    self.containerState.size + 1\r\n  )\r\n\r\n  /** @type {State} */\r\n  function afterPrefix(code) {\r\n    const tail = self.events[self.events.length - 1]\r\n    return tail &&\r\n      tail[1].type === 'listItemIndent' &&\r\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\r\n      ? ok(code)\r\n      : nok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @type {Exiter}\r\n * @this {TokenizeContext}\r\n */\r\nfunction tokenizeListEnd(effects) {\r\n  effects.exit(this.containerState.type)\r\n}\r\n\r\n/**\r\n * @type {Tokenizer}\r\n * @this {TokenizeContext}\r\n */\r\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\r\n  const self = this\r\n\r\n  // Always populated by defaults.\r\n\r\n  return factorySpace(\r\n    effects,\r\n    afterPrefix,\r\n    'listItemPrefixWhitespace',\r\n    self.parser.constructs.disable.null.includes('codeIndented')\r\n      ? undefined\r\n      : 4 + 1\r\n  )\r\n\r\n  /** @type {State} */\r\n  function afterPrefix(code) {\r\n    const tail = self.events[self.events.length - 1]\r\n    return !markdownSpace(code) &&\r\n      tail &&\r\n      tail[1].type === 'listItemPrefixWhitespace'\r\n      ? ok(code)\r\n      : nok(code)\r\n  }\r\n}\r\n","/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').Exiter} Exiter\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownSpace} from 'micromark-util-character'\r\n/** @type {Construct} */\r\nexport const blockQuote = {\r\n  name: 'blockQuote',\r\n  tokenize: tokenizeBlockQuoteStart,\r\n  continuation: {\r\n    tokenize: tokenizeBlockQuoteContinuation\r\n  },\r\n  exit\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\r\n  const self = this\r\n  return start\r\n\r\n  /**\r\n   * Start of block quote.\r\n   *\r\n   * ```markdown\r\n   * > | > a\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    if (code === 62) {\r\n      const state = self.containerState\r\n      if (!state.open) {\r\n        effects.enter('blockQuote', {\r\n          _container: true\r\n        })\r\n        state.open = true\r\n      }\r\n      effects.enter('blockQuotePrefix')\r\n      effects.enter('blockQuoteMarker')\r\n      effects.consume(code)\r\n      effects.exit('blockQuoteMarker')\r\n      return after\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `>`, before optional whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | > a\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    if (markdownSpace(code)) {\r\n      effects.enter('blockQuotePrefixWhitespace')\r\n      effects.consume(code)\r\n      effects.exit('blockQuotePrefixWhitespace')\r\n      effects.exit('blockQuotePrefix')\r\n      return ok\r\n    }\r\n    effects.exit('blockQuotePrefix')\r\n    return ok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * Start of block quote continuation.\r\n *\r\n * ```markdown\r\n *   | > a\r\n * > | > b\r\n *     ^\r\n * ```\r\n *\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\r\n  const self = this\r\n  return contStart\r\n\r\n  /**\r\n   * Start of block quote continuation.\r\n   *\r\n   * Also used to parse the first block quote opening.\r\n   *\r\n   * ```markdown\r\n   *   | > a\r\n   * > | > b\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function contStart(code) {\r\n    if (markdownSpace(code)) {\r\n      // Always populated by defaults.\r\n\r\n      return factorySpace(\r\n        effects,\r\n        contBefore,\r\n        'linePrefix',\r\n        self.parser.constructs.disable.null.includes('codeIndented')\r\n          ? undefined\r\n          : 4\r\n      )(code)\r\n    }\r\n    return contBefore(code)\r\n  }\r\n\r\n  /**\r\n   * At `>`, after optional whitespace.\r\n   *\r\n   * Also used to parse the first block quote opening.\r\n   *\r\n   * ```markdown\r\n   *   | > a\r\n   * > | > b\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function contBefore(code) {\r\n    return effects.attempt(blockQuote, ok, nok)(code)\r\n  }\r\n}\r\n\r\n/** @type {Exiter} */\r\nfunction exit(effects) {\r\n  effects.exit('blockQuote')\r\n}\r\n","/**\r\n * @typedef {import('micromark-util-types').Effects} Effects\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenType} TokenType\r\n */\r\n\r\nimport {\r\n  asciiControl,\r\n  markdownLineEndingOrSpace,\r\n  markdownLineEnding\r\n} from 'micromark-util-character'\r\n/**\r\n * Parse destinations.\r\n *\r\n * ###### Examples\r\n *\r\n * ```markdown\r\n * <a>\r\n * <a\\>b>\r\n * <a b>\r\n * <a)>\r\n * a\r\n * a\\)b\r\n * a(b)c\r\n * a(b)\r\n * ```\r\n *\r\n * @param {Effects} effects\r\n *   Context.\r\n * @param {State} ok\r\n *   State switched to when successful.\r\n * @param {State} nok\r\n *   State switched to when unsuccessful.\r\n * @param {TokenType} type\r\n *   Type for whole (`<a>` or `b`).\r\n * @param {TokenType} literalType\r\n *   Type when enclosed (`<a>`).\r\n * @param {TokenType} literalMarkerType\r\n *   Type for enclosing (`<` and `>`).\r\n * @param {TokenType} rawType\r\n *   Type when not enclosed (`b`).\r\n * @param {TokenType} stringType\r\n *   Type for the value (`a` or `b`).\r\n * @param {number | undefined} [max=Infinity]\r\n *   Depth of nested parens (inclusive).\r\n * @returns {State}\r\n *   Start state.\r\n */ // eslint-disable-next-line max-params\r\nexport function factoryDestination(\r\n  effects,\r\n  ok,\r\n  nok,\r\n  type,\r\n  literalType,\r\n  literalMarkerType,\r\n  rawType,\r\n  stringType,\r\n  max\r\n) {\r\n  const limit = max || Number.POSITIVE_INFINITY\r\n  let balance = 0\r\n  return start\r\n\r\n  /**\r\n   * Start of destination.\r\n   *\r\n   * ```markdown\r\n   * > | <aa>\r\n   *     ^\r\n   * > | aa\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    if (code === 60) {\r\n      effects.enter(type)\r\n      effects.enter(literalType)\r\n      effects.enter(literalMarkerType)\r\n      effects.consume(code)\r\n      effects.exit(literalMarkerType)\r\n      return enclosedBefore\r\n    }\r\n\r\n    // ASCII control, space, closing paren.\r\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\r\n      return nok(code)\r\n    }\r\n    effects.enter(type)\r\n    effects.enter(rawType)\r\n    effects.enter(stringType)\r\n    effects.enter('chunkString', {\r\n      contentType: 'string'\r\n    })\r\n    return raw(code)\r\n  }\r\n\r\n  /**\r\n   * After `<`, at an enclosed destination.\r\n   *\r\n   * ```markdown\r\n   * > | <aa>\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function enclosedBefore(code) {\r\n    if (code === 62) {\r\n      effects.enter(literalMarkerType)\r\n      effects.consume(code)\r\n      effects.exit(literalMarkerType)\r\n      effects.exit(literalType)\r\n      effects.exit(type)\r\n      return ok\r\n    }\r\n    effects.enter(stringType)\r\n    effects.enter('chunkString', {\r\n      contentType: 'string'\r\n    })\r\n    return enclosed(code)\r\n  }\r\n\r\n  /**\r\n   * In enclosed destination.\r\n   *\r\n   * ```markdown\r\n   * > | <aa>\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function enclosed(code) {\r\n    if (code === 62) {\r\n      effects.exit('chunkString')\r\n      effects.exit(stringType)\r\n      return enclosedBefore(code)\r\n    }\r\n    if (code === null || code === 60 || markdownLineEnding(code)) {\r\n      return nok(code)\r\n    }\r\n    effects.consume(code)\r\n    return code === 92 ? enclosedEscape : enclosed\r\n  }\r\n\r\n  /**\r\n   * After `\\`, at a special character.\r\n   *\r\n   * ```markdown\r\n   * > | <a\\*a>\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function enclosedEscape(code) {\r\n    if (code === 60 || code === 62 || code === 92) {\r\n      effects.consume(code)\r\n      return enclosed\r\n    }\r\n    return enclosed(code)\r\n  }\r\n\r\n  /**\r\n   * In raw destination.\r\n   *\r\n   * ```markdown\r\n   * > | aa\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function raw(code) {\r\n    if (\r\n      !balance &&\r\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\r\n    ) {\r\n      effects.exit('chunkString')\r\n      effects.exit(stringType)\r\n      effects.exit(rawType)\r\n      effects.exit(type)\r\n      return ok(code)\r\n    }\r\n    if (balance < limit && code === 40) {\r\n      effects.consume(code)\r\n      balance++\r\n      return raw\r\n    }\r\n    if (code === 41) {\r\n      effects.consume(code)\r\n      balance--\r\n      return raw\r\n    }\r\n\r\n    // ASCII control (but *not* `\\0`) and space and `(`.\r\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\r\n    // doesn’t.\r\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\r\n      return nok(code)\r\n    }\r\n    effects.consume(code)\r\n    return code === 92 ? rawEscape : raw\r\n  }\r\n\r\n  /**\r\n   * After `\\`, at special character.\r\n   *\r\n   * ```markdown\r\n   * > | a\\*a\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function rawEscape(code) {\r\n    if (code === 40 || code === 41 || code === 92) {\r\n      effects.consume(code)\r\n      return raw\r\n    }\r\n    return raw(code)\r\n  }\r\n}\r\n","/**\r\n * @typedef {import('micromark-util-types').Effects} Effects\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').TokenType} TokenType\r\n */\r\n\r\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\r\n/**\r\n * Parse labels.\r\n *\r\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\r\n *\r\n * ###### Examples\r\n *\r\n * ```markdown\r\n * [a]\r\n * [a\r\n * b]\r\n * [a\\]b]\r\n * ```\r\n *\r\n * @this {TokenizeContext}\r\n *   Tokenize context.\r\n * @param {Effects} effects\r\n *   Context.\r\n * @param {State} ok\r\n *   State switched to when successful.\r\n * @param {State} nok\r\n *   State switched to when unsuccessful.\r\n * @param {TokenType} type\r\n *   Type of the whole label (`[a]`).\r\n * @param {TokenType} markerType\r\n *   Type for the markers (`[` and `]`).\r\n * @param {TokenType} stringType\r\n *   Type for the identifier (`a`).\r\n * @returns {State}\r\n *   Start state.\r\n */ // eslint-disable-next-line max-params\r\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\r\n  const self = this\r\n  let size = 0\r\n  /** @type {boolean} */\r\n  let seen\r\n  return start\r\n\r\n  /**\r\n   * Start of label.\r\n   *\r\n   * ```markdown\r\n   * > | [a]\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    effects.enter(type)\r\n    effects.enter(markerType)\r\n    effects.consume(code)\r\n    effects.exit(markerType)\r\n    effects.enter(stringType)\r\n    return atBreak\r\n  }\r\n\r\n  /**\r\n   * In label, at something, before something else.\r\n   *\r\n   * ```markdown\r\n   * > | [a]\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function atBreak(code) {\r\n    if (\r\n      size > 999 ||\r\n      code === null ||\r\n      code === 91 ||\r\n      (code === 93 && !seen) ||\r\n      // To do: remove in the future once we’ve switched from\r\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\r\n      // which doesn’t need this.\r\n      // Hidden footnotes hook.\r\n      /* c8 ignore next 3 */\r\n      (code === 94 &&\r\n        !size &&\r\n        '_hiddenFootnoteSupport' in self.parser.constructs)\r\n    ) {\r\n      return nok(code)\r\n    }\r\n    if (code === 93) {\r\n      effects.exit(stringType)\r\n      effects.enter(markerType)\r\n      effects.consume(code)\r\n      effects.exit(markerType)\r\n      effects.exit(type)\r\n      return ok\r\n    }\r\n\r\n    // To do: indent? Link chunks and EOLs together?\r\n    if (markdownLineEnding(code)) {\r\n      effects.enter('lineEnding')\r\n      effects.consume(code)\r\n      effects.exit('lineEnding')\r\n      return atBreak\r\n    }\r\n    effects.enter('chunkString', {\r\n      contentType: 'string'\r\n    })\r\n    return labelInside(code)\r\n  }\r\n\r\n  /**\r\n   * In label, in text.\r\n   *\r\n   * ```markdown\r\n   * > | [a]\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function labelInside(code) {\r\n    if (\r\n      code === null ||\r\n      code === 91 ||\r\n      code === 93 ||\r\n      markdownLineEnding(code) ||\r\n      size++ > 999\r\n    ) {\r\n      effects.exit('chunkString')\r\n      return atBreak(code)\r\n    }\r\n    effects.consume(code)\r\n    if (!seen) seen = !markdownSpace(code)\r\n    return code === 92 ? labelEscape : labelInside\r\n  }\r\n\r\n  /**\r\n   * After `\\`, at a special character.\r\n   *\r\n   * ```markdown\r\n   * > | [a\\*a]\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function labelEscape(code) {\r\n    if (code === 91 || code === 92 || code === 93) {\r\n      effects.consume(code)\r\n      size++\r\n      return labelInside\r\n    }\r\n    return labelInside(code)\r\n  }\r\n}\r\n","/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Effects} Effects\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenType} TokenType\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding} from 'micromark-util-character'\r\n/**\r\n * Parse titles.\r\n *\r\n * ###### Examples\r\n *\r\n * ```markdown\r\n * \"a\"\r\n * 'b'\r\n * (c)\r\n * \"a\r\n * b\"\r\n * 'a\r\n *     b'\r\n * (a\\)b)\r\n * ```\r\n *\r\n * @param {Effects} effects\r\n *   Context.\r\n * @param {State} ok\r\n *   State switched to when successful.\r\n * @param {State} nok\r\n *   State switched to when unsuccessful.\r\n * @param {TokenType} type\r\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\r\n * @param {TokenType} markerType\r\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\r\n * @param {TokenType} stringType\r\n *   Type for the value (`a`).\r\n * @returns {State}\r\n *   Start state.\r\n */ // eslint-disable-next-line max-params\r\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\r\n  /** @type {NonNullable<Code>} */\r\n  let marker\r\n  return start\r\n\r\n  /**\r\n   * Start of title.\r\n   *\r\n   * ```markdown\r\n   * > | \"a\"\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    if (code === 34 || code === 39 || code === 40) {\r\n      effects.enter(type)\r\n      effects.enter(markerType)\r\n      effects.consume(code)\r\n      effects.exit(markerType)\r\n      marker = code === 40 ? 41 : code\r\n      return begin\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After opening marker.\r\n   *\r\n   * This is also used at the closing marker.\r\n   *\r\n   * ```markdown\r\n   * > | \"a\"\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function begin(code) {\r\n    if (code === marker) {\r\n      effects.enter(markerType)\r\n      effects.consume(code)\r\n      effects.exit(markerType)\r\n      effects.exit(type)\r\n      return ok\r\n    }\r\n    effects.enter(stringType)\r\n    return atBreak(code)\r\n  }\r\n\r\n  /**\r\n   * At something, before something else.\r\n   *\r\n   * ```markdown\r\n   * > | \"a\"\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function atBreak(code) {\r\n    if (code === marker) {\r\n      effects.exit(stringType)\r\n      return begin(marker)\r\n    }\r\n    if (code === null) {\r\n      return nok(code)\r\n    }\r\n\r\n    // Note: blank lines can’t exist in content.\r\n    if (markdownLineEnding(code)) {\r\n      // To do: use `space_or_tab_eol_with_options`, connect.\r\n      effects.enter('lineEnding')\r\n      effects.consume(code)\r\n      effects.exit('lineEnding')\r\n      return factorySpace(effects, atBreak, 'linePrefix')\r\n    }\r\n    effects.enter('chunkString', {\r\n      contentType: 'string'\r\n    })\r\n    return inside(code)\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @type {State}\r\n   */\r\n  function inside(code) {\r\n    if (code === marker || code === null || markdownLineEnding(code)) {\r\n      effects.exit('chunkString')\r\n      return atBreak(code)\r\n    }\r\n    effects.consume(code)\r\n    return code === 92 ? escape : inside\r\n  }\r\n\r\n  /**\r\n   * After `\\`, at a special character.\r\n   *\r\n   * ```markdown\r\n   * > | \"a\\*b\"\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function escape(code) {\r\n    if (code === marker || code === 92) {\r\n      effects.consume(code)\r\n      return inside\r\n    }\r\n    return inside(code)\r\n  }\r\n}\r\n","/**\r\n * @typedef {import('micromark-util-types').Effects} Effects\r\n * @typedef {import('micromark-util-types').State} State\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\r\n/**\r\n * Parse spaces and tabs.\r\n *\r\n * There is no `nok` parameter:\r\n *\r\n * *   line endings or spaces in markdown are often optional, in which case this\r\n *     factory can be used and `ok` will be switched to whether spaces were found\r\n *     or not\r\n * *   one line ending or space can be detected with\r\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\r\n *\r\n * @param {Effects} effects\r\n *   Context.\r\n * @param {State} ok\r\n *   State switched to when successful.\r\n * @returns\r\n *   Start state.\r\n */\r\nexport function factoryWhitespace(effects, ok) {\r\n  /** @type {boolean} */\r\n  let seen\r\n  return start\r\n\r\n  /** @type {State} */\r\n  function start(code) {\r\n    if (markdownLineEnding(code)) {\r\n      effects.enter('lineEnding')\r\n      effects.consume(code)\r\n      effects.exit('lineEnding')\r\n      seen = true\r\n      return start\r\n    }\r\n    if (markdownSpace(code)) {\r\n      return factorySpace(\r\n        effects,\r\n        start,\r\n        seen ? 'linePrefix' : 'lineSuffix'\r\n      )(code)\r\n    }\r\n    return ok(code)\r\n  }\r\n}\r\n","/**\r\n * Normalize an identifier (as found in references, definitions).\r\n *\r\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\r\n *\r\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\r\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\r\n * uppercase character (U+0398 (`Θ`)).\r\n * So, to get a canonical form, we perform both lower- and uppercase.\r\n *\r\n * Using uppercase last makes sure keys will never interact with default\r\n * prototypal values (such as `constructor`): nothing in the prototype of\r\n * `Object` is uppercase.\r\n *\r\n * @param {string} value\r\n *   Identifier to normalize.\r\n * @returns {string}\r\n *   Normalized identifier.\r\n */\r\nexport function normalizeIdentifier(value) {\r\n  return (\r\n    value\r\n      // Collapse markdown whitespace.\r\n      .replace(/[\\t\\n\\r ]+/g, ' ')\r\n      // Trim.\r\n      .replace(/^ | $/g, '')\r\n      // Some characters are considered “uppercase”, but if their lowercase\r\n      // counterpart is uppercased will result in a different uppercase\r\n      // character.\r\n      // Hence, to get that form, we perform both lower- and uppercase.\r\n      // Upper case makes sure keys will not interact with default prototypal\r\n      // methods: no method is uppercase.\r\n      .toLowerCase()\r\n      .toUpperCase()\r\n  )\r\n}\r\n","/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factoryDestination} from 'micromark-factory-destination'\r\nimport {factoryLabel} from 'micromark-factory-label'\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {factoryTitle} from 'micromark-factory-title'\r\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\r\nimport {\r\n  markdownLineEnding,\r\n  markdownLineEndingOrSpace,\r\n  markdownSpace\r\n} from 'micromark-util-character'\r\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\r\n/** @type {Construct} */\r\nexport const definition = {\r\n  name: 'definition',\r\n  tokenize: tokenizeDefinition\r\n}\r\n\r\n/** @type {Construct} */\r\nconst titleBefore = {\r\n  tokenize: tokenizeTitleBefore,\r\n  partial: true\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeDefinition(effects, ok, nok) {\r\n  const self = this\r\n  /** @type {string} */\r\n  let identifier\r\n  return start\r\n\r\n  /**\r\n   * At start of a definition.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b \"c\"\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    // Do not interrupt paragraphs (but do follow definitions).\r\n    // To do: do `interrupt` the way `markdown-rs` does.\r\n    // To do: parse whitespace the way `markdown-rs` does.\r\n    effects.enter('definition')\r\n    return before(code)\r\n  }\r\n\r\n  /**\r\n   * After optional whitespace, at `[`.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b \"c\"\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function before(code) {\r\n    // To do: parse whitespace the way `markdown-rs` does.\r\n\r\n    return factoryLabel.call(\r\n      self,\r\n      effects,\r\n      labelAfter,\r\n      // Note: we don’t need to reset the way `markdown-rs` does.\r\n      nok,\r\n      'definitionLabel',\r\n      'definitionLabelMarker',\r\n      'definitionLabelString'\r\n    )(code)\r\n  }\r\n\r\n  /**\r\n   * After label.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b \"c\"\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function labelAfter(code) {\r\n    identifier = normalizeIdentifier(\r\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\r\n    )\r\n    if (code === 58) {\r\n      effects.enter('definitionMarker')\r\n      effects.consume(code)\r\n      effects.exit('definitionMarker')\r\n      return markerAfter\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After marker.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b \"c\"\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function markerAfter(code) {\r\n    // Note: whitespace is optional.\r\n    return markdownLineEndingOrSpace(code)\r\n      ? factoryWhitespace(effects, destinationBefore)(code)\r\n      : destinationBefore(code)\r\n  }\r\n\r\n  /**\r\n   * Before destination.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b \"c\"\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function destinationBefore(code) {\r\n    return factoryDestination(\r\n      effects,\r\n      destinationAfter,\r\n      // Note: we don’t need to reset the way `markdown-rs` does.\r\n      nok,\r\n      'definitionDestination',\r\n      'definitionDestinationLiteral',\r\n      'definitionDestinationLiteralMarker',\r\n      'definitionDestinationRaw',\r\n      'definitionDestinationString'\r\n    )(code)\r\n  }\r\n\r\n  /**\r\n   * After destination.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b \"c\"\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function destinationAfter(code) {\r\n    return effects.attempt(titleBefore, after, after)(code)\r\n  }\r\n\r\n  /**\r\n   * After definition.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b\r\n   *           ^\r\n   * > | [a]: b \"c\"\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    return markdownSpace(code)\r\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\r\n      : afterWhitespace(code)\r\n  }\r\n\r\n  /**\r\n   * After definition, after optional whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b\r\n   *           ^\r\n   * > | [a]: b \"c\"\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function afterWhitespace(code) {\r\n    if (code === null || markdownLineEnding(code)) {\r\n      effects.exit('definition')\r\n\r\n      // Note: we don’t care about uniqueness.\r\n      // It’s likely that that doesn’t happen very frequently.\r\n      // It is more likely that it wastes precious time.\r\n      self.parser.defined.push(identifier)\r\n\r\n      // To do: `markdown-rs` interrupt.\r\n      // // You’d be interrupting.\r\n      // tokenizer.interrupt = true\r\n      return ok(code)\r\n    }\r\n    return nok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeTitleBefore(effects, ok, nok) {\r\n  return titleBefore\r\n\r\n  /**\r\n   * After destination, at whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b\r\n   *           ^\r\n   * > | [a]: b \"c\"\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function titleBefore(code) {\r\n    return markdownLineEndingOrSpace(code)\r\n      ? factoryWhitespace(effects, beforeMarker)(code)\r\n      : nok(code)\r\n  }\r\n\r\n  /**\r\n   * At title.\r\n   *\r\n   * ```markdown\r\n   *   | [a]: b\r\n   * > | \"c\"\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function beforeMarker(code) {\r\n    return factoryTitle(\r\n      effects,\r\n      titleAfter,\r\n      nok,\r\n      'definitionTitle',\r\n      'definitionTitleMarker',\r\n      'definitionTitleString'\r\n    )(code)\r\n  }\r\n\r\n  /**\r\n   * After title.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b \"c\"\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function titleAfter(code) {\r\n    return markdownSpace(code)\r\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\r\n      : titleAfterOptionalWhitespace(code)\r\n  }\r\n\r\n  /**\r\n   * After title, after optional whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b \"c\"\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function titleAfterOptionalWhitespace(code) {\r\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\r\n  }\r\n}\r\n","/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\r\n/** @type {Construct} */\r\nexport const codeIndented = {\r\n  name: 'codeIndented',\r\n  tokenize: tokenizeCodeIndented\r\n}\r\n\r\n/** @type {Construct} */\r\nconst furtherStart = {\r\n  tokenize: tokenizeFurtherStart,\r\n  partial: true\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeCodeIndented(effects, ok, nok) {\r\n  const self = this\r\n  return start\r\n\r\n  /**\r\n   * Start of code (indented).\r\n   *\r\n   * > **Parsing note**: it is not needed to check if this first line is a\r\n   * > filled line (that it has a non-whitespace character), because blank lines\r\n   * > are parsed already, so we never run into that.\r\n   *\r\n   * ```markdown\r\n   * > |     aaa\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    // To do: manually check if interrupting like `markdown-rs`.\r\n\r\n    effects.enter('codeIndented')\r\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\r\n    // so that we can drop the next state.\r\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\r\n  }\r\n\r\n  /**\r\n   * At start, after 1 or 4 spaces.\r\n   *\r\n   * ```markdown\r\n   * > |     aaa\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function afterPrefix(code) {\r\n    const tail = self.events[self.events.length - 1]\r\n    return tail &&\r\n      tail[1].type === 'linePrefix' &&\r\n      tail[2].sliceSerialize(tail[1], true).length >= 4\r\n      ? atBreak(code)\r\n      : nok(code)\r\n  }\r\n\r\n  /**\r\n   * At a break.\r\n   *\r\n   * ```markdown\r\n   * > |     aaa\r\n   *         ^  ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function atBreak(code) {\r\n    if (code === null) {\r\n      return after(code)\r\n    }\r\n    if (markdownLineEnding(code)) {\r\n      return effects.attempt(furtherStart, atBreak, after)(code)\r\n    }\r\n    effects.enter('codeFlowValue')\r\n    return inside(code)\r\n  }\r\n\r\n  /**\r\n   * In code content.\r\n   *\r\n   * ```markdown\r\n   * > |     aaa\r\n   *         ^^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function inside(code) {\r\n    if (code === null || markdownLineEnding(code)) {\r\n      effects.exit('codeFlowValue')\r\n      return atBreak(code)\r\n    }\r\n    effects.consume(code)\r\n    return inside\r\n  }\r\n\r\n  /** @type {State} */\r\n  function after(code) {\r\n    effects.exit('codeIndented')\r\n    // To do: allow interrupting like `markdown-rs`.\r\n    // Feel free to interrupt.\r\n    // tokenizer.interrupt = false\r\n    return ok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeFurtherStart(effects, ok, nok) {\r\n  const self = this\r\n  return furtherStart\r\n\r\n  /**\r\n   * At eol, trying to parse another indent.\r\n   *\r\n   * ```markdown\r\n   * > |     aaa\r\n   *            ^\r\n   *   |     bbb\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function furtherStart(code) {\r\n    // To do: improve `lazy` / `pierce` handling.\r\n    // If this is a lazy line, it can’t be code.\r\n    if (self.parser.lazy[self.now().line]) {\r\n      return nok(code)\r\n    }\r\n    if (markdownLineEnding(code)) {\r\n      effects.enter('lineEnding')\r\n      effects.consume(code)\r\n      effects.exit('lineEnding')\r\n      return furtherStart\r\n    }\r\n\r\n    // To do: the code here in `micromark-js` is a bit different from\r\n    // `markdown-rs` because there it can attempt spaces.\r\n    // We can’t yet.\r\n    //\r\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\r\n    // so that we can drop the next state.\r\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\r\n  }\r\n\r\n  /**\r\n   * At start, after 1 or 4 spaces.\r\n   *\r\n   * ```markdown\r\n   * > |     aaa\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function afterPrefix(code) {\r\n    const tail = self.events[self.events.length - 1]\r\n    return tail &&\r\n      tail[1].type === 'linePrefix' &&\r\n      tail[2].sliceSerialize(tail[1], true).length >= 4\r\n      ? ok(code)\r\n      : markdownLineEnding(code)\r\n      ? furtherStart(code)\r\n      : nok(code)\r\n  }\r\n}\r\n","/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').Resolver} Resolver\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').Token} Token\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {\r\n  markdownLineEnding,\r\n  markdownLineEndingOrSpace,\r\n  markdownSpace\r\n} from 'micromark-util-character'\r\nimport {splice} from 'micromark-util-chunked'\r\n/** @type {Construct} */\r\nexport const headingAtx = {\r\n  name: 'headingAtx',\r\n  tokenize: tokenizeHeadingAtx,\r\n  resolve: resolveHeadingAtx\r\n}\r\n\r\n/** @type {Resolver} */\r\nfunction resolveHeadingAtx(events, context) {\r\n  let contentEnd = events.length - 2\r\n  let contentStart = 3\r\n  /** @type {Token} */\r\n  let content\r\n  /** @type {Token} */\r\n  let text\r\n\r\n  // Prefix whitespace, part of the opening.\r\n  if (events[contentStart][1].type === 'whitespace') {\r\n    contentStart += 2\r\n  }\r\n\r\n  // Suffix whitespace, part of the closing.\r\n  if (\r\n    contentEnd - 2 > contentStart &&\r\n    events[contentEnd][1].type === 'whitespace'\r\n  ) {\r\n    contentEnd -= 2\r\n  }\r\n  if (\r\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\r\n    (contentStart === contentEnd - 1 ||\r\n      (contentEnd - 4 > contentStart &&\r\n        events[contentEnd - 2][1].type === 'whitespace'))\r\n  ) {\r\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\r\n  }\r\n  if (contentEnd > contentStart) {\r\n    content = {\r\n      type: 'atxHeadingText',\r\n      start: events[contentStart][1].start,\r\n      end: events[contentEnd][1].end\r\n    }\r\n    text = {\r\n      type: 'chunkText',\r\n      start: events[contentStart][1].start,\r\n      end: events[contentEnd][1].end,\r\n      contentType: 'text'\r\n    }\r\n    splice(events, contentStart, contentEnd - contentStart + 1, [\r\n      ['enter', content, context],\r\n      ['enter', text, context],\r\n      ['exit', text, context],\r\n      ['exit', content, context]\r\n    ])\r\n  }\r\n  return events\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeHeadingAtx(effects, ok, nok) {\r\n  let size = 0\r\n  return start\r\n\r\n  /**\r\n   * Start of a heading (atx).\r\n   *\r\n   * ```markdown\r\n   * > | ## aa\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    // To do: parse indent like `markdown-rs`.\r\n    effects.enter('atxHeading')\r\n    return before(code)\r\n  }\r\n\r\n  /**\r\n   * After optional whitespace, at `#`.\r\n   *\r\n   * ```markdown\r\n   * > | ## aa\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function before(code) {\r\n    effects.enter('atxHeadingSequence')\r\n    return sequenceOpen(code)\r\n  }\r\n\r\n  /**\r\n   * In opening sequence.\r\n   *\r\n   * ```markdown\r\n   * > | ## aa\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function sequenceOpen(code) {\r\n    if (code === 35 && size++ < 6) {\r\n      effects.consume(code)\r\n      return sequenceOpen\r\n    }\r\n\r\n    // Always at least one `#`.\r\n    if (code === null || markdownLineEndingOrSpace(code)) {\r\n      effects.exit('atxHeadingSequence')\r\n      return atBreak(code)\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After something, before something else.\r\n   *\r\n   * ```markdown\r\n   * > | ## aa\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function atBreak(code) {\r\n    if (code === 35) {\r\n      effects.enter('atxHeadingSequence')\r\n      return sequenceFurther(code)\r\n    }\r\n    if (code === null || markdownLineEnding(code)) {\r\n      effects.exit('atxHeading')\r\n      // To do: interrupt like `markdown-rs`.\r\n      // // Feel free to interrupt.\r\n      // tokenizer.interrupt = false\r\n      return ok(code)\r\n    }\r\n    if (markdownSpace(code)) {\r\n      return factorySpace(effects, atBreak, 'whitespace')(code)\r\n    }\r\n\r\n    // To do: generate `data` tokens, add the `text` token later.\r\n    // Needs edit map, see: `markdown.rs`.\r\n    effects.enter('atxHeadingText')\r\n    return data(code)\r\n  }\r\n\r\n  /**\r\n   * In further sequence (after whitespace).\r\n   *\r\n   * Could be normal “visible” hashes in the heading or a final sequence.\r\n   *\r\n   * ```markdown\r\n   * > | ## aa ##\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function sequenceFurther(code) {\r\n    if (code === 35) {\r\n      effects.consume(code)\r\n      return sequenceFurther\r\n    }\r\n    effects.exit('atxHeadingSequence')\r\n    return atBreak(code)\r\n  }\r\n\r\n  /**\r\n   * In text.\r\n   *\r\n   * ```markdown\r\n   * > | ## aa\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function data(code) {\r\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\r\n      effects.exit('atxHeadingText')\r\n      return atBreak(code)\r\n    }\r\n    effects.consume(code)\r\n    return data\r\n  }\r\n}\r\n","/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').Resolver} Resolver\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\r\n/** @type {Construct} */\r\nexport const setextUnderline = {\r\n  name: 'setextUnderline',\r\n  tokenize: tokenizeSetextUnderline,\r\n  resolveTo: resolveToSetextUnderline\r\n}\r\n\r\n/** @type {Resolver} */\r\nfunction resolveToSetextUnderline(events, context) {\r\n  // To do: resolve like `markdown-rs`.\r\n  let index = events.length\r\n  /** @type {number | undefined} */\r\n  let content\r\n  /** @type {number | undefined} */\r\n  let text\r\n  /** @type {number | undefined} */\r\n  let definition\r\n\r\n  // Find the opening of the content.\r\n  // It’ll always exist: we don’t tokenize if it isn’t there.\r\n  while (index--) {\r\n    if (events[index][0] === 'enter') {\r\n      if (events[index][1].type === 'content') {\r\n        content = index\r\n        break\r\n      }\r\n      if (events[index][1].type === 'paragraph') {\r\n        text = index\r\n      }\r\n    }\r\n    // Exit\r\n    else {\r\n      if (events[index][1].type === 'content') {\r\n        // Remove the content end (if needed we’ll add it later)\r\n        events.splice(index, 1)\r\n      }\r\n      if (!definition && events[index][1].type === 'definition') {\r\n        definition = index\r\n      }\r\n    }\r\n  }\r\n  const heading = {\r\n    type: 'setextHeading',\r\n    start: Object.assign({}, events[text][1].start),\r\n    end: Object.assign({}, events[events.length - 1][1].end)\r\n  }\r\n\r\n  // Change the paragraph to setext heading text.\r\n  events[text][1].type = 'setextHeadingText'\r\n\r\n  // If we have definitions in the content, we’ll keep on having content,\r\n  // but we need move it.\r\n  if (definition) {\r\n    events.splice(text, 0, ['enter', heading, context])\r\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\r\n    events[content][1].end = Object.assign({}, events[definition][1].end)\r\n  } else {\r\n    events[content][1] = heading\r\n  }\r\n\r\n  // Add the heading exit at the end.\r\n  events.push(['exit', heading, context])\r\n  return events\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeSetextUnderline(effects, ok, nok) {\r\n  const self = this\r\n  /** @type {NonNullable<Code>} */\r\n  let marker\r\n  return start\r\n\r\n  /**\r\n   * At start of heading (setext) underline.\r\n   *\r\n   * ```markdown\r\n   *   | aa\r\n   * > | ==\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    let index = self.events.length\r\n    /** @type {boolean | undefined} */\r\n    let paragraph\r\n    // Find an opening.\r\n    while (index--) {\r\n      // Skip enter/exit of line ending, line prefix, and content.\r\n      // We can now either have a definition or a paragraph.\r\n      if (\r\n        self.events[index][1].type !== 'lineEnding' &&\r\n        self.events[index][1].type !== 'linePrefix' &&\r\n        self.events[index][1].type !== 'content'\r\n      ) {\r\n        paragraph = self.events[index][1].type === 'paragraph'\r\n        break\r\n      }\r\n    }\r\n\r\n    // To do: handle lazy/pierce like `markdown-rs`.\r\n    // To do: parse indent like `markdown-rs`.\r\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\r\n      effects.enter('setextHeadingLine')\r\n      marker = code\r\n      return before(code)\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After optional whitespace, at `-` or `=`.\r\n   *\r\n   * ```markdown\r\n   *   | aa\r\n   * > | ==\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function before(code) {\r\n    effects.enter('setextHeadingLineSequence')\r\n    return inside(code)\r\n  }\r\n\r\n  /**\r\n   * In sequence.\r\n   *\r\n   * ```markdown\r\n   *   | aa\r\n   * > | ==\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function inside(code) {\r\n    if (code === marker) {\r\n      effects.consume(code)\r\n      return inside\r\n    }\r\n    effects.exit('setextHeadingLineSequence')\r\n    return markdownSpace(code)\r\n      ? factorySpace(effects, after, 'lineSuffix')(code)\r\n      : after(code)\r\n  }\r\n\r\n  /**\r\n   * After sequence, after optional whitespace.\r\n   *\r\n   * ```markdown\r\n   *   | aa\r\n   * > | ==\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    if (code === null || markdownLineEnding(code)) {\r\n      effects.exit('setextHeadingLine')\r\n      return ok(code)\r\n    }\r\n    return nok(code)\r\n  }\r\n}\r\n","/**\r\n * List of lowercase HTML “block” tag names.\r\n *\r\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\r\n * 6).\r\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\r\n * strictly parsed.\r\n * For tag names not in this list, a more strict algorithm (condition 7) is used\r\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\r\n *\r\n * This is copied from:\r\n * <https://spec.commonmark.org/0.30/#html-blocks>.\r\n *\r\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\r\n */\r\nexport const htmlBlockNames = [\r\n  'address',\r\n  'article',\r\n  'aside',\r\n  'base',\r\n  'basefont',\r\n  'blockquote',\r\n  'body',\r\n  'caption',\r\n  'center',\r\n  'col',\r\n  'colgroup',\r\n  'dd',\r\n  'details',\r\n  'dialog',\r\n  'dir',\r\n  'div',\r\n  'dl',\r\n  'dt',\r\n  'fieldset',\r\n  'figcaption',\r\n  'figure',\r\n  'footer',\r\n  'form',\r\n  'frame',\r\n  'frameset',\r\n  'h1',\r\n  'h2',\r\n  'h3',\r\n  'h4',\r\n  'h5',\r\n  'h6',\r\n  'head',\r\n  'header',\r\n  'hr',\r\n  'html',\r\n  'iframe',\r\n  'legend',\r\n  'li',\r\n  'link',\r\n  'main',\r\n  'menu',\r\n  'menuitem',\r\n  'nav',\r\n  'noframes',\r\n  'ol',\r\n  'optgroup',\r\n  'option',\r\n  'p',\r\n  'param',\r\n  'search',\r\n  'section',\r\n  'summary',\r\n  'table',\r\n  'tbody',\r\n  'td',\r\n  'tfoot',\r\n  'th',\r\n  'thead',\r\n  'title',\r\n  'tr',\r\n  'track',\r\n  'ul'\r\n]\r\n\r\n/**\r\n * List of lowercase HTML “raw” tag names.\r\n *\r\n * The list, when parsing HTML (flow), results in HTML that can include lines\r\n * without exiting, until a closing tag also in this list is found (condition\r\n * 1).\r\n *\r\n * This module is copied from:\r\n * <https://spec.commonmark.org/0.30/#html-blocks>.\r\n *\r\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\r\n */\r\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\r\n","/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').Resolver} Resolver\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {\r\n  asciiAlpha,\r\n  asciiAlphanumeric,\r\n  markdownLineEnding,\r\n  markdownLineEndingOrSpace,\r\n  markdownSpace\r\n} from 'micromark-util-character'\r\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\r\nimport {blankLine} from './blank-line.js'\r\n\r\n/** @type {Construct} */\r\nexport const htmlFlow = {\r\n  name: 'htmlFlow',\r\n  tokenize: tokenizeHtmlFlow,\r\n  resolveTo: resolveToHtmlFlow,\r\n  concrete: true\r\n}\r\n\r\n/** @type {Construct} */\r\nconst blankLineBefore = {\r\n  tokenize: tokenizeBlankLineBefore,\r\n  partial: true\r\n}\r\nconst nonLazyContinuationStart = {\r\n  tokenize: tokenizeNonLazyContinuationStart,\r\n  partial: true\r\n}\r\n\r\n/** @type {Resolver} */\r\nfunction resolveToHtmlFlow(events) {\r\n  let index = events.length\r\n  while (index--) {\r\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\r\n      break\r\n    }\r\n  }\r\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\r\n    // Add the prefix start to the HTML token.\r\n    events[index][1].start = events[index - 2][1].start\r\n    // Add the prefix start to the HTML line token.\r\n    events[index + 1][1].start = events[index - 2][1].start\r\n    // Remove the line prefix.\r\n    events.splice(index - 2, 2)\r\n  }\r\n  return events\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeHtmlFlow(effects, ok, nok) {\r\n  const self = this\r\n  /** @type {number} */\r\n  let marker\r\n  /** @type {boolean} */\r\n  let closingTag\r\n  /** @type {string} */\r\n  let buffer\r\n  /** @type {number} */\r\n  let index\r\n  /** @type {Code} */\r\n  let markerB\r\n  return start\r\n\r\n  /**\r\n   * Start of HTML (flow).\r\n   *\r\n   * ```markdown\r\n   * > | <x />\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    // To do: parse indent like `markdown-rs`.\r\n    return before(code)\r\n  }\r\n\r\n  /**\r\n   * At `<`, after optional whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | <x />\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function before(code) {\r\n    effects.enter('htmlFlow')\r\n    effects.enter('htmlFlowData')\r\n    effects.consume(code)\r\n    return open\r\n  }\r\n\r\n  /**\r\n   * After `<`, at tag name or other stuff.\r\n   *\r\n   * ```markdown\r\n   * > | <x />\r\n   *      ^\r\n   * > | <!doctype>\r\n   *      ^\r\n   * > | <!--xxx-->\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function open(code) {\r\n    if (code === 33) {\r\n      effects.consume(code)\r\n      return declarationOpen\r\n    }\r\n    if (code === 47) {\r\n      effects.consume(code)\r\n      closingTag = true\r\n      return tagCloseStart\r\n    }\r\n    if (code === 63) {\r\n      effects.consume(code)\r\n      marker = 3\r\n      // To do:\r\n      // tokenizer.concrete = true\r\n      // To do: use `markdown-rs` style interrupt.\r\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\r\n      // right now, so we do need to search for `>`, similar to declarations.\r\n      return self.interrupt ? ok : continuationDeclarationInside\r\n    }\r\n\r\n    // ASCII alphabetical.\r\n    if (asciiAlpha(code)) {\r\n      effects.consume(code)\r\n      // @ts-expect-error: not null.\r\n      buffer = String.fromCharCode(code)\r\n      return tagName\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `<!`, at declaration, comment, or CDATA.\r\n   *\r\n   * ```markdown\r\n   * > | <!doctype>\r\n   *       ^\r\n   * > | <!--xxx-->\r\n   *       ^\r\n   * > | <![CDATA[>&<]]>\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function declarationOpen(code) {\r\n    if (code === 45) {\r\n      effects.consume(code)\r\n      marker = 2\r\n      return commentOpenInside\r\n    }\r\n    if (code === 91) {\r\n      effects.consume(code)\r\n      marker = 5\r\n      index = 0\r\n      return cdataOpenInside\r\n    }\r\n\r\n    // ASCII alphabetical.\r\n    if (asciiAlpha(code)) {\r\n      effects.consume(code)\r\n      marker = 4\r\n      // // Do not form containers.\r\n      // tokenizer.concrete = true\r\n      return self.interrupt ? ok : continuationDeclarationInside\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `<!-`, inside a comment, at another `-`.\r\n   *\r\n   * ```markdown\r\n   * > | <!--xxx-->\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function commentOpenInside(code) {\r\n    if (code === 45) {\r\n      effects.consume(code)\r\n      // // Do not form containers.\r\n      // tokenizer.concrete = true\r\n      return self.interrupt ? ok : continuationDeclarationInside\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `<![`, inside CDATA, expecting `CDATA[`.\r\n   *\r\n   * ```markdown\r\n   * > | <![CDATA[>&<]]>\r\n   *        ^^^^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function cdataOpenInside(code) {\r\n    const value = 'CDATA['\r\n    if (code === value.charCodeAt(index++)) {\r\n      effects.consume(code)\r\n      if (index === value.length) {\r\n        // // Do not form containers.\r\n        // tokenizer.concrete = true\r\n        return self.interrupt ? ok : continuation\r\n      }\r\n      return cdataOpenInside\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `</`, in closing tag, at tag name.\r\n   *\r\n   * ```markdown\r\n   * > | </x>\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagCloseStart(code) {\r\n    if (asciiAlpha(code)) {\r\n      effects.consume(code)\r\n      // @ts-expect-error: not null.\r\n      buffer = String.fromCharCode(code)\r\n      return tagName\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In tag name.\r\n   *\r\n   * ```markdown\r\n   * > | <ab>\r\n   *      ^^\r\n   * > | </ab>\r\n   *       ^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagName(code) {\r\n    if (\r\n      code === null ||\r\n      code === 47 ||\r\n      code === 62 ||\r\n      markdownLineEndingOrSpace(code)\r\n    ) {\r\n      const slash = code === 47\r\n      const name = buffer.toLowerCase()\r\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\r\n        marker = 1\r\n        // // Do not form containers.\r\n        // tokenizer.concrete = true\r\n        return self.interrupt ? ok(code) : continuation(code)\r\n      }\r\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\r\n        marker = 6\r\n        if (slash) {\r\n          effects.consume(code)\r\n          return basicSelfClosing\r\n        }\r\n\r\n        // // Do not form containers.\r\n        // tokenizer.concrete = true\r\n        return self.interrupt ? ok(code) : continuation(code)\r\n      }\r\n      marker = 7\r\n      // Do not support complete HTML when interrupting.\r\n      return self.interrupt && !self.parser.lazy[self.now().line]\r\n        ? nok(code)\r\n        : closingTag\r\n        ? completeClosingTagAfter(code)\r\n        : completeAttributeNameBefore(code)\r\n    }\r\n\r\n    // ASCII alphanumerical and `-`.\r\n    if (code === 45 || asciiAlphanumeric(code)) {\r\n      effects.consume(code)\r\n      buffer += String.fromCharCode(code)\r\n      return tagName\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After closing slash of a basic tag name.\r\n   *\r\n   * ```markdown\r\n   * > | <div/>\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function basicSelfClosing(code) {\r\n    if (code === 62) {\r\n      effects.consume(code)\r\n      // // Do not form containers.\r\n      // tokenizer.concrete = true\r\n      return self.interrupt ? ok : continuation\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After closing slash of a complete tag name.\r\n   *\r\n   * ```markdown\r\n   * > | <x/>\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeClosingTagAfter(code) {\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code)\r\n      return completeClosingTagAfter\r\n    }\r\n    return completeEnd(code)\r\n  }\r\n\r\n  /**\r\n   * At an attribute name.\r\n   *\r\n   * At first, this state is used after a complete tag name, after whitespace,\r\n   * where it expects optional attributes or the end of the tag.\r\n   * It is also reused after attributes, when expecting more optional\r\n   * attributes.\r\n   *\r\n   * ```markdown\r\n   * > | <a />\r\n   *        ^\r\n   * > | <a :b>\r\n   *        ^\r\n   * > | <a _b>\r\n   *        ^\r\n   * > | <a b>\r\n   *        ^\r\n   * > | <a >\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeNameBefore(code) {\r\n    if (code === 47) {\r\n      effects.consume(code)\r\n      return completeEnd\r\n    }\r\n\r\n    // ASCII alphanumerical and `:` and `_`.\r\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\r\n      effects.consume(code)\r\n      return completeAttributeName\r\n    }\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code)\r\n      return completeAttributeNameBefore\r\n    }\r\n    return completeEnd(code)\r\n  }\r\n\r\n  /**\r\n   * In attribute name.\r\n   *\r\n   * ```markdown\r\n   * > | <a :b>\r\n   *         ^\r\n   * > | <a _b>\r\n   *         ^\r\n   * > | <a b>\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeName(code) {\r\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\r\n    if (\r\n      code === 45 ||\r\n      code === 46 ||\r\n      code === 58 ||\r\n      code === 95 ||\r\n      asciiAlphanumeric(code)\r\n    ) {\r\n      effects.consume(code)\r\n      return completeAttributeName\r\n    }\r\n    return completeAttributeNameAfter(code)\r\n  }\r\n\r\n  /**\r\n   * After attribute name, at an optional initializer, the end of the tag, or\r\n   * whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | <a b>\r\n   *         ^\r\n   * > | <a b=c>\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeNameAfter(code) {\r\n    if (code === 61) {\r\n      effects.consume(code)\r\n      return completeAttributeValueBefore\r\n    }\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code)\r\n      return completeAttributeNameAfter\r\n    }\r\n    return completeAttributeNameBefore(code)\r\n  }\r\n\r\n  /**\r\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\r\n   * whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | <a b=c>\r\n   *          ^\r\n   * > | <a b=\"c\">\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeValueBefore(code) {\r\n    if (\r\n      code === null ||\r\n      code === 60 ||\r\n      code === 61 ||\r\n      code === 62 ||\r\n      code === 96\r\n    ) {\r\n      return nok(code)\r\n    }\r\n    if (code === 34 || code === 39) {\r\n      effects.consume(code)\r\n      markerB = code\r\n      return completeAttributeValueQuoted\r\n    }\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code)\r\n      return completeAttributeValueBefore\r\n    }\r\n    return completeAttributeValueUnquoted(code)\r\n  }\r\n\r\n  /**\r\n   * In double or single quoted attribute value.\r\n   *\r\n   * ```markdown\r\n   * > | <a b=\"c\">\r\n   *           ^\r\n   * > | <a b='c'>\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeValueQuoted(code) {\r\n    if (code === markerB) {\r\n      effects.consume(code)\r\n      markerB = null\r\n      return completeAttributeValueQuotedAfter\r\n    }\r\n    if (code === null || markdownLineEnding(code)) {\r\n      return nok(code)\r\n    }\r\n    effects.consume(code)\r\n    return completeAttributeValueQuoted\r\n  }\r\n\r\n  /**\r\n   * In unquoted attribute value.\r\n   *\r\n   * ```markdown\r\n   * > | <a b=c>\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeValueUnquoted(code) {\r\n    if (\r\n      code === null ||\r\n      code === 34 ||\r\n      code === 39 ||\r\n      code === 47 ||\r\n      code === 60 ||\r\n      code === 61 ||\r\n      code === 62 ||\r\n      code === 96 ||\r\n      markdownLineEndingOrSpace(code)\r\n    ) {\r\n      return completeAttributeNameAfter(code)\r\n    }\r\n    effects.consume(code)\r\n    return completeAttributeValueUnquoted\r\n  }\r\n\r\n  /**\r\n   * After double or single quoted attribute value, before whitespace or the\r\n   * end of the tag.\r\n   *\r\n   * ```markdown\r\n   * > | <a b=\"c\">\r\n   *            ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeValueQuotedAfter(code) {\r\n    if (code === 47 || code === 62 || markdownSpace(code)) {\r\n      return completeAttributeNameBefore(code)\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In certain circumstances of a complete tag where only an `>` is allowed.\r\n   *\r\n   * ```markdown\r\n   * > | <a b=\"c\">\r\n   *             ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeEnd(code) {\r\n    if (code === 62) {\r\n      effects.consume(code)\r\n      return completeAfter\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `>` in a complete tag.\r\n   *\r\n   * ```markdown\r\n   * > | <x>\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAfter(code) {\r\n    if (code === null || markdownLineEnding(code)) {\r\n      // // Do not form containers.\r\n      // tokenizer.concrete = true\r\n      return continuation(code)\r\n    }\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code)\r\n      return completeAfter\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In continuation of any HTML kind.\r\n   *\r\n   * ```markdown\r\n   * > | <!--xxx-->\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuation(code) {\r\n    if (code === 45 && marker === 2) {\r\n      effects.consume(code)\r\n      return continuationCommentInside\r\n    }\r\n    if (code === 60 && marker === 1) {\r\n      effects.consume(code)\r\n      return continuationRawTagOpen\r\n    }\r\n    if (code === 62 && marker === 4) {\r\n      effects.consume(code)\r\n      return continuationClose\r\n    }\r\n    if (code === 63 && marker === 3) {\r\n      effects.consume(code)\r\n      return continuationDeclarationInside\r\n    }\r\n    if (code === 93 && marker === 5) {\r\n      effects.consume(code)\r\n      return continuationCdataInside\r\n    }\r\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\r\n      effects.exit('htmlFlowData')\r\n      return effects.check(\r\n        blankLineBefore,\r\n        continuationAfter,\r\n        continuationStart\r\n      )(code)\r\n    }\r\n    if (code === null || markdownLineEnding(code)) {\r\n      effects.exit('htmlFlowData')\r\n      return continuationStart(code)\r\n    }\r\n    effects.consume(code)\r\n    return continuation\r\n  }\r\n\r\n  /**\r\n   * In continuation, at eol.\r\n   *\r\n   * ```markdown\r\n   * > | <x>\r\n   *        ^\r\n   *   | asd\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationStart(code) {\r\n    return effects.check(\r\n      nonLazyContinuationStart,\r\n      continuationStartNonLazy,\r\n      continuationAfter\r\n    )(code)\r\n  }\r\n\r\n  /**\r\n   * In continuation, at eol, before non-lazy content.\r\n   *\r\n   * ```markdown\r\n   * > | <x>\r\n   *        ^\r\n   *   | asd\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationStartNonLazy(code) {\r\n    effects.enter('lineEnding')\r\n    effects.consume(code)\r\n    effects.exit('lineEnding')\r\n    return continuationBefore\r\n  }\r\n\r\n  /**\r\n   * In continuation, before non-lazy content.\r\n   *\r\n   * ```markdown\r\n   *   | <x>\r\n   * > | asd\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationBefore(code) {\r\n    if (code === null || markdownLineEnding(code)) {\r\n      return continuationStart(code)\r\n    }\r\n    effects.enter('htmlFlowData')\r\n    return continuation(code)\r\n  }\r\n\r\n  /**\r\n   * In comment continuation, after one `-`, expecting another.\r\n   *\r\n   * ```markdown\r\n   * > | <!--xxx-->\r\n   *             ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationCommentInside(code) {\r\n    if (code === 45) {\r\n      effects.consume(code)\r\n      return continuationDeclarationInside\r\n    }\r\n    return continuation(code)\r\n  }\r\n\r\n  /**\r\n   * In raw continuation, after `<`, at `/`.\r\n   *\r\n   * ```markdown\r\n   * > | <script>console.log(1)</script>\r\n   *                            ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationRawTagOpen(code) {\r\n    if (code === 47) {\r\n      effects.consume(code)\r\n      buffer = ''\r\n      return continuationRawEndTag\r\n    }\r\n    return continuation(code)\r\n  }\r\n\r\n  /**\r\n   * In raw continuation, after `</`, in a raw tag name.\r\n   *\r\n   * ```markdown\r\n   * > | <script>console.log(1)</script>\r\n   *                             ^^^^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationRawEndTag(code) {\r\n    if (code === 62) {\r\n      const name = buffer.toLowerCase()\r\n      if (htmlRawNames.includes(name)) {\r\n        effects.consume(code)\r\n        return continuationClose\r\n      }\r\n      return continuation(code)\r\n    }\r\n    if (asciiAlpha(code) && buffer.length < 8) {\r\n      effects.consume(code)\r\n      // @ts-expect-error: not null.\r\n      buffer += String.fromCharCode(code)\r\n      return continuationRawEndTag\r\n    }\r\n    return continuation(code)\r\n  }\r\n\r\n  /**\r\n   * In cdata continuation, after `]`, expecting `]>`.\r\n   *\r\n   * ```markdown\r\n   * > | <![CDATA[>&<]]>\r\n   *                  ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationCdataInside(code) {\r\n    if (code === 93) {\r\n      effects.consume(code)\r\n      return continuationDeclarationInside\r\n    }\r\n    return continuation(code)\r\n  }\r\n\r\n  /**\r\n   * In declaration or instruction continuation, at `>`.\r\n   *\r\n   * ```markdown\r\n   * > | <!-->\r\n   *         ^\r\n   * > | <?>\r\n   *       ^\r\n   * > | <!q>\r\n   *        ^\r\n   * > | <!--ab-->\r\n   *             ^\r\n   * > | <![CDATA[>&<]]>\r\n   *                   ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationDeclarationInside(code) {\r\n    if (code === 62) {\r\n      effects.consume(code)\r\n      return continuationClose\r\n    }\r\n\r\n    // More dashes.\r\n    if (code === 45 && marker === 2) {\r\n      effects.consume(code)\r\n      return continuationDeclarationInside\r\n    }\r\n    return continuation(code)\r\n  }\r\n\r\n  /**\r\n   * In closed continuation: everything we get until the eol/eof is part of it.\r\n   *\r\n   * ```markdown\r\n   * > | <!doctype>\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationClose(code) {\r\n    if (code === null || markdownLineEnding(code)) {\r\n      effects.exit('htmlFlowData')\r\n      return continuationAfter(code)\r\n    }\r\n    effects.consume(code)\r\n    return continuationClose\r\n  }\r\n\r\n  /**\r\n   * Done.\r\n   *\r\n   * ```markdown\r\n   * > | <!doctype>\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationAfter(code) {\r\n    effects.exit('htmlFlow')\r\n    // // Feel free to interrupt.\r\n    // tokenizer.interrupt = false\r\n    // // No longer concrete.\r\n    // tokenizer.concrete = false\r\n    return ok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\r\n  const self = this\r\n  return start\r\n\r\n  /**\r\n   * At eol, before continuation.\r\n   *\r\n   * ```markdown\r\n   * > | * ```js\r\n   *            ^\r\n   *   | b\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    if (markdownLineEnding(code)) {\r\n      effects.enter('lineEnding')\r\n      effects.consume(code)\r\n      effects.exit('lineEnding')\r\n      return after\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * A continuation.\r\n   *\r\n   * ```markdown\r\n   *   | * ```js\r\n   * > | b\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\r\n  return start\r\n\r\n  /**\r\n   * Before eol, expecting blank line.\r\n   *\r\n   * ```markdown\r\n   * > | <div>\r\n   *          ^\r\n   *   |\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    effects.enter('lineEnding')\r\n    effects.consume(code)\r\n    effects.exit('lineEnding')\r\n    return effects.attempt(blankLine, ok, nok)\r\n  }\r\n}\r\n","/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\r\n/** @type {Construct} */\r\nconst nonLazyContinuation = {\r\n  tokenize: tokenizeNonLazyContinuation,\r\n  partial: true\r\n}\r\n\r\n/** @type {Construct} */\r\nexport const codeFenced = {\r\n  name: 'codeFenced',\r\n  tokenize: tokenizeCodeFenced,\r\n  concrete: true\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeCodeFenced(effects, ok, nok) {\r\n  const self = this\r\n  /** @type {Construct} */\r\n  const closeStart = {\r\n    tokenize: tokenizeCloseStart,\r\n    partial: true\r\n  }\r\n  let initialPrefix = 0\r\n  let sizeOpen = 0\r\n  /** @type {NonNullable<Code>} */\r\n  let marker\r\n  return start\r\n\r\n  /**\r\n   * Start of code.\r\n   *\r\n   * ```markdown\r\n   * > | ~~~js\r\n   *     ^\r\n   *   | alert(1)\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    // To do: parse whitespace like `markdown-rs`.\r\n    return beforeSequenceOpen(code)\r\n  }\r\n\r\n  /**\r\n   * In opening fence, after prefix, at sequence.\r\n   *\r\n   * ```markdown\r\n   * > | ~~~js\r\n   *     ^\r\n   *   | alert(1)\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function beforeSequenceOpen(code) {\r\n    const tail = self.events[self.events.length - 1]\r\n    initialPrefix =\r\n      tail && tail[1].type === 'linePrefix'\r\n        ? tail[2].sliceSerialize(tail[1], true).length\r\n        : 0\r\n    marker = code\r\n    effects.enter('codeFenced')\r\n    effects.enter('codeFencedFence')\r\n    effects.enter('codeFencedFenceSequence')\r\n    return sequenceOpen(code)\r\n  }\r\n\r\n  /**\r\n   * In opening fence sequence.\r\n   *\r\n   * ```markdown\r\n   * > | ~~~js\r\n   *      ^\r\n   *   | alert(1)\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function sequenceOpen(code) {\r\n    if (code === marker) {\r\n      sizeOpen++\r\n      effects.consume(code)\r\n      return sequenceOpen\r\n    }\r\n    if (sizeOpen < 3) {\r\n      return nok(code)\r\n    }\r\n    effects.exit('codeFencedFenceSequence')\r\n    return markdownSpace(code)\r\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\r\n      : infoBefore(code)\r\n  }\r\n\r\n  /**\r\n   * In opening fence, after the sequence (and optional whitespace), before info.\r\n   *\r\n   * ```markdown\r\n   * > | ~~~js\r\n   *        ^\r\n   *   | alert(1)\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function infoBefore(code) {\r\n    if (code === null || markdownLineEnding(code)) {\r\n      effects.exit('codeFencedFence')\r\n      return self.interrupt\r\n        ? ok(code)\r\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\r\n    }\r\n    effects.enter('codeFencedFenceInfo')\r\n    effects.enter('chunkString', {\r\n      contentType: 'string'\r\n    })\r\n    return info(code)\r\n  }\r\n\r\n  /**\r\n   * In info.\r\n   *\r\n   * ```markdown\r\n   * > | ~~~js\r\n   *        ^\r\n   *   | alert(1)\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function info(code) {\r\n    if (code === null || markdownLineEnding(code)) {\r\n      effects.exit('chunkString')\r\n      effects.exit('codeFencedFenceInfo')\r\n      return infoBefore(code)\r\n    }\r\n    if (markdownSpace(code)) {\r\n      effects.exit('chunkString')\r\n      effects.exit('codeFencedFenceInfo')\r\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\r\n    }\r\n    if (code === 96 && code === marker) {\r\n      return nok(code)\r\n    }\r\n    effects.consume(code)\r\n    return info\r\n  }\r\n\r\n  /**\r\n   * In opening fence, after info and whitespace, before meta.\r\n   *\r\n   * ```markdown\r\n   * > | ~~~js eval\r\n   *           ^\r\n   *   | alert(1)\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function metaBefore(code) {\r\n    if (code === null || markdownLineEnding(code)) {\r\n      return infoBefore(code)\r\n    }\r\n    effects.enter('codeFencedFenceMeta')\r\n    effects.enter('chunkString', {\r\n      contentType: 'string'\r\n    })\r\n    return meta(code)\r\n  }\r\n\r\n  /**\r\n   * In meta.\r\n   *\r\n   * ```markdown\r\n   * > | ~~~js eval\r\n   *           ^\r\n   *   | alert(1)\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function meta(code) {\r\n    if (code === null || markdownLineEnding(code)) {\r\n      effects.exit('chunkString')\r\n      effects.exit('codeFencedFenceMeta')\r\n      return infoBefore(code)\r\n    }\r\n    if (code === 96 && code === marker) {\r\n      return nok(code)\r\n    }\r\n    effects.consume(code)\r\n    return meta\r\n  }\r\n\r\n  /**\r\n   * At eol/eof in code, before a non-lazy closing fence or content.\r\n   *\r\n   * ```markdown\r\n   * > | ~~~js\r\n   *          ^\r\n   * > | alert(1)\r\n   *             ^\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function atNonLazyBreak(code) {\r\n    return effects.attempt(closeStart, after, contentBefore)(code)\r\n  }\r\n\r\n  /**\r\n   * Before code content, not a closing fence, at eol.\r\n   *\r\n   * ```markdown\r\n   *   | ~~~js\r\n   * > | alert(1)\r\n   *             ^\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function contentBefore(code) {\r\n    effects.enter('lineEnding')\r\n    effects.consume(code)\r\n    effects.exit('lineEnding')\r\n    return contentStart\r\n  }\r\n\r\n  /**\r\n   * Before code content, not a closing fence.\r\n   *\r\n   * ```markdown\r\n   *   | ~~~js\r\n   * > | alert(1)\r\n   *     ^\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function contentStart(code) {\r\n    return initialPrefix > 0 && markdownSpace(code)\r\n      ? factorySpace(\r\n          effects,\r\n          beforeContentChunk,\r\n          'linePrefix',\r\n          initialPrefix + 1\r\n        )(code)\r\n      : beforeContentChunk(code)\r\n  }\r\n\r\n  /**\r\n   * Before code content, after optional prefix.\r\n   *\r\n   * ```markdown\r\n   *   | ~~~js\r\n   * > | alert(1)\r\n   *     ^\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function beforeContentChunk(code) {\r\n    if (code === null || markdownLineEnding(code)) {\r\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\r\n    }\r\n    effects.enter('codeFlowValue')\r\n    return contentChunk(code)\r\n  }\r\n\r\n  /**\r\n   * In code content.\r\n   *\r\n   * ```markdown\r\n   *   | ~~~js\r\n   * > | alert(1)\r\n   *     ^^^^^^^^\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function contentChunk(code) {\r\n    if (code === null || markdownLineEnding(code)) {\r\n      effects.exit('codeFlowValue')\r\n      return beforeContentChunk(code)\r\n    }\r\n    effects.consume(code)\r\n    return contentChunk\r\n  }\r\n\r\n  /**\r\n   * After code.\r\n   *\r\n   * ```markdown\r\n   *   | ~~~js\r\n   *   | alert(1)\r\n   * > | ~~~\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    effects.exit('codeFenced')\r\n    return ok(code)\r\n  }\r\n\r\n  /**\r\n   * @this {TokenizeContext}\r\n   * @type {Tokenizer}\r\n   */\r\n  function tokenizeCloseStart(effects, ok, nok) {\r\n    let size = 0\r\n    return startBefore\r\n\r\n    /**\r\n     *\r\n     *\r\n     * @type {State}\r\n     */\r\n    function startBefore(code) {\r\n      effects.enter('lineEnding')\r\n      effects.consume(code)\r\n      effects.exit('lineEnding')\r\n      return start\r\n    }\r\n\r\n    /**\r\n     * Before closing fence, at optional whitespace.\r\n     *\r\n     * ```markdown\r\n     *   | ~~~js\r\n     *   | alert(1)\r\n     * > | ~~~\r\n     *     ^\r\n     * ```\r\n     *\r\n     * @type {State}\r\n     */\r\n    function start(code) {\r\n      // Always populated by defaults.\r\n\r\n      // To do: `enter` here or in next state?\r\n      effects.enter('codeFencedFence')\r\n      return markdownSpace(code)\r\n        ? factorySpace(\r\n            effects,\r\n            beforeSequenceClose,\r\n            'linePrefix',\r\n            self.parser.constructs.disable.null.includes('codeIndented')\r\n              ? undefined\r\n              : 4\r\n          )(code)\r\n        : beforeSequenceClose(code)\r\n    }\r\n\r\n    /**\r\n     * In closing fence, after optional whitespace, at sequence.\r\n     *\r\n     * ```markdown\r\n     *   | ~~~js\r\n     *   | alert(1)\r\n     * > | ~~~\r\n     *     ^\r\n     * ```\r\n     *\r\n     * @type {State}\r\n     */\r\n    function beforeSequenceClose(code) {\r\n      if (code === marker) {\r\n        effects.enter('codeFencedFenceSequence')\r\n        return sequenceClose(code)\r\n      }\r\n      return nok(code)\r\n    }\r\n\r\n    /**\r\n     * In closing fence sequence.\r\n     *\r\n     * ```markdown\r\n     *   | ~~~js\r\n     *   | alert(1)\r\n     * > | ~~~\r\n     *     ^\r\n     * ```\r\n     *\r\n     * @type {State}\r\n     */\r\n    function sequenceClose(code) {\r\n      if (code === marker) {\r\n        size++\r\n        effects.consume(code)\r\n        return sequenceClose\r\n      }\r\n      if (size >= sizeOpen) {\r\n        effects.exit('codeFencedFenceSequence')\r\n        return markdownSpace(code)\r\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\r\n          : sequenceCloseAfter(code)\r\n      }\r\n      return nok(code)\r\n    }\r\n\r\n    /**\r\n     * After closing fence sequence, after optional whitespace.\r\n     *\r\n     * ```markdown\r\n     *   | ~~~js\r\n     *   | alert(1)\r\n     * > | ~~~\r\n     *        ^\r\n     * ```\r\n     *\r\n     * @type {State}\r\n     */\r\n    function sequenceCloseAfter(code) {\r\n      if (code === null || markdownLineEnding(code)) {\r\n        effects.exit('codeFencedFence')\r\n        return ok(code)\r\n      }\r\n      return nok(code)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\r\n  const self = this\r\n  return start\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    if (code === null) {\r\n      return nok(code)\r\n    }\r\n    effects.enter('lineEnding')\r\n    effects.consume(code)\r\n    effects.exit('lineEnding')\r\n    return lineStart\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @type {State}\r\n   */\r\n  function lineStart(code) {\r\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\r\n  }\r\n}\r\n","/// <reference lib=\"dom\" />\r\n\r\n/* eslint-env browser */\r\n\r\nconst element = document.createElement('i')\r\n\r\n/**\r\n * @param {string} value\r\n * @returns {string|false}\r\n */\r\nexport function decodeNamedCharacterReference(value) {\r\n  const characterReference = '&' + value + ';'\r\n  element.innerHTML = characterReference\r\n  const char = element.textContent\r\n\r\n  // Some named character references do not require the closing semicolon\r\n  // (`&not`, for instance), which leads to situations where parsing the assumed\r\n  // named reference of `&notit;` will result in the string `¬it;`.\r\n  // When we encounter a trailing semicolon after parsing, and the character\r\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\r\n  // matching was not complete.\r\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\r\n  // yield `null`.\r\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\r\n    return false\r\n  }\r\n\r\n  // If the decoded string is equal to the input, the character reference was\r\n  // not valid.\r\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\r\n  // yield `null`.\r\n  return char === characterReference ? false : char\r\n}\r\n","/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\r\nimport {\r\n  asciiAlphanumeric,\r\n  asciiDigit,\r\n  asciiHexDigit\r\n} from 'micromark-util-character'\r\n/** @type {Construct} */\r\nexport const characterReference = {\r\n  name: 'characterReference',\r\n  tokenize: tokenizeCharacterReference\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeCharacterReference(effects, ok, nok) {\r\n  const self = this\r\n  let size = 0\r\n  /** @type {number} */\r\n  let max\r\n  /** @type {(code: Code) => boolean} */\r\n  let test\r\n  return start\r\n\r\n  /**\r\n   * Start of character reference.\r\n   *\r\n   * ```markdown\r\n   * > | a&amp;b\r\n   *      ^\r\n   * > | a&#123;b\r\n   *      ^\r\n   * > | a&#x9;b\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    effects.enter('characterReference')\r\n    effects.enter('characterReferenceMarker')\r\n    effects.consume(code)\r\n    effects.exit('characterReferenceMarker')\r\n    return open\r\n  }\r\n\r\n  /**\r\n   * After `&`, at `#` for numeric references or alphanumeric for named\r\n   * references.\r\n   *\r\n   * ```markdown\r\n   * > | a&amp;b\r\n   *       ^\r\n   * > | a&#123;b\r\n   *       ^\r\n   * > | a&#x9;b\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function open(code) {\r\n    if (code === 35) {\r\n      effects.enter('characterReferenceMarkerNumeric')\r\n      effects.consume(code)\r\n      effects.exit('characterReferenceMarkerNumeric')\r\n      return numeric\r\n    }\r\n    effects.enter('characterReferenceValue')\r\n    max = 31\r\n    test = asciiAlphanumeric\r\n    return value(code)\r\n  }\r\n\r\n  /**\r\n   * After `#`, at `x` for hexadecimals or digit for decimals.\r\n   *\r\n   * ```markdown\r\n   * > | a&#123;b\r\n   *        ^\r\n   * > | a&#x9;b\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function numeric(code) {\r\n    if (code === 88 || code === 120) {\r\n      effects.enter('characterReferenceMarkerHexadecimal')\r\n      effects.consume(code)\r\n      effects.exit('characterReferenceMarkerHexadecimal')\r\n      effects.enter('characterReferenceValue')\r\n      max = 6\r\n      test = asciiHexDigit\r\n      return value\r\n    }\r\n    effects.enter('characterReferenceValue')\r\n    max = 7\r\n    test = asciiDigit\r\n    return value(code)\r\n  }\r\n\r\n  /**\r\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\r\n   *\r\n   * The character reference kind defines what and how many characters are\r\n   * allowed.\r\n   *\r\n   * ```markdown\r\n   * > | a&amp;b\r\n   *       ^^^\r\n   * > | a&#123;b\r\n   *        ^^^\r\n   * > | a&#x9;b\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function value(code) {\r\n    if (code === 59 && size) {\r\n      const token = effects.exit('characterReferenceValue')\r\n      if (\r\n        test === asciiAlphanumeric &&\r\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\r\n      ) {\r\n        return nok(code)\r\n      }\r\n\r\n      // To do: `markdown-rs` uses a different name:\r\n      // `CharacterReferenceMarkerSemi`.\r\n      effects.enter('characterReferenceMarker')\r\n      effects.consume(code)\r\n      effects.exit('characterReferenceMarker')\r\n      effects.exit('characterReference')\r\n      return ok\r\n    }\r\n    if (test(code) && size++ < max) {\r\n      effects.consume(code)\r\n      return value\r\n    }\r\n    return nok(code)\r\n  }\r\n}\r\n","/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {asciiPunctuation} from 'micromark-util-character'\r\n/** @type {Construct} */\r\nexport const characterEscape = {\r\n  name: 'characterEscape',\r\n  tokenize: tokenizeCharacterEscape\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeCharacterEscape(effects, ok, nok) {\r\n  return start\r\n\r\n  /**\r\n   * Start of character escape.\r\n   *\r\n   * ```markdown\r\n   * > | a\\*b\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    effects.enter('characterEscape')\r\n    effects.enter('escapeMarker')\r\n    effects.consume(code)\r\n    effects.exit('escapeMarker')\r\n    return inside\r\n  }\r\n\r\n  /**\r\n   * After `\\`, at punctuation.\r\n   *\r\n   * ```markdown\r\n   * > | a\\*b\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function inside(code) {\r\n    // ASCII punctuation.\r\n    if (asciiPunctuation(code)) {\r\n      effects.enter('characterEscapeValue')\r\n      effects.consume(code)\r\n      effects.exit('characterEscapeValue')\r\n      effects.exit('characterEscape')\r\n      return ok\r\n    }\r\n    return nok(code)\r\n  }\r\n}\r\n","/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding} from 'micromark-util-character'\r\n/** @type {Construct} */\r\nexport const lineEnding = {\r\n  name: 'lineEnding',\r\n  tokenize: tokenizeLineEnding\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeLineEnding(effects, ok) {\r\n  return start\r\n\r\n  /** @type {State} */\r\n  function start(code) {\r\n    effects.enter('lineEnding')\r\n    effects.consume(code)\r\n    effects.exit('lineEnding')\r\n    return factorySpace(effects, ok, 'linePrefix')\r\n  }\r\n}\r\n","/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').Event} Event\r\n * @typedef {import('micromark-util-types').Resolver} Resolver\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').Token} Token\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factoryDestination} from 'micromark-factory-destination'\r\nimport {factoryLabel} from 'micromark-factory-label'\r\nimport {factoryTitle} from 'micromark-factory-title'\r\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\r\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\r\nimport {push, splice} from 'micromark-util-chunked'\r\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\r\nimport {resolveAll} from 'micromark-util-resolve-all'\r\n/** @type {Construct} */\r\nexport const labelEnd = {\r\n  name: 'labelEnd',\r\n  tokenize: tokenizeLabelEnd,\r\n  resolveTo: resolveToLabelEnd,\r\n  resolveAll: resolveAllLabelEnd\r\n}\r\n\r\n/** @type {Construct} */\r\nconst resourceConstruct = {\r\n  tokenize: tokenizeResource\r\n}\r\n/** @type {Construct} */\r\nconst referenceFullConstruct = {\r\n  tokenize: tokenizeReferenceFull\r\n}\r\n/** @type {Construct} */\r\nconst referenceCollapsedConstruct = {\r\n  tokenize: tokenizeReferenceCollapsed\r\n}\r\n\r\n/** @type {Resolver} */\r\nfunction resolveAllLabelEnd(events) {\r\n  let index = -1\r\n  while (++index < events.length) {\r\n    const token = events[index][1]\r\n    if (\r\n      token.type === 'labelImage' ||\r\n      token.type === 'labelLink' ||\r\n      token.type === 'labelEnd'\r\n    ) {\r\n      // Remove the marker.\r\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\r\n      token.type = 'data'\r\n      index++\r\n    }\r\n  }\r\n  return events\r\n}\r\n\r\n/** @type {Resolver} */\r\nfunction resolveToLabelEnd(events, context) {\r\n  let index = events.length\r\n  let offset = 0\r\n  /** @type {Token} */\r\n  let token\r\n  /** @type {number | undefined} */\r\n  let open\r\n  /** @type {number | undefined} */\r\n  let close\r\n  /** @type {Array<Event>} */\r\n  let media\r\n\r\n  // Find an opening.\r\n  while (index--) {\r\n    token = events[index][1]\r\n    if (open) {\r\n      // If we see another link, or inactive link label, we’ve been here before.\r\n      if (\r\n        token.type === 'link' ||\r\n        (token.type === 'labelLink' && token._inactive)\r\n      ) {\r\n        break\r\n      }\r\n\r\n      // Mark other link openings as inactive, as we can’t have links in\r\n      // links.\r\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\r\n        token._inactive = true\r\n      }\r\n    } else if (close) {\r\n      if (\r\n        events[index][0] === 'enter' &&\r\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\r\n        !token._balanced\r\n      ) {\r\n        open = index\r\n        if (token.type !== 'labelLink') {\r\n          offset = 2\r\n          break\r\n        }\r\n      }\r\n    } else if (token.type === 'labelEnd') {\r\n      close = index\r\n    }\r\n  }\r\n  const group = {\r\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\r\n    start: Object.assign({}, events[open][1].start),\r\n    end: Object.assign({}, events[events.length - 1][1].end)\r\n  }\r\n  const label = {\r\n    type: 'label',\r\n    start: Object.assign({}, events[open][1].start),\r\n    end: Object.assign({}, events[close][1].end)\r\n  }\r\n  const text = {\r\n    type: 'labelText',\r\n    start: Object.assign({}, events[open + offset + 2][1].end),\r\n    end: Object.assign({}, events[close - 2][1].start)\r\n  }\r\n  media = [\r\n    ['enter', group, context],\r\n    ['enter', label, context]\r\n  ]\r\n\r\n  // Opening marker.\r\n  media = push(media, events.slice(open + 1, open + offset + 3))\r\n\r\n  // Text open.\r\n  media = push(media, [['enter', text, context]])\r\n\r\n  // Always populated by defaults.\r\n\r\n  // Between.\r\n  media = push(\r\n    media,\r\n    resolveAll(\r\n      context.parser.constructs.insideSpan.null,\r\n      events.slice(open + offset + 4, close - 3),\r\n      context\r\n    )\r\n  )\r\n\r\n  // Text close, marker close, label close.\r\n  media = push(media, [\r\n    ['exit', text, context],\r\n    events[close - 2],\r\n    events[close - 1],\r\n    ['exit', label, context]\r\n  ])\r\n\r\n  // Reference, resource, or so.\r\n  media = push(media, events.slice(close + 1))\r\n\r\n  // Media close.\r\n  media = push(media, [['exit', group, context]])\r\n  splice(events, open, events.length, media)\r\n  return events\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeLabelEnd(effects, ok, nok) {\r\n  const self = this\r\n  let index = self.events.length\r\n  /** @type {Token} */\r\n  let labelStart\r\n  /** @type {boolean} */\r\n  let defined\r\n\r\n  // Find an opening.\r\n  while (index--) {\r\n    if (\r\n      (self.events[index][1].type === 'labelImage' ||\r\n        self.events[index][1].type === 'labelLink') &&\r\n      !self.events[index][1]._balanced\r\n    ) {\r\n      labelStart = self.events[index][1]\r\n      break\r\n    }\r\n  }\r\n  return start\r\n\r\n  /**\r\n   * Start of label end.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b) c\r\n   *       ^\r\n   * > | [a][b] c\r\n   *       ^\r\n   * > | [a][] b\r\n   *       ^\r\n   * > | [a] b\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    // If there is not an okay opening.\r\n    if (!labelStart) {\r\n      return nok(code)\r\n    }\r\n\r\n    // If the corresponding label (link) start is marked as inactive,\r\n    // it means we’d be wrapping a link, like this:\r\n    //\r\n    // ```markdown\r\n    // > | a [b [c](d) e](f) g.\r\n    //                  ^\r\n    // ```\r\n    //\r\n    // We can’t have that, so it’s just balanced brackets.\r\n    if (labelStart._inactive) {\r\n      return labelEndNok(code)\r\n    }\r\n    defined = self.parser.defined.includes(\r\n      normalizeIdentifier(\r\n        self.sliceSerialize({\r\n          start: labelStart.end,\r\n          end: self.now()\r\n        })\r\n      )\r\n    )\r\n    effects.enter('labelEnd')\r\n    effects.enter('labelMarker')\r\n    effects.consume(code)\r\n    effects.exit('labelMarker')\r\n    effects.exit('labelEnd')\r\n    return after\r\n  }\r\n\r\n  /**\r\n   * After `]`.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b) c\r\n   *       ^\r\n   * > | [a][b] c\r\n   *       ^\r\n   * > | [a][] b\r\n   *       ^\r\n   * > | [a] b\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\r\n    // an extension.\r\n\r\n    // Resource (`[asd](fgh)`)?\r\n    if (code === 40) {\r\n      return effects.attempt(\r\n        resourceConstruct,\r\n        labelEndOk,\r\n        defined ? labelEndOk : labelEndNok\r\n      )(code)\r\n    }\r\n\r\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\r\n    if (code === 91) {\r\n      return effects.attempt(\r\n        referenceFullConstruct,\r\n        labelEndOk,\r\n        defined ? referenceNotFull : labelEndNok\r\n      )(code)\r\n    }\r\n\r\n    // Shortcut (`[asd]`) reference?\r\n    return defined ? labelEndOk(code) : labelEndNok(code)\r\n  }\r\n\r\n  /**\r\n   * After `]`, at `[`, but not at a full reference.\r\n   *\r\n   * > 👉 **Note**: we only get here if the label is defined.\r\n   *\r\n   * ```markdown\r\n   * > | [a][] b\r\n   *        ^\r\n   * > | [a] b\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function referenceNotFull(code) {\r\n    return effects.attempt(\r\n      referenceCollapsedConstruct,\r\n      labelEndOk,\r\n      labelEndNok\r\n    )(code)\r\n  }\r\n\r\n  /**\r\n   * Done, we found something.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b) c\r\n   *           ^\r\n   * > | [a][b] c\r\n   *           ^\r\n   * > | [a][] b\r\n   *          ^\r\n   * > | [a] b\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function labelEndOk(code) {\r\n    // Note: `markdown-rs` does a bunch of stuff here.\r\n    return ok(code)\r\n  }\r\n\r\n  /**\r\n   * Done, it’s nothing.\r\n   *\r\n   * There was an okay opening, but we didn’t match anything.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b c\r\n   *        ^\r\n   * > | [a][b c\r\n   *        ^\r\n   * > | [a] b\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function labelEndNok(code) {\r\n    labelStart._balanced = true\r\n    return nok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeResource(effects, ok, nok) {\r\n  return resourceStart\r\n\r\n  /**\r\n   * At a resource.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b) c\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function resourceStart(code) {\r\n    effects.enter('resource')\r\n    effects.enter('resourceMarker')\r\n    effects.consume(code)\r\n    effects.exit('resourceMarker')\r\n    return resourceBefore\r\n  }\r\n\r\n  /**\r\n   * In resource, after `(`, at optional whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b) c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function resourceBefore(code) {\r\n    return markdownLineEndingOrSpace(code)\r\n      ? factoryWhitespace(effects, resourceOpen)(code)\r\n      : resourceOpen(code)\r\n  }\r\n\r\n  /**\r\n   * In resource, after optional whitespace, at `)` or a destination.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b) c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function resourceOpen(code) {\r\n    if (code === 41) {\r\n      return resourceEnd(code)\r\n    }\r\n    return factoryDestination(\r\n      effects,\r\n      resourceDestinationAfter,\r\n      resourceDestinationMissing,\r\n      'resourceDestination',\r\n      'resourceDestinationLiteral',\r\n      'resourceDestinationLiteralMarker',\r\n      'resourceDestinationRaw',\r\n      'resourceDestinationString',\r\n      32\r\n    )(code)\r\n  }\r\n\r\n  /**\r\n   * In resource, after destination, at optional whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b) c\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function resourceDestinationAfter(code) {\r\n    return markdownLineEndingOrSpace(code)\r\n      ? factoryWhitespace(effects, resourceBetween)(code)\r\n      : resourceEnd(code)\r\n  }\r\n\r\n  /**\r\n   * At invalid destination.\r\n   *\r\n   * ```markdown\r\n   * > | [a](<<) b\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function resourceDestinationMissing(code) {\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In resource, after destination and whitespace, at `(` or title.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b ) c\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function resourceBetween(code) {\r\n    if (code === 34 || code === 39 || code === 40) {\r\n      return factoryTitle(\r\n        effects,\r\n        resourceTitleAfter,\r\n        nok,\r\n        'resourceTitle',\r\n        'resourceTitleMarker',\r\n        'resourceTitleString'\r\n      )(code)\r\n    }\r\n    return resourceEnd(code)\r\n  }\r\n\r\n  /**\r\n   * In resource, after title, at optional whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b \"c\") d\r\n   *              ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function resourceTitleAfter(code) {\r\n    return markdownLineEndingOrSpace(code)\r\n      ? factoryWhitespace(effects, resourceEnd)(code)\r\n      : resourceEnd(code)\r\n  }\r\n\r\n  /**\r\n   * In resource, at `)`.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b) d\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function resourceEnd(code) {\r\n    if (code === 41) {\r\n      effects.enter('resourceMarker')\r\n      effects.consume(code)\r\n      effects.exit('resourceMarker')\r\n      effects.exit('resource')\r\n      return ok\r\n    }\r\n    return nok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeReferenceFull(effects, ok, nok) {\r\n  const self = this\r\n  return referenceFull\r\n\r\n  /**\r\n   * In a reference (full), at the `[`.\r\n   *\r\n   * ```markdown\r\n   * > | [a][b] d\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function referenceFull(code) {\r\n    return factoryLabel.call(\r\n      self,\r\n      effects,\r\n      referenceFullAfter,\r\n      referenceFullMissing,\r\n      'reference',\r\n      'referenceMarker',\r\n      'referenceString'\r\n    )(code)\r\n  }\r\n\r\n  /**\r\n   * In a reference (full), after `]`.\r\n   *\r\n   * ```markdown\r\n   * > | [a][b] d\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function referenceFullAfter(code) {\r\n    return self.parser.defined.includes(\r\n      normalizeIdentifier(\r\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\r\n      )\r\n    )\r\n      ? ok(code)\r\n      : nok(code)\r\n  }\r\n\r\n  /**\r\n   * In reference (full) that was missing.\r\n   *\r\n   * ```markdown\r\n   * > | [a][b d\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function referenceFullMissing(code) {\r\n    return nok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\r\n  return referenceCollapsedStart\r\n\r\n  /**\r\n   * In reference (collapsed), at `[`.\r\n   *\r\n   * > 👉 **Note**: we only get here if the label is defined.\r\n   *\r\n   * ```markdown\r\n   * > | [a][] d\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function referenceCollapsedStart(code) {\r\n    // We only attempt a collapsed label if there’s a `[`.\r\n\r\n    effects.enter('reference')\r\n    effects.enter('referenceMarker')\r\n    effects.consume(code)\r\n    effects.exit('referenceMarker')\r\n    return referenceCollapsedOpen\r\n  }\r\n\r\n  /**\r\n   * In reference (collapsed), at `]`.\r\n   *\r\n   * > 👉 **Note**: we only get here if the label is defined.\r\n   *\r\n   * ```markdown\r\n   * > | [a][] d\r\n   *         ^\r\n   * ```\r\n   *\r\n   *  @type {State}\r\n   */\r\n  function referenceCollapsedOpen(code) {\r\n    if (code === 93) {\r\n      effects.enter('referenceMarker')\r\n      effects.consume(code)\r\n      effects.exit('referenceMarker')\r\n      effects.exit('reference')\r\n      return ok\r\n    }\r\n    return nok(code)\r\n  }\r\n}\r\n","/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {labelEnd} from './label-end.js'\r\n\r\n/** @type {Construct} */\r\nexport const labelStartImage = {\r\n  name: 'labelStartImage',\r\n  tokenize: tokenizeLabelStartImage,\r\n  resolveAll: labelEnd.resolveAll\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeLabelStartImage(effects, ok, nok) {\r\n  const self = this\r\n  return start\r\n\r\n  /**\r\n   * Start of label (image) start.\r\n   *\r\n   * ```markdown\r\n   * > | a ![b] c\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    effects.enter('labelImage')\r\n    effects.enter('labelImageMarker')\r\n    effects.consume(code)\r\n    effects.exit('labelImageMarker')\r\n    return open\r\n  }\r\n\r\n  /**\r\n   * After `!`, at `[`.\r\n   *\r\n   * ```markdown\r\n   * > | a ![b] c\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function open(code) {\r\n    if (code === 91) {\r\n      effects.enter('labelMarker')\r\n      effects.consume(code)\r\n      effects.exit('labelMarker')\r\n      effects.exit('labelImage')\r\n      return after\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `![`.\r\n   *\r\n   * ```markdown\r\n   * > | a ![b] c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * This is needed in because, when GFM footnotes are enabled, images never\r\n   * form when started with a `^`.\r\n   * Instead, links form:\r\n   *\r\n   * ```markdown\r\n   * ![^a](b)\r\n   *\r\n   * ![^a][b]\r\n   *\r\n   * [b]: c\r\n   * ```\r\n   *\r\n   * ```html\r\n   * <p>!<a href=\\\"b\\\">^a</a></p>\r\n   * <p>!<a href=\\\"c\\\">^a</a></p>\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    // To do: use a new field to do this, this is still needed for\r\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\r\n    // behavior isn’t.\r\n    // Hidden footnotes hook.\r\n    /* c8 ignore next 3 */\r\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\r\n      ? nok(code)\r\n      : ok(code)\r\n  }\r\n}\r\n","/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n */\r\n\r\nimport {\r\n  markdownLineEndingOrSpace,\r\n  unicodePunctuation,\r\n  unicodeWhitespace\r\n} from 'micromark-util-character'\r\n/**\r\n * Classify whether a code represents whitespace, punctuation, or something\r\n * else.\r\n *\r\n * Used for attention (emphasis, strong), whose sequences can open or close\r\n * based on the class of surrounding characters.\r\n *\r\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\r\n *\r\n * @param {Code} code\r\n *   Code.\r\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\r\n *   Group.\r\n */\r\nexport function classifyCharacter(code) {\r\n  if (\r\n    code === null ||\r\n    markdownLineEndingOrSpace(code) ||\r\n    unicodeWhitespace(code)\r\n  ) {\r\n    return 1\r\n  }\r\n  if (unicodePunctuation(code)) {\r\n    return 2\r\n  }\r\n}\r\n","/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').Event} Event\r\n * @typedef {import('micromark-util-types').Point} Point\r\n * @typedef {import('micromark-util-types').Resolver} Resolver\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').Token} Token\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {push, splice} from 'micromark-util-chunked'\r\nimport {classifyCharacter} from 'micromark-util-classify-character'\r\nimport {resolveAll} from 'micromark-util-resolve-all'\r\n/** @type {Construct} */\r\nexport const attention = {\r\n  name: 'attention',\r\n  tokenize: tokenizeAttention,\r\n  resolveAll: resolveAllAttention\r\n}\r\n\r\n/**\r\n * Take all events and resolve attention to emphasis or strong.\r\n *\r\n * @type {Resolver}\r\n */\r\nfunction resolveAllAttention(events, context) {\r\n  let index = -1\r\n  /** @type {number} */\r\n  let open\r\n  /** @type {Token} */\r\n  let group\r\n  /** @type {Token} */\r\n  let text\r\n  /** @type {Token} */\r\n  let openingSequence\r\n  /** @type {Token} */\r\n  let closingSequence\r\n  /** @type {number} */\r\n  let use\r\n  /** @type {Array<Event>} */\r\n  let nextEvents\r\n  /** @type {number} */\r\n  let offset\r\n\r\n  // Walk through all events.\r\n  //\r\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\r\n  // a bottleneck for malicious stuff.\r\n  while (++index < events.length) {\r\n    // Find a token that can close.\r\n    if (\r\n      events[index][0] === 'enter' &&\r\n      events[index][1].type === 'attentionSequence' &&\r\n      events[index][1]._close\r\n    ) {\r\n      open = index\r\n\r\n      // Now walk back to find an opener.\r\n      while (open--) {\r\n        // Find a token that can open the closer.\r\n        if (\r\n          events[open][0] === 'exit' &&\r\n          events[open][1].type === 'attentionSequence' &&\r\n          events[open][1]._open &&\r\n          // If the markers are the same:\r\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\r\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\r\n        ) {\r\n          // If the opening can close or the closing can open,\r\n          // and the close size *is not* a multiple of three,\r\n          // but the sum of the opening and closing size *is* multiple of three,\r\n          // then don’t match.\r\n          if (\r\n            (events[open][1]._close || events[index][1]._open) &&\r\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\r\n            !(\r\n              (events[open][1].end.offset -\r\n                events[open][1].start.offset +\r\n                events[index][1].end.offset -\r\n                events[index][1].start.offset) %\r\n              3\r\n            )\r\n          ) {\r\n            continue\r\n          }\r\n\r\n          // Number of markers to use from the sequence.\r\n          use =\r\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\r\n            events[index][1].end.offset - events[index][1].start.offset > 1\r\n              ? 2\r\n              : 1\r\n          const start = Object.assign({}, events[open][1].end)\r\n          const end = Object.assign({}, events[index][1].start)\r\n          movePoint(start, -use)\r\n          movePoint(end, use)\r\n          openingSequence = {\r\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\r\n            start,\r\n            end: Object.assign({}, events[open][1].end)\r\n          }\r\n          closingSequence = {\r\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\r\n            start: Object.assign({}, events[index][1].start),\r\n            end\r\n          }\r\n          text = {\r\n            type: use > 1 ? 'strongText' : 'emphasisText',\r\n            start: Object.assign({}, events[open][1].end),\r\n            end: Object.assign({}, events[index][1].start)\r\n          }\r\n          group = {\r\n            type: use > 1 ? 'strong' : 'emphasis',\r\n            start: Object.assign({}, openingSequence.start),\r\n            end: Object.assign({}, closingSequence.end)\r\n          }\r\n          events[open][1].end = Object.assign({}, openingSequence.start)\r\n          events[index][1].start = Object.assign({}, closingSequence.end)\r\n          nextEvents = []\r\n\r\n          // If there are more markers in the opening, add them before.\r\n          if (events[open][1].end.offset - events[open][1].start.offset) {\r\n            nextEvents = push(nextEvents, [\r\n              ['enter', events[open][1], context],\r\n              ['exit', events[open][1], context]\r\n            ])\r\n          }\r\n\r\n          // Opening.\r\n          nextEvents = push(nextEvents, [\r\n            ['enter', group, context],\r\n            ['enter', openingSequence, context],\r\n            ['exit', openingSequence, context],\r\n            ['enter', text, context]\r\n          ])\r\n\r\n          // Always populated by defaults.\r\n\r\n          // Between.\r\n          nextEvents = push(\r\n            nextEvents,\r\n            resolveAll(\r\n              context.parser.constructs.insideSpan.null,\r\n              events.slice(open + 1, index),\r\n              context\r\n            )\r\n          )\r\n\r\n          // Closing.\r\n          nextEvents = push(nextEvents, [\r\n            ['exit', text, context],\r\n            ['enter', closingSequence, context],\r\n            ['exit', closingSequence, context],\r\n            ['exit', group, context]\r\n          ])\r\n\r\n          // If there are more markers in the closing, add them after.\r\n          if (events[index][1].end.offset - events[index][1].start.offset) {\r\n            offset = 2\r\n            nextEvents = push(nextEvents, [\r\n              ['enter', events[index][1], context],\r\n              ['exit', events[index][1], context]\r\n            ])\r\n          } else {\r\n            offset = 0\r\n          }\r\n          splice(events, open - 1, index - open + 3, nextEvents)\r\n          index = open + nextEvents.length - offset - 2\r\n          break\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Remove remaining sequences.\r\n  index = -1\r\n  while (++index < events.length) {\r\n    if (events[index][1].type === 'attentionSequence') {\r\n      events[index][1].type = 'data'\r\n    }\r\n  }\r\n  return events\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeAttention(effects, ok) {\r\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\r\n  const previous = this.previous\r\n  const before = classifyCharacter(previous)\r\n\r\n  /** @type {NonNullable<Code>} */\r\n  let marker\r\n  return start\r\n\r\n  /**\r\n   * Before a sequence.\r\n   *\r\n   * ```markdown\r\n   * > | **\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    marker = code\r\n    effects.enter('attentionSequence')\r\n    return inside(code)\r\n  }\r\n\r\n  /**\r\n   * In a sequence.\r\n   *\r\n   * ```markdown\r\n   * > | **\r\n   *     ^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function inside(code) {\r\n    if (code === marker) {\r\n      effects.consume(code)\r\n      return inside\r\n    }\r\n    const token = effects.exit('attentionSequence')\r\n\r\n    // To do: next major: move this to resolver, just like `markdown-rs`.\r\n    const after = classifyCharacter(code)\r\n\r\n    // Always populated by defaults.\r\n\r\n    const open =\r\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\r\n    const close =\r\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\r\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\r\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\r\n    return ok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * Move a point a bit.\r\n *\r\n * Note: `move` only works inside lines! It’s not possible to move past other\r\n * chunks (replacement characters, tabs, or line endings).\r\n *\r\n * @param {Point} point\r\n * @param {number} offset\r\n * @returns {void}\r\n */\r\nfunction movePoint(point, offset) {\r\n  point.column += offset\r\n  point.offset += offset\r\n  point._bufferIndex += offset\r\n}\r\n","/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {\r\n  asciiAlpha,\r\n  asciiAlphanumeric,\r\n  asciiAtext,\r\n  asciiControl\r\n} from 'micromark-util-character'\r\n/** @type {Construct} */\r\nexport const autolink = {\r\n  name: 'autolink',\r\n  tokenize: tokenizeAutolink\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeAutolink(effects, ok, nok) {\r\n  let size = 0\r\n  return start\r\n\r\n  /**\r\n   * Start of an autolink.\r\n   *\r\n   * ```markdown\r\n   * > | a<https://example.com>b\r\n   *      ^\r\n   * > | a<user@example.com>b\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    effects.enter('autolink')\r\n    effects.enter('autolinkMarker')\r\n    effects.consume(code)\r\n    effects.exit('autolinkMarker')\r\n    effects.enter('autolinkProtocol')\r\n    return open\r\n  }\r\n\r\n  /**\r\n   * After `<`, at protocol or atext.\r\n   *\r\n   * ```markdown\r\n   * > | a<https://example.com>b\r\n   *       ^\r\n   * > | a<user@example.com>b\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function open(code) {\r\n    if (asciiAlpha(code)) {\r\n      effects.consume(code)\r\n      return schemeOrEmailAtext\r\n    }\r\n    return emailAtext(code)\r\n  }\r\n\r\n  /**\r\n   * At second byte of protocol or atext.\r\n   *\r\n   * ```markdown\r\n   * > | a<https://example.com>b\r\n   *        ^\r\n   * > | a<user@example.com>b\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function schemeOrEmailAtext(code) {\r\n    // ASCII alphanumeric and `+`, `-`, and `.`.\r\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\r\n      // Count the previous alphabetical from `open` too.\r\n      size = 1\r\n      return schemeInsideOrEmailAtext(code)\r\n    }\r\n    return emailAtext(code)\r\n  }\r\n\r\n  /**\r\n   * In ambiguous protocol or atext.\r\n   *\r\n   * ```markdown\r\n   * > | a<https://example.com>b\r\n   *        ^\r\n   * > | a<user@example.com>b\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function schemeInsideOrEmailAtext(code) {\r\n    if (code === 58) {\r\n      effects.consume(code)\r\n      size = 0\r\n      return urlInside\r\n    }\r\n\r\n    // ASCII alphanumeric and `+`, `-`, and `.`.\r\n    if (\r\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\r\n      size++ < 32\r\n    ) {\r\n      effects.consume(code)\r\n      return schemeInsideOrEmailAtext\r\n    }\r\n    size = 0\r\n    return emailAtext(code)\r\n  }\r\n\r\n  /**\r\n   * After protocol, in URL.\r\n   *\r\n   * ```markdown\r\n   * > | a<https://example.com>b\r\n   *             ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function urlInside(code) {\r\n    if (code === 62) {\r\n      effects.exit('autolinkProtocol')\r\n      effects.enter('autolinkMarker')\r\n      effects.consume(code)\r\n      effects.exit('autolinkMarker')\r\n      effects.exit('autolink')\r\n      return ok\r\n    }\r\n\r\n    // ASCII control, space, or `<`.\r\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\r\n      return nok(code)\r\n    }\r\n    effects.consume(code)\r\n    return urlInside\r\n  }\r\n\r\n  /**\r\n   * In email atext.\r\n   *\r\n   * ```markdown\r\n   * > | a<user.name@example.com>b\r\n   *              ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function emailAtext(code) {\r\n    if (code === 64) {\r\n      effects.consume(code)\r\n      return emailAtSignOrDot\r\n    }\r\n    if (asciiAtext(code)) {\r\n      effects.consume(code)\r\n      return emailAtext\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In label, after at-sign or dot.\r\n   *\r\n   * ```markdown\r\n   * > | a<user.name@example.com>b\r\n   *                 ^       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function emailAtSignOrDot(code) {\r\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\r\n  }\r\n\r\n  /**\r\n   * In label, where `.` and `>` are allowed.\r\n   *\r\n   * ```markdown\r\n   * > | a<user.name@example.com>b\r\n   *                   ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function emailLabel(code) {\r\n    if (code === 46) {\r\n      effects.consume(code)\r\n      size = 0\r\n      return emailAtSignOrDot\r\n    }\r\n    if (code === 62) {\r\n      // Exit, then change the token type.\r\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\r\n      effects.enter('autolinkMarker')\r\n      effects.consume(code)\r\n      effects.exit('autolinkMarker')\r\n      effects.exit('autolink')\r\n      return ok\r\n    }\r\n    return emailValue(code)\r\n  }\r\n\r\n  /**\r\n   * In label, where `.` and `>` are *not* allowed.\r\n   *\r\n   * Though, this is also used in `emailLabel` to parse other values.\r\n   *\r\n   * ```markdown\r\n   * > | a<user.name@ex-ample.com>b\r\n   *                    ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function emailValue(code) {\r\n    // ASCII alphanumeric or `-`.\r\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\r\n      const next = code === 45 ? emailValue : emailLabel\r\n      effects.consume(code)\r\n      return next\r\n    }\r\n    return nok(code)\r\n  }\r\n}\r\n","/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {\r\n  asciiAlpha,\r\n  asciiAlphanumeric,\r\n  markdownLineEnding,\r\n  markdownLineEndingOrSpace,\r\n  markdownSpace\r\n} from 'micromark-util-character'\r\n/** @type {Construct} */\r\nexport const htmlText = {\r\n  name: 'htmlText',\r\n  tokenize: tokenizeHtmlText\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeHtmlText(effects, ok, nok) {\r\n  const self = this\r\n  /** @type {NonNullable<Code> | undefined} */\r\n  let marker\r\n  /** @type {number} */\r\n  let index\r\n  /** @type {State} */\r\n  let returnState\r\n  return start\r\n\r\n  /**\r\n   * Start of HTML (text).\r\n   *\r\n   * ```markdown\r\n   * > | a <b> c\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    effects.enter('htmlText')\r\n    effects.enter('htmlTextData')\r\n    effects.consume(code)\r\n    return open\r\n  }\r\n\r\n  /**\r\n   * After `<`, at tag name or other stuff.\r\n   *\r\n   * ```markdown\r\n   * > | a <b> c\r\n   *        ^\r\n   * > | a <!doctype> c\r\n   *        ^\r\n   * > | a <!--b--> c\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function open(code) {\r\n    if (code === 33) {\r\n      effects.consume(code)\r\n      return declarationOpen\r\n    }\r\n    if (code === 47) {\r\n      effects.consume(code)\r\n      return tagCloseStart\r\n    }\r\n    if (code === 63) {\r\n      effects.consume(code)\r\n      return instruction\r\n    }\r\n\r\n    // ASCII alphabetical.\r\n    if (asciiAlpha(code)) {\r\n      effects.consume(code)\r\n      return tagOpen\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `<!`, at declaration, comment, or CDATA.\r\n   *\r\n   * ```markdown\r\n   * > | a <!doctype> c\r\n   *         ^\r\n   * > | a <!--b--> c\r\n   *         ^\r\n   * > | a <![CDATA[>&<]]> c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function declarationOpen(code) {\r\n    if (code === 45) {\r\n      effects.consume(code)\r\n      return commentOpenInside\r\n    }\r\n    if (code === 91) {\r\n      effects.consume(code)\r\n      index = 0\r\n      return cdataOpenInside\r\n    }\r\n    if (asciiAlpha(code)) {\r\n      effects.consume(code)\r\n      return declaration\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In a comment, after `<!-`, at another `-`.\r\n   *\r\n   * ```markdown\r\n   * > | a <!--b--> c\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function commentOpenInside(code) {\r\n    if (code === 45) {\r\n      effects.consume(code)\r\n      return commentEnd\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In comment.\r\n   *\r\n   * ```markdown\r\n   * > | a <!--b--> c\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function comment(code) {\r\n    if (code === null) {\r\n      return nok(code)\r\n    }\r\n    if (code === 45) {\r\n      effects.consume(code)\r\n      return commentClose\r\n    }\r\n    if (markdownLineEnding(code)) {\r\n      returnState = comment\r\n      return lineEndingBefore(code)\r\n    }\r\n    effects.consume(code)\r\n    return comment\r\n  }\r\n\r\n  /**\r\n   * In comment, after `-`.\r\n   *\r\n   * ```markdown\r\n   * > | a <!--b--> c\r\n   *             ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function commentClose(code) {\r\n    if (code === 45) {\r\n      effects.consume(code)\r\n      return commentEnd\r\n    }\r\n    return comment(code)\r\n  }\r\n\r\n  /**\r\n   * In comment, after `--`.\r\n   *\r\n   * ```markdown\r\n   * > | a <!--b--> c\r\n   *              ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function commentEnd(code) {\r\n    return code === 62\r\n      ? end(code)\r\n      : code === 45\r\n      ? commentClose(code)\r\n      : comment(code)\r\n  }\r\n\r\n  /**\r\n   * After `<![`, in CDATA, expecting `CDATA[`.\r\n   *\r\n   * ```markdown\r\n   * > | a <![CDATA[>&<]]> b\r\n   *          ^^^^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function cdataOpenInside(code) {\r\n    const value = 'CDATA['\r\n    if (code === value.charCodeAt(index++)) {\r\n      effects.consume(code)\r\n      return index === value.length ? cdata : cdataOpenInside\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In CDATA.\r\n   *\r\n   * ```markdown\r\n   * > | a <![CDATA[>&<]]> b\r\n   *                ^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function cdata(code) {\r\n    if (code === null) {\r\n      return nok(code)\r\n    }\r\n    if (code === 93) {\r\n      effects.consume(code)\r\n      return cdataClose\r\n    }\r\n    if (markdownLineEnding(code)) {\r\n      returnState = cdata\r\n      return lineEndingBefore(code)\r\n    }\r\n    effects.consume(code)\r\n    return cdata\r\n  }\r\n\r\n  /**\r\n   * In CDATA, after `]`, at another `]`.\r\n   *\r\n   * ```markdown\r\n   * > | a <![CDATA[>&<]]> b\r\n   *                    ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function cdataClose(code) {\r\n    if (code === 93) {\r\n      effects.consume(code)\r\n      return cdataEnd\r\n    }\r\n    return cdata(code)\r\n  }\r\n\r\n  /**\r\n   * In CDATA, after `]]`, at `>`.\r\n   *\r\n   * ```markdown\r\n   * > | a <![CDATA[>&<]]> b\r\n   *                     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function cdataEnd(code) {\r\n    if (code === 62) {\r\n      return end(code)\r\n    }\r\n    if (code === 93) {\r\n      effects.consume(code)\r\n      return cdataEnd\r\n    }\r\n    return cdata(code)\r\n  }\r\n\r\n  /**\r\n   * In declaration.\r\n   *\r\n   * ```markdown\r\n   * > | a <!b> c\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function declaration(code) {\r\n    if (code === null || code === 62) {\r\n      return end(code)\r\n    }\r\n    if (markdownLineEnding(code)) {\r\n      returnState = declaration\r\n      return lineEndingBefore(code)\r\n    }\r\n    effects.consume(code)\r\n    return declaration\r\n  }\r\n\r\n  /**\r\n   * In instruction.\r\n   *\r\n   * ```markdown\r\n   * > | a <?b?> c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function instruction(code) {\r\n    if (code === null) {\r\n      return nok(code)\r\n    }\r\n    if (code === 63) {\r\n      effects.consume(code)\r\n      return instructionClose\r\n    }\r\n    if (markdownLineEnding(code)) {\r\n      returnState = instruction\r\n      return lineEndingBefore(code)\r\n    }\r\n    effects.consume(code)\r\n    return instruction\r\n  }\r\n\r\n  /**\r\n   * In instruction, after `?`, at `>`.\r\n   *\r\n   * ```markdown\r\n   * > | a <?b?> c\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function instructionClose(code) {\r\n    return code === 62 ? end(code) : instruction(code)\r\n  }\r\n\r\n  /**\r\n   * After `</`, in closing tag, at tag name.\r\n   *\r\n   * ```markdown\r\n   * > | a </b> c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagCloseStart(code) {\r\n    // ASCII alphabetical.\r\n    if (asciiAlpha(code)) {\r\n      effects.consume(code)\r\n      return tagClose\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `</x`, in a tag name.\r\n   *\r\n   * ```markdown\r\n   * > | a </b> c\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagClose(code) {\r\n    // ASCII alphanumerical and `-`.\r\n    if (code === 45 || asciiAlphanumeric(code)) {\r\n      effects.consume(code)\r\n      return tagClose\r\n    }\r\n    return tagCloseBetween(code)\r\n  }\r\n\r\n  /**\r\n   * In closing tag, after tag name.\r\n   *\r\n   * ```markdown\r\n   * > | a </b> c\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagCloseBetween(code) {\r\n    if (markdownLineEnding(code)) {\r\n      returnState = tagCloseBetween\r\n      return lineEndingBefore(code)\r\n    }\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code)\r\n      return tagCloseBetween\r\n    }\r\n    return end(code)\r\n  }\r\n\r\n  /**\r\n   * After `<x`, in opening tag name.\r\n   *\r\n   * ```markdown\r\n   * > | a <b> c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagOpen(code) {\r\n    // ASCII alphanumerical and `-`.\r\n    if (code === 45 || asciiAlphanumeric(code)) {\r\n      effects.consume(code)\r\n      return tagOpen\r\n    }\r\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\r\n      return tagOpenBetween(code)\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In opening tag, after tag name.\r\n   *\r\n   * ```markdown\r\n   * > | a <b> c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagOpenBetween(code) {\r\n    if (code === 47) {\r\n      effects.consume(code)\r\n      return end\r\n    }\r\n\r\n    // ASCII alphabetical and `:` and `_`.\r\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\r\n      effects.consume(code)\r\n      return tagOpenAttributeName\r\n    }\r\n    if (markdownLineEnding(code)) {\r\n      returnState = tagOpenBetween\r\n      return lineEndingBefore(code)\r\n    }\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code)\r\n      return tagOpenBetween\r\n    }\r\n    return end(code)\r\n  }\r\n\r\n  /**\r\n   * In attribute name.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c> d\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagOpenAttributeName(code) {\r\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\r\n    if (\r\n      code === 45 ||\r\n      code === 46 ||\r\n      code === 58 ||\r\n      code === 95 ||\r\n      asciiAlphanumeric(code)\r\n    ) {\r\n      effects.consume(code)\r\n      return tagOpenAttributeName\r\n    }\r\n    return tagOpenAttributeNameAfter(code)\r\n  }\r\n\r\n  /**\r\n   * After attribute name, before initializer, the end of the tag, or\r\n   * whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c> d\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagOpenAttributeNameAfter(code) {\r\n    if (code === 61) {\r\n      effects.consume(code)\r\n      return tagOpenAttributeValueBefore\r\n    }\r\n    if (markdownLineEnding(code)) {\r\n      returnState = tagOpenAttributeNameAfter\r\n      return lineEndingBefore(code)\r\n    }\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code)\r\n      return tagOpenAttributeNameAfter\r\n    }\r\n    return tagOpenBetween(code)\r\n  }\r\n\r\n  /**\r\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\r\n   * whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c=d> e\r\n   *            ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagOpenAttributeValueBefore(code) {\r\n    if (\r\n      code === null ||\r\n      code === 60 ||\r\n      code === 61 ||\r\n      code === 62 ||\r\n      code === 96\r\n    ) {\r\n      return nok(code)\r\n    }\r\n    if (code === 34 || code === 39) {\r\n      effects.consume(code)\r\n      marker = code\r\n      return tagOpenAttributeValueQuoted\r\n    }\r\n    if (markdownLineEnding(code)) {\r\n      returnState = tagOpenAttributeValueBefore\r\n      return lineEndingBefore(code)\r\n    }\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code)\r\n      return tagOpenAttributeValueBefore\r\n    }\r\n    effects.consume(code)\r\n    return tagOpenAttributeValueUnquoted\r\n  }\r\n\r\n  /**\r\n   * In double or single quoted attribute value.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c=\"d\"> e\r\n   *             ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagOpenAttributeValueQuoted(code) {\r\n    if (code === marker) {\r\n      effects.consume(code)\r\n      marker = undefined\r\n      return tagOpenAttributeValueQuotedAfter\r\n    }\r\n    if (code === null) {\r\n      return nok(code)\r\n    }\r\n    if (markdownLineEnding(code)) {\r\n      returnState = tagOpenAttributeValueQuoted\r\n      return lineEndingBefore(code)\r\n    }\r\n    effects.consume(code)\r\n    return tagOpenAttributeValueQuoted\r\n  }\r\n\r\n  /**\r\n   * In unquoted attribute value.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c=d> e\r\n   *            ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagOpenAttributeValueUnquoted(code) {\r\n    if (\r\n      code === null ||\r\n      code === 34 ||\r\n      code === 39 ||\r\n      code === 60 ||\r\n      code === 61 ||\r\n      code === 96\r\n    ) {\r\n      return nok(code)\r\n    }\r\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\r\n      return tagOpenBetween(code)\r\n    }\r\n    effects.consume(code)\r\n    return tagOpenAttributeValueUnquoted\r\n  }\r\n\r\n  /**\r\n   * After double or single quoted attribute value, before whitespace or the end\r\n   * of the tag.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c=\"d\"> e\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagOpenAttributeValueQuotedAfter(code) {\r\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\r\n      return tagOpenBetween(code)\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In certain circumstances of a tag where only an `>` is allowed.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c=\"d\"> e\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function end(code) {\r\n    if (code === 62) {\r\n      effects.consume(code)\r\n      effects.exit('htmlTextData')\r\n      effects.exit('htmlText')\r\n      return ok\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * At eol.\r\n   *\r\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\r\n   * > empty tokens.\r\n   *\r\n   * ```markdown\r\n   * > | a <!--a\r\n   *            ^\r\n   *   | b-->\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function lineEndingBefore(code) {\r\n    effects.exit('htmlTextData')\r\n    effects.enter('lineEnding')\r\n    effects.consume(code)\r\n    effects.exit('lineEnding')\r\n    return lineEndingAfter\r\n  }\r\n\r\n  /**\r\n   * After eol, at optional whitespace.\r\n   *\r\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\r\n   * > empty tokens.\r\n   *\r\n   * ```markdown\r\n   *   | a <!--a\r\n   * > | b-->\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function lineEndingAfter(code) {\r\n    // Always populated by defaults.\r\n\r\n    return markdownSpace(code)\r\n      ? factorySpace(\r\n          effects,\r\n          lineEndingAfterPrefix,\r\n          'linePrefix',\r\n          self.parser.constructs.disable.null.includes('codeIndented')\r\n            ? undefined\r\n            : 4\r\n        )(code)\r\n      : lineEndingAfterPrefix(code)\r\n  }\r\n\r\n  /**\r\n   * After eol, after optional whitespace.\r\n   *\r\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\r\n   * > empty tokens.\r\n   *\r\n   * ```markdown\r\n   *   | a <!--a\r\n   * > | b-->\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function lineEndingAfterPrefix(code) {\r\n    effects.enter('htmlTextData')\r\n    return returnState(code)\r\n  }\r\n}\r\n","/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {labelEnd} from './label-end.js'\r\n\r\n/** @type {Construct} */\r\nexport const labelStartLink = {\r\n  name: 'labelStartLink',\r\n  tokenize: tokenizeLabelStartLink,\r\n  resolveAll: labelEnd.resolveAll\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeLabelStartLink(effects, ok, nok) {\r\n  const self = this\r\n  return start\r\n\r\n  /**\r\n   * Start of label (link) start.\r\n   *\r\n   * ```markdown\r\n   * > | a [b] c\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    effects.enter('labelLink')\r\n    effects.enter('labelMarker')\r\n    effects.consume(code)\r\n    effects.exit('labelMarker')\r\n    effects.exit('labelLink')\r\n    return after\r\n  }\r\n\r\n  /** @type {State} */\r\n  function after(code) {\r\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\r\n    // remove.\r\n    // Hidden footnotes hook.\r\n    /* c8 ignore next 3 */\r\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\r\n      ? nok(code)\r\n      : ok(code)\r\n  }\r\n}\r\n","/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {markdownLineEnding} from 'micromark-util-character'\r\n/** @type {Construct} */\r\nexport const hardBreakEscape = {\r\n  name: 'hardBreakEscape',\r\n  tokenize: tokenizeHardBreakEscape\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\r\n  return start\r\n\r\n  /**\r\n   * Start of a hard break (escape).\r\n   *\r\n   * ```markdown\r\n   * > | a\\\r\n   *      ^\r\n   *   | b\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    effects.enter('hardBreakEscape')\r\n    effects.consume(code)\r\n    return after\r\n  }\r\n\r\n  /**\r\n   * After `\\`, at eol.\r\n   *\r\n   * ```markdown\r\n   * > | a\\\r\n   *       ^\r\n   *   | b\r\n   * ```\r\n   *\r\n   *  @type {State}\r\n   */\r\n  function after(code) {\r\n    if (markdownLineEnding(code)) {\r\n      effects.exit('hardBreakEscape')\r\n      return ok(code)\r\n    }\r\n    return nok(code)\r\n  }\r\n}\r\n","/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').Previous} Previous\r\n * @typedef {import('micromark-util-types').Resolver} Resolver\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').Token} Token\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {markdownLineEnding} from 'micromark-util-character'\r\n/** @type {Construct} */\r\nexport const codeText = {\r\n  name: 'codeText',\r\n  tokenize: tokenizeCodeText,\r\n  resolve: resolveCodeText,\r\n  previous\r\n}\r\n\r\n// To do: next major: don’t resolve, like `markdown-rs`.\r\n/** @type {Resolver} */\r\nfunction resolveCodeText(events) {\r\n  let tailExitIndex = events.length - 4\r\n  let headEnterIndex = 3\r\n  /** @type {number} */\r\n  let index\r\n  /** @type {number | undefined} */\r\n  let enter\r\n\r\n  // If we start and end with an EOL or a space.\r\n  if (\r\n    (events[headEnterIndex][1].type === 'lineEnding' ||\r\n      events[headEnterIndex][1].type === 'space') &&\r\n    (events[tailExitIndex][1].type === 'lineEnding' ||\r\n      events[tailExitIndex][1].type === 'space')\r\n  ) {\r\n    index = headEnterIndex\r\n\r\n    // And we have data.\r\n    while (++index < tailExitIndex) {\r\n      if (events[index][1].type === 'codeTextData') {\r\n        // Then we have padding.\r\n        events[headEnterIndex][1].type = 'codeTextPadding'\r\n        events[tailExitIndex][1].type = 'codeTextPadding'\r\n        headEnterIndex += 2\r\n        tailExitIndex -= 2\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  // Merge adjacent spaces and data.\r\n  index = headEnterIndex - 1\r\n  tailExitIndex++\r\n  while (++index <= tailExitIndex) {\r\n    if (enter === undefined) {\r\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\r\n        enter = index\r\n      }\r\n    } else if (\r\n      index === tailExitIndex ||\r\n      events[index][1].type === 'lineEnding'\r\n    ) {\r\n      events[enter][1].type = 'codeTextData'\r\n      if (index !== enter + 2) {\r\n        events[enter][1].end = events[index - 1][1].end\r\n        events.splice(enter + 2, index - enter - 2)\r\n        tailExitIndex -= index - enter - 2\r\n        index = enter + 2\r\n      }\r\n      enter = undefined\r\n    }\r\n  }\r\n  return events\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Previous}\r\n */\r\nfunction previous(code) {\r\n  // If there is a previous code, there will always be a tail.\r\n  return (\r\n    code !== 96 ||\r\n    this.events[this.events.length - 1][1].type === 'characterEscape'\r\n  )\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeCodeText(effects, ok, nok) {\r\n  const self = this\r\n  let sizeOpen = 0\r\n  /** @type {number} */\r\n  let size\r\n  /** @type {Token} */\r\n  let token\r\n  return start\r\n\r\n  /**\r\n   * Start of code (text).\r\n   *\r\n   * ```markdown\r\n   * > | `a`\r\n   *     ^\r\n   * > | \\`a`\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    effects.enter('codeText')\r\n    effects.enter('codeTextSequence')\r\n    return sequenceOpen(code)\r\n  }\r\n\r\n  /**\r\n   * In opening sequence.\r\n   *\r\n   * ```markdown\r\n   * > | `a`\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function sequenceOpen(code) {\r\n    if (code === 96) {\r\n      effects.consume(code)\r\n      sizeOpen++\r\n      return sequenceOpen\r\n    }\r\n    effects.exit('codeTextSequence')\r\n    return between(code)\r\n  }\r\n\r\n  /**\r\n   * Between something and something else.\r\n   *\r\n   * ```markdown\r\n   * > | `a`\r\n   *      ^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function between(code) {\r\n    // EOF.\r\n    if (code === null) {\r\n      return nok(code)\r\n    }\r\n\r\n    // To do: next major: don’t do spaces in resolve, but when compiling,\r\n    // like `markdown-rs`.\r\n    // Tabs don’t work, and virtual spaces don’t make sense.\r\n    if (code === 32) {\r\n      effects.enter('space')\r\n      effects.consume(code)\r\n      effects.exit('space')\r\n      return between\r\n    }\r\n\r\n    // Closing fence? Could also be data.\r\n    if (code === 96) {\r\n      token = effects.enter('codeTextSequence')\r\n      size = 0\r\n      return sequenceClose(code)\r\n    }\r\n    if (markdownLineEnding(code)) {\r\n      effects.enter('lineEnding')\r\n      effects.consume(code)\r\n      effects.exit('lineEnding')\r\n      return between\r\n    }\r\n\r\n    // Data.\r\n    effects.enter('codeTextData')\r\n    return data(code)\r\n  }\r\n\r\n  /**\r\n   * In data.\r\n   *\r\n   * ```markdown\r\n   * > | `a`\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function data(code) {\r\n    if (\r\n      code === null ||\r\n      code === 32 ||\r\n      code === 96 ||\r\n      markdownLineEnding(code)\r\n    ) {\r\n      effects.exit('codeTextData')\r\n      return between(code)\r\n    }\r\n    effects.consume(code)\r\n    return data\r\n  }\r\n\r\n  /**\r\n   * In closing sequence.\r\n   *\r\n   * ```markdown\r\n   * > | `a`\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function sequenceClose(code) {\r\n    // More.\r\n    if (code === 96) {\r\n      effects.consume(code)\r\n      size++\r\n      return sequenceClose\r\n    }\r\n\r\n    // Done!\r\n    if (size === sizeOpen) {\r\n      effects.exit('codeTextSequence')\r\n      effects.exit('codeText')\r\n      return ok(code)\r\n    }\r\n\r\n    // More or less accents: mark as data.\r\n    token.type = 'codeTextData'\r\n    return data(code)\r\n  }\r\n}\r\n","/**\r\n * @typedef {import('micromark-util-types').Extension} Extension\r\n */\r\n\r\nimport {\r\n  attention,\r\n  autolink,\r\n  blockQuote,\r\n  characterEscape,\r\n  characterReference,\r\n  codeFenced,\r\n  codeIndented,\r\n  codeText,\r\n  definition,\r\n  hardBreakEscape,\r\n  headingAtx,\r\n  htmlFlow,\r\n  htmlText,\r\n  labelEnd,\r\n  labelStartImage,\r\n  labelStartLink,\r\n  lineEnding,\r\n  list,\r\n  setextUnderline,\r\n  thematicBreak\r\n} from 'micromark-core-commonmark'\r\nimport {resolver as resolveText} from './initialize/text.js'\r\n\r\n/** @satisfies {Extension['document']} */\r\nexport const document = {\r\n  [42]: list,\r\n  [43]: list,\r\n  [45]: list,\r\n  [48]: list,\r\n  [49]: list,\r\n  [50]: list,\r\n  [51]: list,\r\n  [52]: list,\r\n  [53]: list,\r\n  [54]: list,\r\n  [55]: list,\r\n  [56]: list,\r\n  [57]: list,\r\n  [62]: blockQuote\r\n}\r\n\r\n/** @satisfies {Extension['contentInitial']} */\r\nexport const contentInitial = {\r\n  [91]: definition\r\n}\r\n\r\n/** @satisfies {Extension['flowInitial']} */\r\nexport const flowInitial = {\r\n  [-2]: codeIndented,\r\n  [-1]: codeIndented,\r\n  [32]: codeIndented\r\n}\r\n\r\n/** @satisfies {Extension['flow']} */\r\nexport const flow = {\r\n  [35]: headingAtx,\r\n  [42]: thematicBreak,\r\n  [45]: [setextUnderline, thematicBreak],\r\n  [60]: htmlFlow,\r\n  [61]: setextUnderline,\r\n  [95]: thematicBreak,\r\n  [96]: codeFenced,\r\n  [126]: codeFenced\r\n}\r\n\r\n/** @satisfies {Extension['string']} */\r\nexport const string = {\r\n  [38]: characterReference,\r\n  [92]: characterEscape\r\n}\r\n\r\n/** @satisfies {Extension['text']} */\r\nexport const text = {\r\n  [-5]: lineEnding,\r\n  [-4]: lineEnding,\r\n  [-3]: lineEnding,\r\n  [33]: labelStartImage,\r\n  [38]: characterReference,\r\n  [42]: attention,\r\n  [60]: [autolink, htmlText],\r\n  [91]: labelStartLink,\r\n  [92]: [hardBreakEscape, characterEscape],\r\n  [93]: labelEnd,\r\n  [95]: attention,\r\n  [96]: codeText\r\n}\r\n\r\n/** @satisfies {Extension['insideSpan']} */\r\nexport const insideSpan = {\r\n  null: [attention, resolveText]\r\n}\r\n\r\n/** @satisfies {Extension['attentionMarkers']} */\r\nexport const attentionMarkers = {\r\n  null: [42, 95]\r\n}\r\n\r\n/** @satisfies {Extension['disable']} */\r\nexport const disable = {\r\n  null: []\r\n}\r\n","/**\r\n * @typedef {import('micromark-util-types').Create} Create\r\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\r\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\r\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\r\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\r\n */\r\n\r\nimport {combineExtensions} from 'micromark-util-combine-extensions'\r\nimport {content} from './initialize/content.js'\r\nimport {document} from './initialize/document.js'\r\nimport {flow} from './initialize/flow.js'\r\nimport {text, string} from './initialize/text.js'\r\nimport {createTokenizer} from './create-tokenizer.js'\r\nimport * as defaultConstructs from './constructs.js'\r\n\r\n/**\r\n * @param {ParseOptions | null | undefined} [options]\r\n * @returns {ParseContext}\r\n */\r\nexport function parse(options) {\r\n  const settings = options || {}\r\n  const constructs =\r\n    /** @type {FullNormalizedExtension} */\r\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\r\n\r\n  /** @type {ParseContext} */\r\n  const parser = {\r\n    defined: [],\r\n    lazy: {},\r\n    constructs,\r\n    content: create(content),\r\n    document: create(document),\r\n    flow: create(flow),\r\n    string: create(string),\r\n    text: create(text)\r\n  }\r\n  return parser\r\n\r\n  /**\r\n   * @param {InitialConstruct} initial\r\n   */\r\n  function create(initial) {\r\n    return creator\r\n    /** @type {Create} */\r\n    function creator(from) {\r\n      return createTokenizer(parser, initial, from)\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @typedef {import('micromark-util-types').Chunk} Chunk\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Encoding} Encoding\r\n * @typedef {import('micromark-util-types').Value} Value\r\n */\r\n\r\n/**\r\n * @callback Preprocessor\r\n * @param {Value} value\r\n * @param {Encoding | null | undefined} [encoding]\r\n * @param {boolean | null | undefined} [end=false]\r\n * @returns {Array<Chunk>}\r\n */\r\n\r\nconst search = /[\\0\\t\\n\\r]/g\r\n\r\n/**\r\n * @returns {Preprocessor}\r\n */\r\nexport function preprocess() {\r\n  let column = 1\r\n  let buffer = ''\r\n  /** @type {boolean | undefined} */\r\n  let start = true\r\n  /** @type {boolean | undefined} */\r\n  let atCarriageReturn\r\n  return preprocessor\r\n\r\n  /** @type {Preprocessor} */\r\n  function preprocessor(value, encoding, end) {\r\n    /** @type {Array<Chunk>} */\r\n    const chunks = []\r\n    /** @type {RegExpMatchArray | null} */\r\n    let match\r\n    /** @type {number} */\r\n    let next\r\n    /** @type {number} */\r\n    let startPosition\r\n    /** @type {number} */\r\n    let endPosition\r\n    /** @type {Code} */\r\n    let code\r\n\r\n    // @ts-expect-error `Buffer` does allow an encoding.\r\n    value = buffer + value.toString(encoding)\r\n    startPosition = 0\r\n    buffer = ''\r\n    if (start) {\r\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\r\n      if (value.charCodeAt(0) === 65279) {\r\n        startPosition++\r\n      }\r\n      start = undefined\r\n    }\r\n    while (startPosition < value.length) {\r\n      search.lastIndex = startPosition\r\n      match = search.exec(value)\r\n      endPosition =\r\n        match && match.index !== undefined ? match.index : value.length\r\n      code = value.charCodeAt(endPosition)\r\n      if (!match) {\r\n        buffer = value.slice(startPosition)\r\n        break\r\n      }\r\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\r\n        chunks.push(-3)\r\n        atCarriageReturn = undefined\r\n      } else {\r\n        if (atCarriageReturn) {\r\n          chunks.push(-5)\r\n          atCarriageReturn = undefined\r\n        }\r\n        if (startPosition < endPosition) {\r\n          chunks.push(value.slice(startPosition, endPosition))\r\n          column += endPosition - startPosition\r\n        }\r\n        switch (code) {\r\n          case 0: {\r\n            chunks.push(65533)\r\n            column++\r\n            break\r\n          }\r\n          case 9: {\r\n            next = Math.ceil(column / 4) * 4\r\n            chunks.push(-2)\r\n            while (column++ < next) chunks.push(-1)\r\n            break\r\n          }\r\n          case 10: {\r\n            chunks.push(-4)\r\n            column = 1\r\n            break\r\n          }\r\n          default: {\r\n            atCarriageReturn = true\r\n            column = 1\r\n          }\r\n        }\r\n      }\r\n      startPosition = endPosition + 1\r\n    }\r\n    if (end) {\r\n      if (atCarriageReturn) chunks.push(-5)\r\n      if (buffer) chunks.push(buffer)\r\n      chunks.push(null)\r\n    }\r\n    return chunks\r\n  }\r\n}\r\n","/**\r\n * Turn the number (in string form as either hexa- or plain decimal) coming from\r\n * a numeric character reference into a character.\r\n *\r\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\r\n * non-characters and control characters safe.\r\n *\r\n * @param {string} value\r\n *   Value to decode.\r\n * @param {number} base\r\n *   Numeric base.\r\n * @returns {string}\r\n *   Character.\r\n */\r\nexport function decodeNumericCharacterReference(value, base) {\r\n  const code = Number.parseInt(value, base)\r\n  if (\r\n    // C0 except for HT, LF, FF, CR, space.\r\n    code < 9 ||\r\n    code === 11 ||\r\n    (code > 13 && code < 32) ||\r\n    // Control character (DEL) of C0, and C1 controls.\r\n    (code > 126 && code < 160) ||\r\n    // Lone high surrogates and low surrogates.\r\n    (code > 55295 && code < 57344) ||\r\n    // Noncharacters.\r\n    (code > 64975 && code < 65008) /* eslint-disable no-bitwise */ ||\r\n    (code & 65535) === 65535 ||\r\n    (code & 65535) === 65534 /* eslint-enable no-bitwise */ ||\r\n    // Out of range\r\n    code > 1114111\r\n  ) {\r\n    return '\\uFFFD'\r\n  }\r\n  return String.fromCharCode(code)\r\n}\r\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\r\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\r\nconst characterEscapeOrReference =\r\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\r\n\r\n/**\r\n * Decode markdown strings (which occur in places such as fenced code info\r\n * strings, destinations, labels, and titles).\r\n *\r\n * The “string” content type allows character escapes and -references.\r\n * This decodes those.\r\n *\r\n * @param {string} value\r\n *   Value to decode.\r\n * @returns {string}\r\n *   Decoded value.\r\n */\r\nexport function decodeString(value) {\r\n  return value.replace(characterEscapeOrReference, decode)\r\n}\r\n\r\n/**\r\n * @param {string} $0\r\n * @param {string} $1\r\n * @param {string} $2\r\n * @returns {string}\r\n */\r\nfunction decode($0, $1, $2) {\r\n  if ($1) {\r\n    // Escape.\r\n    return $1\r\n  }\r\n\r\n  // Reference.\r\n  const head = $2.charCodeAt(0)\r\n  if (head === 35) {\r\n    const head = $2.charCodeAt(1)\r\n    const hex = head === 120 || head === 88\r\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\r\n  }\r\n  return decodeNamedCharacterReference($2) || $0\r\n}\r\n","/**\r\n * @typedef {import('micromark-util-types').Encoding} Encoding\r\n * @typedef {import('micromark-util-types').Event} Event\r\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\r\n * @typedef {import('micromark-util-types').Token} Token\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Value} Value\r\n *\r\n * @typedef {import('unist').Parent} UnistParent\r\n * @typedef {import('unist').Point} Point\r\n *\r\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\r\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\r\n * @typedef {import('mdast').Content} Content\r\n * @typedef {import('mdast').Break} Break\r\n * @typedef {import('mdast').Blockquote} Blockquote\r\n * @typedef {import('mdast').Code} Code\r\n * @typedef {import('mdast').Definition} Definition\r\n * @typedef {import('mdast').Emphasis} Emphasis\r\n * @typedef {import('mdast').Heading} Heading\r\n * @typedef {import('mdast').HTML} HTML\r\n * @typedef {import('mdast').Image} Image\r\n * @typedef {import('mdast').ImageReference} ImageReference\r\n * @typedef {import('mdast').InlineCode} InlineCode\r\n * @typedef {import('mdast').Link} Link\r\n * @typedef {import('mdast').LinkReference} LinkReference\r\n * @typedef {import('mdast').List} List\r\n * @typedef {import('mdast').ListItem} ListItem\r\n * @typedef {import('mdast').Paragraph} Paragraph\r\n * @typedef {import('mdast').Root} Root\r\n * @typedef {import('mdast').Strong} Strong\r\n * @typedef {import('mdast').Text} Text\r\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\r\n * @typedef {import('mdast').ReferenceType} ReferenceType\r\n * @typedef {import('../index.js').CompileData} CompileData\r\n */\r\n\r\n/**\r\n * @typedef {Root | Content} Node\r\n * @typedef {Extract<Node, UnistParent>} Parent\r\n *\r\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\r\n */\r\n\r\n/**\r\n * @callback Transform\r\n *   Extra transform, to change the AST afterwards.\r\n * @param {Root} tree\r\n *   Tree to transform.\r\n * @returns {Root | undefined | null | void}\r\n *   New tree or nothing (in which case the current tree is used).\r\n *\r\n * @callback Handle\r\n *   Handle a token.\r\n * @param {CompileContext} this\r\n *   Context.\r\n * @param {Token} token\r\n *   Current token.\r\n * @returns {void}\r\n *   Nothing.\r\n *\r\n * @typedef {Record<string, Handle>} Handles\r\n *   Token types mapping to handles\r\n *\r\n * @callback OnEnterError\r\n *   Handle the case where the `right` token is open, but it is closed (by the\r\n *   `left` token) or because we reached the end of the document.\r\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\r\n *   Context.\r\n * @param {Token | undefined} left\r\n *   Left token.\r\n * @param {Token} right\r\n *   Right token.\r\n * @returns {void}\r\n *   Nothing.\r\n *\r\n * @callback OnExitError\r\n *   Handle the case where the `right` token is open but it is closed by\r\n *   exiting the `left` token.\r\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\r\n *   Context.\r\n * @param {Token} left\r\n *   Left token.\r\n * @param {Token} right\r\n *   Right token.\r\n * @returns {void}\r\n *   Nothing.\r\n *\r\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\r\n *   Open token on the stack, with an optional error handler for when\r\n *   that token isn’t closed properly.\r\n */\r\n\r\n/**\r\n * @typedef Config\r\n *   Configuration.\r\n *\r\n *   We have our defaults, but extensions will add more.\r\n * @property {Array<string>} canContainEols\r\n *   Token types where line endings are used.\r\n * @property {Handles} enter\r\n *   Opening handles.\r\n * @property {Handles} exit\r\n *   Closing handles.\r\n * @property {Array<Transform>} transforms\r\n *   Tree transforms.\r\n *\r\n * @typedef {Partial<Config>} Extension\r\n *   Change how markdown tokens from micromark are turned into mdast.\r\n *\r\n * @typedef CompileContext\r\n *   mdast compiler context.\r\n * @property {Array<Node | Fragment>} stack\r\n *   Stack of nodes.\r\n * @property {Array<TokenTuple>} tokenStack\r\n *   Stack of tokens.\r\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\r\n *   Get data from the key/value store.\r\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\r\n *   Set data into the key/value store.\r\n * @property {(this: CompileContext) => void} buffer\r\n *   Capture some of the output data.\r\n * @property {(this: CompileContext) => string} resume\r\n *   Stop capturing and access the output data.\r\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\r\n *   Enter a token.\r\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\r\n *   Exit a token.\r\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\r\n *   Get the string value of a token.\r\n * @property {Config} config\r\n *   Configuration.\r\n *\r\n * @typedef FromMarkdownOptions\r\n *   Configuration for how to build mdast.\r\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\r\n *   Extensions for this utility to change how tokens are turned into a tree.\r\n *\r\n * @typedef {ParseOptions & FromMarkdownOptions} Options\r\n *   Configuration.\r\n */\r\n\r\n// To do: micromark: create a registry of tokens?\r\n// To do: next major: don’t return given `Node` from `enter`.\r\n// To do: next major: remove setter/getter.\r\n\r\nimport {toString} from 'mdast-util-to-string'\r\nimport {parse} from 'micromark/lib/parse.js'\r\nimport {preprocess} from 'micromark/lib/preprocess.js'\r\nimport {postprocess} from 'micromark/lib/postprocess.js'\r\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\r\nimport {decodeString} from 'micromark-util-decode-string'\r\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\r\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\r\nimport {stringifyPosition} from 'unist-util-stringify-position'\r\nconst own = {}.hasOwnProperty\r\n\r\n/**\r\n * @param value\r\n *   Markdown to parse.\r\n * @param encoding\r\n *   Character encoding for when `value` is `Buffer`.\r\n * @param options\r\n *   Configuration.\r\n * @returns\r\n *   mdast tree.\r\n */\r\nexport const fromMarkdown =\r\n  /**\r\n   * @type {(\r\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\r\n   *   ((value: Value, options?: Options | null | undefined) => Root)\r\n   * )}\r\n   */\r\n\r\n  /**\r\n   * @param {Value} value\r\n   * @param {Encoding | Options | null | undefined} [encoding]\r\n   * @param {Options | null | undefined} [options]\r\n   * @returns {Root}\r\n   */\r\n  function (value, encoding, options) {\r\n    if (typeof encoding !== 'string') {\r\n      options = encoding\r\n      encoding = undefined\r\n    }\r\n    return compiler(options)(\r\n      postprocess(\r\n        parse(options).document().write(preprocess()(value, encoding, true))\r\n      )\r\n    )\r\n  }\r\n\r\n/**\r\n * Note this compiler only understand complete buffering, not streaming.\r\n *\r\n * @param {Options | null | undefined} [options]\r\n */\r\nfunction compiler(options) {\r\n  /** @type {Config} */\r\n  const config = {\r\n    transforms: [],\r\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\r\n    enter: {\r\n      autolink: opener(link),\r\n      autolinkProtocol: onenterdata,\r\n      autolinkEmail: onenterdata,\r\n      atxHeading: opener(heading),\r\n      blockQuote: opener(blockQuote),\r\n      characterEscape: onenterdata,\r\n      characterReference: onenterdata,\r\n      codeFenced: opener(codeFlow),\r\n      codeFencedFenceInfo: buffer,\r\n      codeFencedFenceMeta: buffer,\r\n      codeIndented: opener(codeFlow, buffer),\r\n      codeText: opener(codeText, buffer),\r\n      codeTextData: onenterdata,\r\n      data: onenterdata,\r\n      codeFlowValue: onenterdata,\r\n      definition: opener(definition),\r\n      definitionDestinationString: buffer,\r\n      definitionLabelString: buffer,\r\n      definitionTitleString: buffer,\r\n      emphasis: opener(emphasis),\r\n      hardBreakEscape: opener(hardBreak),\r\n      hardBreakTrailing: opener(hardBreak),\r\n      htmlFlow: opener(html, buffer),\r\n      htmlFlowData: onenterdata,\r\n      htmlText: opener(html, buffer),\r\n      htmlTextData: onenterdata,\r\n      image: opener(image),\r\n      label: buffer,\r\n      link: opener(link),\r\n      listItem: opener(listItem),\r\n      listItemValue: onenterlistitemvalue,\r\n      listOrdered: opener(list, onenterlistordered),\r\n      listUnordered: opener(list),\r\n      paragraph: opener(paragraph),\r\n      reference: onenterreference,\r\n      referenceString: buffer,\r\n      resourceDestinationString: buffer,\r\n      resourceTitleString: buffer,\r\n      setextHeading: opener(heading),\r\n      strong: opener(strong),\r\n      thematicBreak: opener(thematicBreak)\r\n    },\r\n    exit: {\r\n      atxHeading: closer(),\r\n      atxHeadingSequence: onexitatxheadingsequence,\r\n      autolink: closer(),\r\n      autolinkEmail: onexitautolinkemail,\r\n      autolinkProtocol: onexitautolinkprotocol,\r\n      blockQuote: closer(),\r\n      characterEscapeValue: onexitdata,\r\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\r\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\r\n      characterReferenceValue: onexitcharacterreferencevalue,\r\n      codeFenced: closer(onexitcodefenced),\r\n      codeFencedFence: onexitcodefencedfence,\r\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\r\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\r\n      codeFlowValue: onexitdata,\r\n      codeIndented: closer(onexitcodeindented),\r\n      codeText: closer(onexitcodetext),\r\n      codeTextData: onexitdata,\r\n      data: onexitdata,\r\n      definition: closer(),\r\n      definitionDestinationString: onexitdefinitiondestinationstring,\r\n      definitionLabelString: onexitdefinitionlabelstring,\r\n      definitionTitleString: onexitdefinitiontitlestring,\r\n      emphasis: closer(),\r\n      hardBreakEscape: closer(onexithardbreak),\r\n      hardBreakTrailing: closer(onexithardbreak),\r\n      htmlFlow: closer(onexithtmlflow),\r\n      htmlFlowData: onexitdata,\r\n      htmlText: closer(onexithtmltext),\r\n      htmlTextData: onexitdata,\r\n      image: closer(onexitimage),\r\n      label: onexitlabel,\r\n      labelText: onexitlabeltext,\r\n      lineEnding: onexitlineending,\r\n      link: closer(onexitlink),\r\n      listItem: closer(),\r\n      listOrdered: closer(),\r\n      listUnordered: closer(),\r\n      paragraph: closer(),\r\n      referenceString: onexitreferencestring,\r\n      resourceDestinationString: onexitresourcedestinationstring,\r\n      resourceTitleString: onexitresourcetitlestring,\r\n      resource: onexitresource,\r\n      setextHeading: closer(onexitsetextheading),\r\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\r\n      setextHeadingText: onexitsetextheadingtext,\r\n      strong: closer(),\r\n      thematicBreak: closer()\r\n    }\r\n  }\r\n  configure(config, (options || {}).mdastExtensions || [])\r\n\r\n  /** @type {CompileData} */\r\n  const data = {}\r\n  return compile\r\n\r\n  /**\r\n   * Turn micromark events into an mdast tree.\r\n   *\r\n   * @param {Array<Event>} events\r\n   *   Events.\r\n   * @returns {Root}\r\n   *   mdast tree.\r\n   */\r\n  function compile(events) {\r\n    /** @type {Root} */\r\n    let tree = {\r\n      type: 'root',\r\n      children: []\r\n    }\r\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\r\n    const context = {\r\n      stack: [tree],\r\n      tokenStack: [],\r\n      config,\r\n      enter,\r\n      exit,\r\n      buffer,\r\n      resume,\r\n      setData,\r\n      getData\r\n    }\r\n    /** @type {Array<number>} */\r\n    const listStack = []\r\n    let index = -1\r\n    while (++index < events.length) {\r\n      // We preprocess lists to add `listItem` tokens, and to infer whether\r\n      // items the list itself are spread out.\r\n      if (\r\n        events[index][1].type === 'listOrdered' ||\r\n        events[index][1].type === 'listUnordered'\r\n      ) {\r\n        if (events[index][0] === 'enter') {\r\n          listStack.push(index)\r\n        } else {\r\n          const tail = listStack.pop()\r\n          index = prepareList(events, tail, index)\r\n        }\r\n      }\r\n    }\r\n    index = -1\r\n    while (++index < events.length) {\r\n      const handler = config[events[index][0]]\r\n      if (own.call(handler, events[index][1].type)) {\r\n        handler[events[index][1].type].call(\r\n          Object.assign(\r\n            {\r\n              sliceSerialize: events[index][2].sliceSerialize\r\n            },\r\n            context\r\n          ),\r\n          events[index][1]\r\n        )\r\n      }\r\n    }\r\n\r\n    // Handle tokens still being open.\r\n    if (context.tokenStack.length > 0) {\r\n      const tail = context.tokenStack[context.tokenStack.length - 1]\r\n      const handler = tail[1] || defaultOnError\r\n      handler.call(context, undefined, tail[0])\r\n    }\r\n\r\n    // Figure out `root` position.\r\n    tree.position = {\r\n      start: point(\r\n        events.length > 0\r\n          ? events[0][1].start\r\n          : {\r\n              line: 1,\r\n              column: 1,\r\n              offset: 0\r\n            }\r\n      ),\r\n      end: point(\r\n        events.length > 0\r\n          ? events[events.length - 2][1].end\r\n          : {\r\n              line: 1,\r\n              column: 1,\r\n              offset: 0\r\n            }\r\n      )\r\n    }\r\n\r\n    // Call transforms.\r\n    index = -1\r\n    while (++index < config.transforms.length) {\r\n      tree = config.transforms[index](tree) || tree\r\n    }\r\n    return tree\r\n  }\r\n\r\n  /**\r\n   * @param {Array<Event>} events\r\n   * @param {number} start\r\n   * @param {number} length\r\n   * @returns {number}\r\n   */\r\n  function prepareList(events, start, length) {\r\n    let index = start - 1\r\n    let containerBalance = -1\r\n    let listSpread = false\r\n    /** @type {Token | undefined} */\r\n    let listItem\r\n    /** @type {number | undefined} */\r\n    let lineIndex\r\n    /** @type {number | undefined} */\r\n    let firstBlankLineIndex\r\n    /** @type {boolean | undefined} */\r\n    let atMarker\r\n    while (++index <= length) {\r\n      const event = events[index]\r\n      if (\r\n        event[1].type === 'listUnordered' ||\r\n        event[1].type === 'listOrdered' ||\r\n        event[1].type === 'blockQuote'\r\n      ) {\r\n        if (event[0] === 'enter') {\r\n          containerBalance++\r\n        } else {\r\n          containerBalance--\r\n        }\r\n        atMarker = undefined\r\n      } else if (event[1].type === 'lineEndingBlank') {\r\n        if (event[0] === 'enter') {\r\n          if (\r\n            listItem &&\r\n            !atMarker &&\r\n            !containerBalance &&\r\n            !firstBlankLineIndex\r\n          ) {\r\n            firstBlankLineIndex = index\r\n          }\r\n          atMarker = undefined\r\n        }\r\n      } else if (\r\n        event[1].type === 'linePrefix' ||\r\n        event[1].type === 'listItemValue' ||\r\n        event[1].type === 'listItemMarker' ||\r\n        event[1].type === 'listItemPrefix' ||\r\n        event[1].type === 'listItemPrefixWhitespace'\r\n      ) {\r\n        // Empty.\r\n      } else {\r\n        atMarker = undefined\r\n      }\r\n      if (\r\n        (!containerBalance &&\r\n          event[0] === 'enter' &&\r\n          event[1].type === 'listItemPrefix') ||\r\n        (containerBalance === -1 &&\r\n          event[0] === 'exit' &&\r\n          (event[1].type === 'listUnordered' ||\r\n            event[1].type === 'listOrdered'))\r\n      ) {\r\n        if (listItem) {\r\n          let tailIndex = index\r\n          lineIndex = undefined\r\n          while (tailIndex--) {\r\n            const tailEvent = events[tailIndex]\r\n            if (\r\n              tailEvent[1].type === 'lineEnding' ||\r\n              tailEvent[1].type === 'lineEndingBlank'\r\n            ) {\r\n              if (tailEvent[0] === 'exit') continue\r\n              if (lineIndex) {\r\n                events[lineIndex][1].type = 'lineEndingBlank'\r\n                listSpread = true\r\n              }\r\n              tailEvent[1].type = 'lineEnding'\r\n              lineIndex = tailIndex\r\n            } else if (\r\n              tailEvent[1].type === 'linePrefix' ||\r\n              tailEvent[1].type === 'blockQuotePrefix' ||\r\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\r\n              tailEvent[1].type === 'blockQuoteMarker' ||\r\n              tailEvent[1].type === 'listItemIndent'\r\n            ) {\r\n              // Empty\r\n            } else {\r\n              break\r\n            }\r\n          }\r\n          if (\r\n            firstBlankLineIndex &&\r\n            (!lineIndex || firstBlankLineIndex < lineIndex)\r\n          ) {\r\n            listItem._spread = true\r\n          }\r\n\r\n          // Fix position.\r\n          listItem.end = Object.assign(\r\n            {},\r\n            lineIndex ? events[lineIndex][1].start : event[1].end\r\n          )\r\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\r\n          index++\r\n          length++\r\n        }\r\n\r\n        // Create a new list item.\r\n        if (event[1].type === 'listItemPrefix') {\r\n          listItem = {\r\n            type: 'listItem',\r\n            _spread: false,\r\n            start: Object.assign({}, event[1].start),\r\n            // @ts-expect-error: we’ll add `end` in a second.\r\n            end: undefined\r\n          }\r\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\r\n          events.splice(index, 0, ['enter', listItem, event[2]])\r\n          index++\r\n          length++\r\n          firstBlankLineIndex = undefined\r\n          atMarker = true\r\n        }\r\n      }\r\n    }\r\n    events[start][1]._spread = listSpread\r\n    return length\r\n  }\r\n\r\n  /**\r\n   * Set data.\r\n   *\r\n   * @template {keyof CompileData} Key\r\n   *   Field type.\r\n   * @param {Key} key\r\n   *   Key of field.\r\n   * @param {CompileData[Key]} [value]\r\n   *   New value.\r\n   * @returns {void}\r\n   *   Nothing.\r\n   */\r\n  function setData(key, value) {\r\n    data[key] = value\r\n  }\r\n\r\n  /**\r\n   * Get data.\r\n   *\r\n   * @template {keyof CompileData} Key\r\n   *   Field type.\r\n   * @param {Key} key\r\n   *   Key of field.\r\n   * @returns {CompileData[Key]}\r\n   *   Value.\r\n   */\r\n  function getData(key) {\r\n    return data[key]\r\n  }\r\n\r\n  /**\r\n   * Create an opener handle.\r\n   *\r\n   * @param {(token: Token) => Node} create\r\n   *   Create a node.\r\n   * @param {Handle} [and]\r\n   *   Optional function to also run.\r\n   * @returns {Handle}\r\n   *   Handle.\r\n   */\r\n  function opener(create, and) {\r\n    return open\r\n\r\n    /**\r\n     * @this {CompileContext}\r\n     * @param {Token} token\r\n     * @returns {void}\r\n     */\r\n    function open(token) {\r\n      enter.call(this, create(token), token)\r\n      if (and) and.call(this, token)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @returns {void}\r\n   */\r\n  function buffer() {\r\n    this.stack.push({\r\n      type: 'fragment',\r\n      children: []\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @template {Node} Kind\r\n   *   Node type.\r\n   * @this {CompileContext}\r\n   *   Context.\r\n   * @param {Kind} node\r\n   *   Node to enter.\r\n   * @param {Token} token\r\n   *   Corresponding token.\r\n   * @param {OnEnterError | undefined} [errorHandler]\r\n   *   Handle the case where this token is open, but it is closed by something else.\r\n   * @returns {Kind}\r\n   *   The given node.\r\n   */\r\n  function enter(node, token, errorHandler) {\r\n    const parent = this.stack[this.stack.length - 1]\r\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\r\n    parent.children.push(node)\r\n    this.stack.push(node)\r\n    this.tokenStack.push([token, errorHandler])\r\n    // @ts-expect-error: `end` will be patched later.\r\n    node.position = {\r\n      start: point(token.start)\r\n    }\r\n    return node\r\n  }\r\n\r\n  /**\r\n   * Create a closer handle.\r\n   *\r\n   * @param {Handle} [and]\r\n   *   Optional function to also run.\r\n   * @returns {Handle}\r\n   *   Handle.\r\n   */\r\n  function closer(and) {\r\n    return close\r\n\r\n    /**\r\n     * @this {CompileContext}\r\n     * @param {Token} token\r\n     * @returns {void}\r\n     */\r\n    function close(token) {\r\n      if (and) and.call(this, token)\r\n      exit.call(this, token)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   *   Context.\r\n   * @param {Token} token\r\n   *   Corresponding token.\r\n   * @param {OnExitError | undefined} [onExitError]\r\n   *   Handle the case where another token is open.\r\n   * @returns {Node}\r\n   *   The closed node.\r\n   */\r\n  function exit(token, onExitError) {\r\n    const node = this.stack.pop()\r\n    const open = this.tokenStack.pop()\r\n    if (!open) {\r\n      throw new Error(\r\n        'Cannot close `' +\r\n          token.type +\r\n          '` (' +\r\n          stringifyPosition({\r\n            start: token.start,\r\n            end: token.end\r\n          }) +\r\n          '): it’s not open'\r\n      )\r\n    } else if (open[0].type !== token.type) {\r\n      if (onExitError) {\r\n        onExitError.call(this, token, open[0])\r\n      } else {\r\n        const handler = open[1] || defaultOnError\r\n        handler.call(this, token, open[0])\r\n      }\r\n    }\r\n    node.position.end = point(token.end)\r\n    return node\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @returns {string}\r\n   */\r\n  function resume() {\r\n    return toString(this.stack.pop())\r\n  }\r\n\r\n  //\r\n  // Handlers.\r\n  //\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onenterlistordered() {\r\n    setData('expectingFirstListItemValue', true)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onenterlistitemvalue(token) {\r\n    if (getData('expectingFirstListItemValue')) {\r\n      const ancestor = this.stack[this.stack.length - 2]\r\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\r\n      setData('expectingFirstListItemValue')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcodefencedfenceinfo() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    node.lang = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcodefencedfencemeta() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    node.meta = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcodefencedfence() {\r\n    // Exit if this is the closing fence.\r\n    if (getData('flowCodeInside')) return\r\n    this.buffer()\r\n    setData('flowCodeInside', true)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcodefenced() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\r\n    setData('flowCodeInside')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcodeindented() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitdefinitionlabelstring(token) {\r\n    const label = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    node.label = label\r\n    node.identifier = normalizeIdentifier(\r\n      this.sliceSerialize(token)\r\n    ).toLowerCase()\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitdefinitiontitlestring() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    node.title = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitdefinitiondestinationstring() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    node.url = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitatxheadingsequence(token) {\r\n    const node = this.stack[this.stack.length - 1]\r\n    if (!node.depth) {\r\n      const depth = this.sliceSerialize(token).length\r\n      node.depth = depth\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitsetextheadingtext() {\r\n    setData('setextHeadingSlurpLineEnding', true)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitsetextheadinglinesequence(token) {\r\n    const node = this.stack[this.stack.length - 1]\r\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitsetextheading() {\r\n    setData('setextHeadingSlurpLineEnding')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onenterdata(token) {\r\n    const node = this.stack[this.stack.length - 1]\r\n    let tail = node.children[node.children.length - 1]\r\n    if (!tail || tail.type !== 'text') {\r\n      // Add a new text node.\r\n      tail = text()\r\n      // @ts-expect-error: we’ll add `end` later.\r\n      tail.position = {\r\n        start: point(token.start)\r\n      }\r\n      // @ts-expect-error: Assume `parent` accepts `text`.\r\n      node.children.push(tail)\r\n    }\r\n    this.stack.push(tail)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitdata(token) {\r\n    const tail = this.stack.pop()\r\n    tail.value += this.sliceSerialize(token)\r\n    tail.position.end = point(token.end)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitlineending(token) {\r\n    const context = this.stack[this.stack.length - 1]\r\n    // If we’re at a hard break, include the line ending in there.\r\n    if (getData('atHardBreak')) {\r\n      const tail = context.children[context.children.length - 1]\r\n      tail.position.end = point(token.end)\r\n      setData('atHardBreak')\r\n      return\r\n    }\r\n    if (\r\n      !getData('setextHeadingSlurpLineEnding') &&\r\n      config.canContainEols.includes(context.type)\r\n    ) {\r\n      onenterdata.call(this, token)\r\n      onexitdata.call(this, token)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexithardbreak() {\r\n    setData('atHardBreak', true)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexithtmlflow() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    node.value = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexithtmltext() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    node.value = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitcodetext() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    node.value = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitlink() {\r\n    const node = this.stack[this.stack.length - 1]\r\n    // Note: there are also `identifier` and `label` fields on this link node!\r\n    // These are used / cleaned here.\r\n    // To do: clean.\r\n    if (getData('inReference')) {\r\n      /** @type {ReferenceType} */\r\n      const referenceType = getData('referenceType') || 'shortcut'\r\n      node.type += 'Reference'\r\n      // @ts-expect-error: mutate.\r\n      node.referenceType = referenceType\r\n      // @ts-expect-error: mutate.\r\n      delete node.url\r\n      delete node.title\r\n    } else {\r\n      // @ts-expect-error: mutate.\r\n      delete node.identifier\r\n      // @ts-expect-error: mutate.\r\n      delete node.label\r\n    }\r\n    setData('referenceType')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitimage() {\r\n    const node = this.stack[this.stack.length - 1]\r\n    // Note: there are also `identifier` and `label` fields on this link node!\r\n    // These are used / cleaned here.\r\n    // To do: clean.\r\n    if (getData('inReference')) {\r\n      /** @type {ReferenceType} */\r\n      const referenceType = getData('referenceType') || 'shortcut'\r\n      node.type += 'Reference'\r\n      // @ts-expect-error: mutate.\r\n      node.referenceType = referenceType\r\n      // @ts-expect-error: mutate.\r\n      delete node.url\r\n      delete node.title\r\n    } else {\r\n      // @ts-expect-error: mutate.\r\n      delete node.identifier\r\n      // @ts-expect-error: mutate.\r\n      delete node.label\r\n    }\r\n    setData('referenceType')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitlabeltext(token) {\r\n    const string = this.sliceSerialize(token)\r\n    const ancestor = this.stack[this.stack.length - 2]\r\n    // @ts-expect-error: stash this on the node, as it might become a reference\r\n    // later.\r\n    ancestor.label = decodeString(string)\r\n    // @ts-expect-error: same as above.\r\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitlabel() {\r\n    const fragment = this.stack[this.stack.length - 1]\r\n    const value = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    // Assume a reference.\r\n    setData('inReference', true)\r\n    if (node.type === 'link') {\r\n      /** @type {Array<StaticPhrasingContent>} */\r\n      // @ts-expect-error: Assume static phrasing content.\r\n      const children = fragment.children\r\n      node.children = children\r\n    } else {\r\n      node.alt = value\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitresourcedestinationstring() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    node.url = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitresourcetitlestring() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    node.title = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitresource() {\r\n    setData('inReference')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onenterreference() {\r\n    setData('referenceType', 'collapsed')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitreferencestring(token) {\r\n    const label = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    // @ts-expect-error: stash this on the node, as it might become a reference\r\n    // later.\r\n    node.label = label\r\n    // @ts-expect-error: same as above.\r\n    node.identifier = normalizeIdentifier(\r\n      this.sliceSerialize(token)\r\n    ).toLowerCase()\r\n    setData('referenceType', 'full')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitcharacterreferencemarker(token) {\r\n    setData('characterReferenceType', token.type)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcharacterreferencevalue(token) {\r\n    const data = this.sliceSerialize(token)\r\n    const type = getData('characterReferenceType')\r\n    /** @type {string} */\r\n    let value\r\n    if (type) {\r\n      value = decodeNumericCharacterReference(\r\n        data,\r\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\r\n      )\r\n      setData('characterReferenceType')\r\n    } else {\r\n      const result = decodeNamedCharacterReference(data)\r\n      value = result\r\n    }\r\n    const tail = this.stack.pop()\r\n    tail.value += value\r\n    tail.position.end = point(token.end)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitautolinkprotocol(token) {\r\n    onexitdata.call(this, token)\r\n    const node = this.stack[this.stack.length - 1]\r\n    node.url = this.sliceSerialize(token)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitautolinkemail(token) {\r\n    onexitdata.call(this, token)\r\n    const node = this.stack[this.stack.length - 1]\r\n    node.url = 'mailto:' + this.sliceSerialize(token)\r\n  }\r\n\r\n  //\r\n  // Creaters.\r\n  //\r\n\r\n  /** @returns {Blockquote} */\r\n  function blockQuote() {\r\n    return {\r\n      type: 'blockquote',\r\n      children: []\r\n    }\r\n  }\r\n\r\n  /** @returns {Code} */\r\n  function codeFlow() {\r\n    return {\r\n      type: 'code',\r\n      lang: null,\r\n      meta: null,\r\n      value: ''\r\n    }\r\n  }\r\n\r\n  /** @returns {InlineCode} */\r\n  function codeText() {\r\n    return {\r\n      type: 'inlineCode',\r\n      value: ''\r\n    }\r\n  }\r\n\r\n  /** @returns {Definition} */\r\n  function definition() {\r\n    return {\r\n      type: 'definition',\r\n      identifier: '',\r\n      label: null,\r\n      title: null,\r\n      url: ''\r\n    }\r\n  }\r\n\r\n  /** @returns {Emphasis} */\r\n  function emphasis() {\r\n    return {\r\n      type: 'emphasis',\r\n      children: []\r\n    }\r\n  }\r\n\r\n  /** @returns {Heading} */\r\n  function heading() {\r\n    // @ts-expect-error `depth` will be set later.\r\n    return {\r\n      type: 'heading',\r\n      depth: undefined,\r\n      children: []\r\n    }\r\n  }\r\n\r\n  /** @returns {Break} */\r\n  function hardBreak() {\r\n    return {\r\n      type: 'break'\r\n    }\r\n  }\r\n\r\n  /** @returns {HTML} */\r\n  function html() {\r\n    return {\r\n      type: 'html',\r\n      value: ''\r\n    }\r\n  }\r\n\r\n  /** @returns {Image} */\r\n  function image() {\r\n    return {\r\n      type: 'image',\r\n      title: null,\r\n      url: '',\r\n      alt: null\r\n    }\r\n  }\r\n\r\n  /** @returns {Link} */\r\n  function link() {\r\n    return {\r\n      type: 'link',\r\n      title: null,\r\n      url: '',\r\n      children: []\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Token} token\r\n   * @returns {List}\r\n   */\r\n  function list(token) {\r\n    return {\r\n      type: 'list',\r\n      ordered: token.type === 'listOrdered',\r\n      start: null,\r\n      spread: token._spread,\r\n      children: []\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Token} token\r\n   * @returns {ListItem}\r\n   */\r\n  function listItem(token) {\r\n    return {\r\n      type: 'listItem',\r\n      spread: token._spread,\r\n      checked: null,\r\n      children: []\r\n    }\r\n  }\r\n\r\n  /** @returns {Paragraph} */\r\n  function paragraph() {\r\n    return {\r\n      type: 'paragraph',\r\n      children: []\r\n    }\r\n  }\r\n\r\n  /** @returns {Strong} */\r\n  function strong() {\r\n    return {\r\n      type: 'strong',\r\n      children: []\r\n    }\r\n  }\r\n\r\n  /** @returns {Text} */\r\n  function text() {\r\n    return {\r\n      type: 'text',\r\n      value: ''\r\n    }\r\n  }\r\n\r\n  /** @returns {ThematicBreak} */\r\n  function thematicBreak() {\r\n    return {\r\n      type: 'thematicBreak'\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Copy a point-like value.\r\n *\r\n * @param {Point} d\r\n *   Point-like value.\r\n * @returns {Point}\r\n *   unist point.\r\n */\r\nfunction point(d) {\r\n  return {\r\n    line: d.line,\r\n    column: d.column,\r\n    offset: d.offset\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Config} combined\r\n * @param {Array<Extension | Array<Extension>>} extensions\r\n * @returns {void}\r\n */\r\nfunction configure(combined, extensions) {\r\n  let index = -1\r\n  while (++index < extensions.length) {\r\n    const value = extensions[index]\r\n    if (Array.isArray(value)) {\r\n      configure(combined, value)\r\n    } else {\r\n      extension(combined, value)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Config} combined\r\n * @param {Extension} extension\r\n * @returns {void}\r\n */\r\nfunction extension(combined, extension) {\r\n  /** @type {keyof Extension} */\r\n  let key\r\n  for (key in extension) {\r\n    if (own.call(extension, key)) {\r\n      if (key === 'canContainEols') {\r\n        const right = extension[key]\r\n        if (right) {\r\n          combined[key].push(...right)\r\n        }\r\n      } else if (key === 'transforms') {\r\n        const right = extension[key]\r\n        if (right) {\r\n          combined[key].push(...right)\r\n        }\r\n      } else if (key === 'enter' || key === 'exit') {\r\n        const right = extension[key]\r\n        if (right) {\r\n          Object.assign(combined[key], right)\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/** @type {OnEnterError} */\r\nfunction defaultOnError(left, right) {\r\n  if (left) {\r\n    throw new Error(\r\n      'Cannot close `' +\r\n        left.type +\r\n        '` (' +\r\n        stringifyPosition({\r\n          start: left.start,\r\n          end: left.end\r\n        }) +\r\n        '): a different token (`' +\r\n        right.type +\r\n        '`, ' +\r\n        stringifyPosition({\r\n          start: right.start,\r\n          end: right.end\r\n        }) +\r\n        ') is open'\r\n    )\r\n  } else {\r\n    throw new Error(\r\n      'Cannot close document, a token (`' +\r\n        right.type +\r\n        '`, ' +\r\n        stringifyPosition({\r\n          start: right.start,\r\n          end: right.end\r\n        }) +\r\n        ') is still open'\r\n    )\r\n  }\r\n}\r\n","/**\r\n * @typedef {import('micromark-util-types').Event} Event\r\n */\r\n\r\nimport {subtokenize} from 'micromark-util-subtokenize'\r\n\r\n/**\r\n * @param {Array<Event>} events\r\n * @returns {Array<Event>}\r\n */\r\nexport function postprocess(events) {\r\n  while (!subtokenize(events)) {\r\n    // Empty\r\n  }\r\n  return events\r\n}\r\n","/**\r\n * @typedef {import('mdast').Root} Root\r\n * @typedef {import('mdast-util-from-markdown').Options} Options\r\n */\r\n\r\nimport {fromMarkdown} from 'mdast-util-from-markdown'\r\n\r\n/**\r\n * @this {import('unified').Processor}\r\n * @type {import('unified').Plugin<[Options?] | void[], string, Root>}\r\n */\r\nexport default function remarkParse(options) {\r\n  /** @type {import('unified').ParserFunction<Root>} */\r\n  const parser = (doc) => {\r\n    // Assume options.\r\n    const settings = /** @type {Options} */ (this.data('settings'))\r\n\r\n    return fromMarkdown(\r\n      doc,\r\n      Object.assign({}, settings, options, {\r\n        // Note: these options are not in the readme.\r\n        // The goal is for them to be set by plugins on `data` instead of being\r\n        // passed by users.\r\n        extensions: this.data('micromarkExtensions') || [],\r\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\r\n      })\r\n    )\r\n  }\r\n\r\n  Object.assign(this, {Parser: parser})\r\n}\r\n","/**\r\n * @typedef {import('unist').Node} Node\r\n */\r\n\r\n/**\r\n * @typedef {Array<Node> | string} ChildrenOrValue\r\n *   List to use as `children` or value to use as `value`.\r\n *\r\n * @typedef {Record<string, unknown>} Props\r\n *   Other fields to add to the node.\r\n */\r\n\r\n/**\r\n * Build a node.\r\n *\r\n * @param type\r\n *   Node type.\r\n * @param props\r\n *   Fields assigned to node.\r\n * @param value\r\n *   Children of node or value of `node` (cast to string).\r\n * @returns\r\n *   Built node.\r\n */\r\nexport const u =\r\n  /**\r\n   * @type {(\r\n   *   (<T extends string>(type: T) => {type: T}) &\r\n   *   (<T extends string, P extends Props>(type: T, props: P) => {type: T} & P) &\r\n   *   (<T extends string>(type: T, value: string) => {type: T, value: string}) &\r\n   *   (<T extends string, P extends Props>(type: T, props: P, value: string) => {type: T, value: string} & P) &\r\n   *   (<T extends string, C extends Array<Node>>(type: T, children: C) => {type: T, children: C}) &\r\n   *   (<T extends string, P extends Props, C extends Array<Node>>(type: T, props: P, children: C) => {type: T, children: C} & P)\r\n   * )}\r\n   */\r\n  (\r\n    /**\r\n     * @param {string} type\r\n     * @param {Props | ChildrenOrValue | null | undefined} [props]\r\n     * @param {ChildrenOrValue | null | undefined} [value]\r\n     * @returns {Node}\r\n     */\r\n    function (type, props, value) {\r\n      /** @type {Node} */\r\n      const node = {type: String(type)}\r\n\r\n      if (\r\n        (value === undefined || value === null) &&\r\n        (typeof props === 'string' || Array.isArray(props))\r\n      ) {\r\n        value = props\r\n      } else {\r\n        Object.assign(node, props)\r\n      }\r\n\r\n      if (Array.isArray(value)) {\r\n        // @ts-expect-error: create a parent.\r\n        node.children = value\r\n      } else if (value !== undefined && value !== null) {\r\n        // @ts-expect-error: create a literal.\r\n        node.value = String(value)\r\n      }\r\n\r\n      return node\r\n    }\r\n  )\r\n","/**\r\n * @typedef {import('unist').Node} Node\r\n * @typedef {import('unist').Parent} Parent\r\n */\r\n\r\n/**\r\n * @typedef {Record<string, unknown>} Props\r\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\r\n *   Check for an arbitrary node, unaware of TypeScript inferral.\r\n *\r\n * @callback TestFunctionAnything\r\n *   Check if a node passes a test, unaware of TypeScript inferral.\r\n * @param {unknown} this\r\n *   The given context.\r\n * @param {Node} node\r\n *   A node.\r\n * @param {number | null | undefined} [index]\r\n *   The node’s position in its parent.\r\n * @param {Parent | null | undefined} [parent]\r\n *   The node’s parent.\r\n * @returns {boolean | void}\r\n *   Whether this node passes the test.\r\n */\r\n\r\n/**\r\n * @template {Node} Kind\r\n *   Node type.\r\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\r\n *   Check for a node that can be inferred by TypeScript.\r\n */\r\n\r\n/**\r\n * Check if a node passes a certain test.\r\n *\r\n * @template {Node} Kind\r\n *   Node type.\r\n * @callback TestFunctionPredicate\r\n *   Complex test function for a node that can be inferred by TypeScript.\r\n * @param {Node} node\r\n *   A node.\r\n * @param {number | null | undefined} [index]\r\n *   The node’s position in its parent.\r\n * @param {Parent | null | undefined} [parent]\r\n *   The node’s parent.\r\n * @returns {node is Kind}\r\n *   Whether this node passes the test.\r\n */\r\n\r\n/**\r\n * @callback AssertAnything\r\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\r\n * @param {unknown} [node]\r\n *   Anything (typically a node).\r\n * @param {number | null | undefined} [index]\r\n *   The node’s position in its parent.\r\n * @param {Parent | null | undefined} [parent]\r\n *   The node’s parent.\r\n * @returns {boolean}\r\n *   Whether this is a node and passes a test.\r\n */\r\n\r\n/**\r\n * Check if a node is a node and passes a certain node test.\r\n *\r\n * @template {Node} Kind\r\n *   Node type.\r\n * @callback AssertPredicate\r\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\r\n * @param {unknown} [node]\r\n *   Anything (typically a node).\r\n * @param {number | null | undefined} [index]\r\n *   The node’s position in its parent.\r\n * @param {Parent | null | undefined} [parent]\r\n *   The node’s parent.\r\n * @returns {node is Kind}\r\n *   Whether this is a node and passes a test.\r\n */\r\n\r\n/**\r\n * Check if `node` is a `Node` and whether it passes the given test.\r\n *\r\n * @param node\r\n *   Thing to check, typically `Node`.\r\n * @param test\r\n *   A check for a specific node.\r\n * @param index\r\n *   The node’s position in its parent.\r\n * @param parent\r\n *   The node’s parent.\r\n * @returns\r\n *   Whether `node` is a node and passes a test.\r\n */\r\nexport const is =\r\n  /**\r\n   * @type {(\r\n   *   (() => false) &\r\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\r\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\r\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\r\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\r\n   * )}\r\n   */\r\n  (\r\n    /**\r\n     * @param {unknown} [node]\r\n     * @param {Test} [test]\r\n     * @param {number | null | undefined} [index]\r\n     * @param {Parent | null | undefined} [parent]\r\n     * @param {unknown} [context]\r\n     * @returns {boolean}\r\n     */\r\n    // eslint-disable-next-line max-params\r\n    function is(node, test, index, parent, context) {\r\n      const check = convert(test)\r\n\r\n      if (\r\n        index !== undefined &&\r\n        index !== null &&\r\n        (typeof index !== 'number' ||\r\n          index < 0 ||\r\n          index === Number.POSITIVE_INFINITY)\r\n      ) {\r\n        throw new Error('Expected positive finite index')\r\n      }\r\n\r\n      if (\r\n        parent !== undefined &&\r\n        parent !== null &&\r\n        (!is(parent) || !parent.children)\r\n      ) {\r\n        throw new Error('Expected parent node')\r\n      }\r\n\r\n      if (\r\n        (parent === undefined || parent === null) !==\r\n        (index === undefined || index === null)\r\n      ) {\r\n        throw new Error('Expected both parent and index')\r\n      }\r\n\r\n      // @ts-expect-error Looks like a node.\r\n      return node && node.type && typeof node.type === 'string'\r\n        ? Boolean(check.call(context, node, index, parent))\r\n        : false\r\n    }\r\n  )\r\n\r\n/**\r\n * Generate an assertion from a test.\r\n *\r\n * Useful if you’re going to test many nodes, for example when creating a\r\n * utility where something else passes a compatible test.\r\n *\r\n * The created function is a bit faster because it expects valid input only:\r\n * a `node`, `index`, and `parent`.\r\n *\r\n * @param test\r\n *   *   when nullish, checks if `node` is a `Node`.\r\n *   *   when `string`, works like passing `(node) => node.type === test`.\r\n *   *   when `function` checks if function passed the node is true.\r\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\r\n *   *   when `array`, checks if any one of the subtests pass.\r\n * @returns\r\n *   An assertion.\r\n */\r\nexport const convert =\r\n  /**\r\n   * @type {(\r\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\r\n   *   ((test?: Test) => AssertAnything)\r\n   * )}\r\n   */\r\n  (\r\n    /**\r\n     * @param {Test} [test]\r\n     * @returns {AssertAnything}\r\n     */\r\n    function (test) {\r\n      if (test === undefined || test === null) {\r\n        return ok\r\n      }\r\n\r\n      if (typeof test === 'string') {\r\n        return typeFactory(test)\r\n      }\r\n\r\n      if (typeof test === 'object') {\r\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\r\n      }\r\n\r\n      if (typeof test === 'function') {\r\n        return castFactory(test)\r\n      }\r\n\r\n      throw new Error('Expected function, string, or object as test')\r\n    }\r\n  )\r\n\r\n/**\r\n * @param {Array<string | Props | TestFunctionAnything>} tests\r\n * @returns {AssertAnything}\r\n */\r\nfunction anyFactory(tests) {\r\n  /** @type {Array<AssertAnything>} */\r\n  const checks = []\r\n  let index = -1\r\n\r\n  while (++index < tests.length) {\r\n    checks[index] = convert(tests[index])\r\n  }\r\n\r\n  return castFactory(any)\r\n\r\n  /**\r\n   * @this {unknown}\r\n   * @param {Array<unknown>} parameters\r\n   * @returns {boolean}\r\n   */\r\n  function any(...parameters) {\r\n    let index = -1\r\n\r\n    while (++index < checks.length) {\r\n      if (checks[index].call(this, ...parameters)) return true\r\n    }\r\n\r\n    return false\r\n  }\r\n}\r\n\r\n/**\r\n * Turn an object into a test for a node with a certain fields.\r\n *\r\n * @param {Props} check\r\n * @returns {AssertAnything}\r\n */\r\nfunction propsFactory(check) {\r\n  return castFactory(all)\r\n\r\n  /**\r\n   * @param {Node} node\r\n   * @returns {boolean}\r\n   */\r\n  function all(node) {\r\n    /** @type {string} */\r\n    let key\r\n\r\n    for (key in check) {\r\n      // @ts-expect-error: hush, it sure works as an index.\r\n      if (node[key] !== check[key]) return false\r\n    }\r\n\r\n    return true\r\n  }\r\n}\r\n\r\n/**\r\n * Turn a string into a test for a node with a certain type.\r\n *\r\n * @param {string} check\r\n * @returns {AssertAnything}\r\n */\r\nfunction typeFactory(check) {\r\n  return castFactory(type)\r\n\r\n  /**\r\n   * @param {Node} node\r\n   */\r\n  function type(node) {\r\n    return node && node.type === check\r\n  }\r\n}\r\n\r\n/**\r\n * Turn a custom test into a test for a node that passes that test.\r\n *\r\n * @param {TestFunctionAnything} check\r\n * @returns {AssertAnything}\r\n */\r\nfunction castFactory(check) {\r\n  return assertion\r\n\r\n  /**\r\n   * @this {unknown}\r\n   * @param {unknown} node\r\n   * @param {Array<unknown>} parameters\r\n   * @returns {boolean}\r\n   */\r\n  function assertion(node, ...parameters) {\r\n    return Boolean(\r\n      node &&\r\n        typeof node === 'object' &&\r\n        'type' in node &&\r\n        // @ts-expect-error: fine.\r\n        Boolean(check.call(this, node, ...parameters))\r\n    )\r\n  }\r\n}\r\n\r\nfunction ok() {\r\n  return true\r\n}\r\n","/**\r\n * @typedef {import('unist').Node} Node\r\n * @typedef {import('unist').Parent} Parent\r\n * @typedef {import('unist-util-is').Test} Test\r\n */\r\n\r\n/**\r\n * @typedef {boolean | 'skip'} Action\r\n *   Union of the action types.\r\n *\r\n * @typedef {number} Index\r\n *   Move to the sibling at `index` next (after node itself is completely\r\n *   traversed).\r\n *\r\n *   Useful if mutating the tree, such as removing the node the visitor is\r\n *   currently on, or any of its previous siblings.\r\n *   Results less than 0 or greater than or equal to `children.length` stop\r\n *   traversing the parent.\r\n *\r\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\r\n *   List with one or two values, the first an action, the second an index.\r\n *\r\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\r\n *   Any value that can be returned from a visitor.\r\n */\r\n\r\n/**\r\n * @template {Node} [Visited=Node]\r\n *   Visited node type.\r\n * @template {Parent} [Ancestor=Parent]\r\n *   Ancestor type.\r\n * @callback Visitor\r\n *   Handle a node (matching `test`, if given).\r\n *\r\n *   Visitors are free to transform `node`.\r\n *   They can also transform the parent of node (the last of `ancestors`).\r\n *\r\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\r\n *   descendants to be walked (which is a bug).\r\n *\r\n *   When adding or removing previous siblings of `node` (or next siblings, in\r\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\r\n *   sibling to traverse after `node` is traversed.\r\n *   Adding or removing next siblings of `node` (or previous siblings, in case\r\n *   of reverse) is handled as expected without needing to return a new `Index`.\r\n *\r\n *   Removing the children property of an ancestor still results in them being\r\n *   traversed.\r\n * @param {Visited} node\r\n *   Found node.\r\n * @param {Array<Ancestor>} ancestors\r\n *   Ancestors of `node`.\r\n * @returns {VisitorResult}\r\n *   What to do next.\r\n *\r\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\r\n *   An `Action` is treated as a tuple of `[Action]`.\r\n *\r\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\r\n *   When the `Action` is `EXIT`, that action can be returned.\r\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\r\n */\r\n\r\n/**\r\n * @template {Node} [Tree=Node]\r\n *   Tree type.\r\n * @template {Test} [Check=string]\r\n *   Test type.\r\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\r\n *   Build a typed `Visitor` function from a tree and a test.\r\n *\r\n *   It will infer which values are passed as `node` and which as `parents`.\r\n */\r\n\r\nimport {convert} from 'unist-util-is'\r\nimport {color} from './color.js'\r\n\r\n/**\r\n * Continue traversing as normal.\r\n */\r\nexport const CONTINUE = true\r\n\r\n/**\r\n * Stop traversing immediately.\r\n */\r\nexport const EXIT = false\r\n\r\n/**\r\n * Do not traverse this node’s children.\r\n */\r\nexport const SKIP = 'skip'\r\n\r\n/**\r\n * Visit nodes, with ancestral information.\r\n *\r\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\r\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\r\n *\r\n * You can choose for which nodes `visitor` is called by passing a `test`.\r\n * For complex tests, you should test yourself in `visitor`, as it will be\r\n * faster and will have improved type information.\r\n *\r\n * Walking the tree is an intensive task.\r\n * Make use of the return values of the visitor when possible.\r\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\r\n * to check if a node matches, and then perform different operations.\r\n *\r\n * You can change the tree.\r\n * See `Visitor` for more info.\r\n *\r\n * @param tree\r\n *   Tree to traverse.\r\n * @param test\r\n *   `unist-util-is`-compatible test\r\n * @param visitor\r\n *   Handle each node.\r\n * @param reverse\r\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\r\n * @returns\r\n *   Nothing.\r\n */\r\nexport const visitParents =\r\n  /**\r\n   * @type {(\r\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\r\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\r\n   * )}\r\n   */\r\n  (\r\n    /**\r\n     * @param {Node} tree\r\n     * @param {Test} test\r\n     * @param {Visitor<Node>} visitor\r\n     * @param {boolean | null | undefined} [reverse]\r\n     * @returns {void}\r\n     */\r\n    function (tree, test, visitor, reverse) {\r\n      if (typeof test === 'function' && typeof visitor !== 'function') {\r\n        reverse = visitor\r\n        // @ts-expect-error no visitor given, so `visitor` is test.\r\n        visitor = test\r\n        test = null\r\n      }\r\n\r\n      const is = convert(test)\r\n      const step = reverse ? -1 : 1\r\n\r\n      factory(tree, undefined, [])()\r\n\r\n      /**\r\n       * @param {Node} node\r\n       * @param {number | undefined} index\r\n       * @param {Array<Parent>} parents\r\n       */\r\n      function factory(node, index, parents) {\r\n        /** @type {Record<string, unknown>} */\r\n        // @ts-expect-error: hush\r\n        const value = node && typeof node === 'object' ? node : {}\r\n\r\n        if (typeof value.type === 'string') {\r\n          const name =\r\n            // `hast`\r\n            typeof value.tagName === 'string'\r\n              ? value.tagName\r\n              : // `xast`\r\n              typeof value.name === 'string'\r\n              ? value.name\r\n              : undefined\r\n\r\n          Object.defineProperty(visit, 'name', {\r\n            value:\r\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\r\n          })\r\n        }\r\n\r\n        return visit\r\n\r\n        function visit() {\r\n          /** @type {ActionTuple} */\r\n          let result = []\r\n          /** @type {ActionTuple} */\r\n          let subresult\r\n          /** @type {number} */\r\n          let offset\r\n          /** @type {Array<Parent>} */\r\n          let grandparents\r\n\r\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\r\n            result = toResult(visitor(node, parents))\r\n\r\n            if (result[0] === EXIT) {\r\n              return result\r\n            }\r\n          }\r\n\r\n          // @ts-expect-error looks like a parent.\r\n          if (node.children && result[0] !== SKIP) {\r\n            // @ts-expect-error looks like a parent.\r\n            offset = (reverse ? node.children.length : -1) + step\r\n            // @ts-expect-error looks like a parent.\r\n            grandparents = parents.concat(node)\r\n\r\n            // @ts-expect-error looks like a parent.\r\n            while (offset > -1 && offset < node.children.length) {\r\n              // @ts-expect-error looks like a parent.\r\n              subresult = factory(node.children[offset], offset, grandparents)()\r\n\r\n              if (subresult[0] === EXIT) {\r\n                return subresult\r\n              }\r\n\r\n              offset =\r\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\r\n            }\r\n          }\r\n\r\n          return result\r\n        }\r\n      }\r\n    }\r\n  )\r\n\r\n/**\r\n * Turn a return value into a clean result.\r\n *\r\n * @param {VisitorResult} value\r\n *   Valid return values from visitors.\r\n * @returns {ActionTuple}\r\n *   Clean result.\r\n */\r\nfunction toResult(value) {\r\n  if (Array.isArray(value)) {\r\n    return value\r\n  }\r\n\r\n  if (typeof value === 'number') {\r\n    return [CONTINUE, value]\r\n  }\r\n\r\n  return [value]\r\n}\r\n","/**\r\n * @typedef {import('unist').Node} Node\r\n * @typedef {import('unist').Parent} Parent\r\n * @typedef {import('unist-util-is').Test} Test\r\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\r\n */\r\n\r\n/**\r\n * Check if `Child` can be a child of `Ancestor`.\r\n *\r\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\r\n * `never`.\r\n *\r\n * @template {Node} Ancestor\r\n *   Node type.\r\n * @template {Node} Child\r\n *   Node type.\r\n * @typedef {(\r\n *   Ancestor extends Parent\r\n *     ? Child extends Ancestor['children'][number]\r\n *       ? Ancestor\r\n *       : never\r\n *     : never\r\n * )} ParentsOf\r\n */\r\n\r\n/**\r\n * @template {Node} [Visited=Node]\r\n *   Visited node type.\r\n * @template {Parent} [Ancestor=Parent]\r\n *   Ancestor type.\r\n * @callback Visitor\r\n *   Handle a node (matching `test`, if given).\r\n *\r\n *   Visitors are free to transform `node`.\r\n *   They can also transform `parent`.\r\n *\r\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\r\n *   descendants to be walked (which is a bug).\r\n *\r\n *   When adding or removing previous siblings of `node` (or next siblings, in\r\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\r\n *   sibling to traverse after `node` is traversed.\r\n *   Adding or removing next siblings of `node` (or previous siblings, in case\r\n *   of reverse) is handled as expected without needing to return a new `Index`.\r\n *\r\n *   Removing the children property of `parent` still results in them being\r\n *   traversed.\r\n * @param {Visited} node\r\n *   Found node.\r\n * @param {Visited extends Node ? number | null : never} index\r\n *   Index of `node` in `parent`.\r\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\r\n *   Parent of `node`.\r\n * @returns {VisitorResult}\r\n *   What to do next.\r\n *\r\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\r\n *   An `Action` is treated as a tuple of `[Action]`.\r\n *\r\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\r\n *   When the `Action` is `EXIT`, that action can be returned.\r\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\r\n */\r\n\r\n/**\r\n * Build a typed `Visitor` function from a node and all possible parents.\r\n *\r\n * It will infer which values are passed as `node` and which as `parent`.\r\n *\r\n * @template {Node} Visited\r\n *   Node type.\r\n * @template {Parent} Ancestor\r\n *   Parent type.\r\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\r\n */\r\n\r\n/**\r\n * Build a typed `Visitor` function from a list of descendants and a test.\r\n *\r\n * It will infer which values are passed as `node` and which as `parent`.\r\n *\r\n * @template {Node} Descendant\r\n *   Node type.\r\n * @template {Test} Check\r\n *   Test type.\r\n * @typedef {(\r\n *   BuildVisitorFromMatch<\r\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\r\n *     Extract<Descendant, Parent>\r\n *   >\r\n * )} BuildVisitorFromDescendants\r\n */\r\n\r\n/**\r\n * Build a typed `Visitor` function from a tree and a test.\r\n *\r\n * It will infer which values are passed as `node` and which as `parent`.\r\n *\r\n * @template {Node} [Tree=Node]\r\n *   Node type.\r\n * @template {Test} [Check=string]\r\n *   Test type.\r\n * @typedef {(\r\n *   BuildVisitorFromDescendants<\r\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\r\n *     Check\r\n *   >\r\n * )} BuildVisitor\r\n */\r\n\r\nimport {visitParents} from 'unist-util-visit-parents'\r\n\r\n/**\r\n * Visit nodes.\r\n *\r\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\r\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\r\n *\r\n * You can choose for which nodes `visitor` is called by passing a `test`.\r\n * For complex tests, you should test yourself in `visitor`, as it will be\r\n * faster and will have improved type information.\r\n *\r\n * Walking the tree is an intensive task.\r\n * Make use of the return values of the visitor when possible.\r\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\r\n * to check if a node matches, and then perform different operations.\r\n *\r\n * You can change the tree.\r\n * See `Visitor` for more info.\r\n *\r\n * @param tree\r\n *   Tree to traverse.\r\n * @param test\r\n *   `unist-util-is`-compatible test\r\n * @param visitor\r\n *   Handle each node.\r\n * @param reverse\r\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\r\n * @returns\r\n *   Nothing.\r\n */\r\nexport const visit =\r\n  /**\r\n   * @type {(\r\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\r\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\r\n   * )}\r\n   */\r\n  (\r\n    /**\r\n     * @param {Node} tree\r\n     * @param {Test} test\r\n     * @param {Visitor} visitor\r\n     * @param {boolean | null | undefined} [reverse]\r\n     * @returns {void}\r\n     */\r\n    function (tree, test, visitor, reverse) {\r\n      if (typeof test === 'function' && typeof visitor !== 'function') {\r\n        reverse = visitor\r\n        visitor = test\r\n        test = null\r\n      }\r\n\r\n      visitParents(tree, test, overload, reverse)\r\n\r\n      /**\r\n       * @param {Node} node\r\n       * @param {Array<Parent>} parents\r\n       */\r\n      function overload(node, parents) {\r\n        const parent = parents[parents.length - 1]\r\n        return visitor(\r\n          node,\r\n          parent ? parent.children.indexOf(node) : null,\r\n          parent\r\n        )\r\n      }\r\n    }\r\n  )\r\n\r\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\r\n","/**\r\n * @typedef {import('unist').Position} Position\r\n * @typedef {import('unist').Node} Node\r\n * @typedef {import('unist').Point} Point\r\n */\r\n\r\n/**\r\n * @typedef NodeLike\r\n * @property {string} type\r\n * @property {PositionLike | null | undefined} [position]\r\n *\r\n * @typedef PositionLike\r\n * @property {PointLike | null | undefined} [start]\r\n * @property {PointLike | null | undefined} [end]\r\n *\r\n * @typedef PointLike\r\n * @property {number | null | undefined} [line]\r\n * @property {number | null | undefined} [column]\r\n * @property {number | null | undefined} [offset]\r\n */\r\n\r\n/**\r\n * Get the starting point of `node`.\r\n *\r\n * @param node\r\n *   Node.\r\n * @returns\r\n *   Point.\r\n */\r\nexport const pointStart = point('start')\r\n\r\n/**\r\n * Get the ending point of `node`.\r\n *\r\n * @param node\r\n *   Node.\r\n * @returns\r\n *   Point.\r\n */\r\nexport const pointEnd = point('end')\r\n\r\n/**\r\n * Get the positional info of `node`.\r\n *\r\n * @param {NodeLike | Node | null | undefined} [node]\r\n *   Node.\r\n * @returns {Position}\r\n *   Position.\r\n */\r\nexport function position(node) {\r\n  return {start: pointStart(node), end: pointEnd(node)}\r\n}\r\n\r\n/**\r\n * Get the positional info of `node`.\r\n *\r\n * @param {'start' | 'end'} type\r\n *   Side.\r\n * @returns\r\n *   Getter.\r\n */\r\nfunction point(type) {\r\n  return point\r\n\r\n  /**\r\n   * Get the point info of `node` at a bound side.\r\n   *\r\n   * @param {NodeLike | Node | null | undefined} [node]\r\n   * @returns {Point}\r\n   */\r\n  function point(node) {\r\n    const point = (node && node.position && node.position[type]) || {}\r\n\r\n    // To do: next major: don’t return points when invalid.\r\n    return {\r\n      // @ts-expect-error: in practice, null is allowed.\r\n      line: point.line || null,\r\n      // @ts-expect-error: in practice, null is allowed.\r\n      column: point.column || null,\r\n      // @ts-expect-error: in practice, null is allowed.\r\n      offset: point.offset > -1 ? point.offset : null\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @typedef {import('mdast').Root} Root\r\n * @typedef {import('mdast').Content} Content\r\n * @typedef {import('mdast').Definition} Definition\r\n */\r\n\r\n/**\r\n * @typedef {Root | Content} Node\r\n *\r\n * @callback GetDefinition\r\n *   Get a definition by identifier.\r\n * @param {string | null | undefined} [identifier]\r\n *   Identifier of definition.\r\n * @returns {Definition | null}\r\n *   Definition corresponding to `identifier` or `null`.\r\n */\r\n\r\nimport {visit} from 'unist-util-visit'\r\n\r\nconst own = {}.hasOwnProperty\r\n\r\n/**\r\n * Find definitions in `tree`.\r\n *\r\n * Uses CommonMark precedence, which means that earlier definitions are\r\n * preferred over duplicate later definitions.\r\n *\r\n * @param {Node} tree\r\n *   Tree to check.\r\n * @returns {GetDefinition}\r\n *   Getter.\r\n */\r\nexport function definitions(tree) {\r\n  /** @type {Record<string, Definition>} */\r\n  const cache = Object.create(null)\r\n\r\n  if (!tree || !tree.type) {\r\n    throw new Error('mdast-util-definitions expected node')\r\n  }\r\n\r\n  visit(tree, 'definition', (definition) => {\r\n    const id = clean(definition.identifier)\r\n    if (id && !own.call(cache, id)) {\r\n      cache[id] = definition\r\n    }\r\n  })\r\n\r\n  return definition\r\n\r\n  /** @type {GetDefinition} */\r\n  function definition(identifier) {\r\n    const id = clean(identifier)\r\n    // To do: next major: return `undefined` when not found.\r\n    return id && own.call(cache, id) ? cache[id] : null\r\n  }\r\n}\r\n\r\n/**\r\n * @param {string | null | undefined} [value]\r\n * @returns {string}\r\n */\r\nfunction clean(value) {\r\n  return String(value || '').toUpperCase()\r\n}\r\n","/**\r\n * @typedef {import('mdast').Root|import('mdast').Parent['children'][number]} MdastNode\r\n * @typedef {import('./index.js').H} H\r\n * @typedef {import('./index.js').Handler} Handler\r\n * @typedef {import('./index.js').Content} Content\r\n */\r\n\r\nimport {u} from 'unist-builder'\r\n\r\nconst own = {}.hasOwnProperty\r\n\r\n/**\r\n * Transform an unknown node.\r\n * @type {Handler}\r\n * @param {MdastNode} node\r\n */\r\nfunction unknown(h, node) {\r\n  const data = node.data || {}\r\n\r\n  if (\r\n    'value' in node &&\r\n    !(\r\n      own.call(data, 'hName') ||\r\n      own.call(data, 'hProperties') ||\r\n      own.call(data, 'hChildren')\r\n    )\r\n  ) {\r\n    return h.augment(node, u('text', node.value))\r\n  }\r\n\r\n  return h(node, 'div', all(h, node))\r\n}\r\n\r\n/**\r\n * @type {Handler}\r\n * @param {MdastNode} node\r\n */\r\nexport function one(h, node, parent) {\r\n  const type = node && node.type\r\n  /** @type {Handler} */\r\n  let fn\r\n\r\n  // Fail on non-nodes.\r\n  if (!type) {\r\n    throw new Error('Expected node, got `' + node + '`')\r\n  }\r\n\r\n  if (own.call(h.handlers, type)) {\r\n    fn = h.handlers[type]\r\n  } else if (h.passThrough && h.passThrough.includes(type)) {\r\n    fn = returnNode\r\n  } else {\r\n    fn = h.unknownHandler\r\n  }\r\n\r\n  return (typeof fn === 'function' ? fn : unknown)(h, node, parent)\r\n}\r\n\r\n/**\r\n * @type {Handler}\r\n * @param {MdastNode} node\r\n */\r\nfunction returnNode(h, node) {\r\n  // @ts-expect-error: Pass through custom node.\r\n  return 'children' in node ? {...node, children: all(h, node)} : node\r\n}\r\n\r\n/**\r\n * @param {H} h\r\n * @param {MdastNode} parent\r\n */\r\nexport function all(h, parent) {\r\n  /** @type {Array.<Content>} */\r\n  const values = []\r\n\r\n  if ('children' in parent) {\r\n    const nodes = parent.children\r\n    let index = -1\r\n\r\n    while (++index < nodes.length) {\r\n      const result = one(h, nodes[index], parent)\r\n\r\n      if (result) {\r\n        if (index && nodes[index - 1].type === 'break') {\r\n          if (!Array.isArray(result) && result.type === 'text') {\r\n            result.value = result.value.replace(/^\\s+/, '')\r\n          }\r\n\r\n          if (!Array.isArray(result) && result.type === 'element') {\r\n            const head = result.children[0]\r\n\r\n            if (head && head.type === 'text') {\r\n              head.value = head.value.replace(/^\\s+/, '')\r\n            }\r\n          }\r\n        }\r\n\r\n        if (Array.isArray(result)) {\r\n          values.push(...result)\r\n        } else {\r\n          values.push(result)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return values\r\n}\r\n","/**\r\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('../index.js').Handler} Handler\r\n */\r\n\r\n/**\r\n * @type {Handler}\r\n * @param {ThematicBreak} [node]\r\n * @returns {Element}\r\n */\r\nexport function thematicBreak(h, node) {\r\n  return h(node, 'hr')\r\n}\r\n","/**\r\n * @typedef {import('./index.js').Content} Content\r\n */\r\n\r\nimport {u} from 'unist-builder'\r\n\r\n/**\r\n * Wrap `nodes` with line feeds between each entry.\r\n * Optionally adds line feeds at the start and end.\r\n *\r\n * @param {Array.<Content>} nodes\r\n * @param {boolean} [loose=false]\r\n * @returns {Array.<Content>}\r\n */\r\nexport function wrap(nodes, loose) {\r\n  /** @type {Array.<Content>} */\r\n  const result = []\r\n  let index = -1\r\n\r\n  if (loose) {\r\n    result.push(u('text', '\\n'))\r\n  }\r\n\r\n  while (++index < nodes.length) {\r\n    if (index) result.push(u('text', '\\n'))\r\n    result.push(nodes[index])\r\n  }\r\n\r\n  if (loose && nodes.length > 0) {\r\n    result.push(u('text', '\\n'))\r\n  }\r\n\r\n  return result\r\n}\r\n","/**\r\n * @typedef {import('mdast').List} List\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').Properties} Properties\r\n * @typedef {import('../index.js').Handler} Handler\r\n */\r\n\r\nimport {wrap} from '../wrap.js'\r\nimport {all} from '../traverse.js'\r\n\r\n/**\r\n * @type {Handler}\r\n * @param {List} node\r\n * @returns {Element}\r\n */\r\nexport function list(h, node) {\r\n  /** @type {Properties} */\r\n  const props = {}\r\n  const name = node.ordered ? 'ol' : 'ul'\r\n  const items = all(h, node)\r\n  let index = -1\r\n\r\n  if (typeof node.start === 'number' && node.start !== 1) {\r\n    props.start = node.start\r\n  }\r\n\r\n  // Like GitHub, add a class for custom styling.\r\n  while (++index < items.length) {\r\n    const item = items[index]\r\n\r\n    if (\r\n      item.type === 'element' &&\r\n      item.tagName === 'li' &&\r\n      item.properties &&\r\n      Array.isArray(item.properties.className) &&\r\n      item.properties.className.includes('task-list-item')\r\n    ) {\r\n      props.className = ['contains-task-list']\r\n      break\r\n    }\r\n  }\r\n\r\n  return h(node, name, props, wrap(items, true))\r\n}\r\n","/**\r\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\r\n * @typedef {import('../index.js').Handler} Handler\r\n */\r\n\r\nimport {u} from 'unist-builder'\r\n\r\n/**\r\n * @type {Handler}\r\n * @param {FootnoteReference} node\r\n */\r\nexport function footnoteReference(h, node) {\r\n  const footnoteOrder = h.footnoteOrder\r\n  const identifier = String(node.identifier)\r\n  const index = footnoteOrder.indexOf(identifier)\r\n  const marker = String(\r\n    index === -1 ? footnoteOrder.push(identifier) : index + 1\r\n  )\r\n\r\n  return h(\r\n    node,\r\n    'a',\r\n    {\r\n      href: '#fn' + marker,\r\n      className: ['footnote-ref'],\r\n      id: 'fnref' + marker,\r\n      role: 'doc-noteref'\r\n    },\r\n    [h(node.position, 'sup', [u('text', marker)])]\r\n  )\r\n}\r\n","/**\r\n * @typedef {import('mdast').LinkReference} LinkReference\r\n * @typedef {import('mdast').ImageReference} ImageReference\r\n * @typedef {import('./index.js').Handler} Handler\r\n * @typedef {import('./index.js').Content} Content\r\n */\r\n\r\nimport {u} from 'unist-builder'\r\nimport {all} from './traverse.js'\r\n\r\n/**\r\n * Return the content of a reference without definition as plain text.\r\n *\r\n * @type {Handler}\r\n * @param {ImageReference|LinkReference} node\r\n * @returns {Content|Array.<Content>}\r\n */\r\nexport function revert(h, node) {\r\n  const subtype = node.referenceType\r\n  let suffix = ']'\r\n\r\n  if (subtype === 'collapsed') {\r\n    suffix += '[]'\r\n  } else if (subtype === 'full') {\r\n    suffix += '[' + (node.label || node.identifier) + ']'\r\n  }\r\n\r\n  if (node.type === 'imageReference') {\r\n    return u('text', '![' + node.alt + suffix)\r\n  }\r\n\r\n  const contents = all(h, node)\r\n  const head = contents[0]\r\n\r\n  if (head && head.type === 'text') {\r\n    head.value = '[' + head.value\r\n  } else {\r\n    contents.unshift(u('text', '['))\r\n  }\r\n\r\n  const tail = contents[contents.length - 1]\r\n\r\n  if (tail && tail.type === 'text') {\r\n    tail.value += suffix\r\n  } else {\r\n    contents.push(u('text', suffix))\r\n  }\r\n\r\n  return contents\r\n}\r\n","/**\r\n * @typedef {import('mdast').ListItem} ListItem\r\n * @typedef {import('mdast').List} List\r\n * @typedef {import('hast').Properties} Properties\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('../index.js').Handler} Handler\r\n * @typedef {import('../index.js').Content} Content\r\n */\r\n\r\nimport {u} from 'unist-builder'\r\nimport {all} from '../traverse.js'\r\n\r\n/**\r\n * @type {Handler}\r\n * @param {ListItem} node\r\n * @param {List} parent\r\n */\r\nexport function listItem(h, node, parent) {\r\n  const result = all(h, node)\r\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\r\n  /** @type {Properties} */\r\n  const props = {}\r\n  /** @type {Array.<Content>} */\r\n  const wrapped = []\r\n\r\n  if (typeof node.checked === 'boolean') {\r\n    /** @type {Element} */\r\n    let paragraph\r\n\r\n    if (\r\n      result[0] &&\r\n      result[0].type === 'element' &&\r\n      result[0].tagName === 'p'\r\n    ) {\r\n      paragraph = result[0]\r\n    } else {\r\n      paragraph = h(null, 'p', [])\r\n      result.unshift(paragraph)\r\n    }\r\n\r\n    if (paragraph.children.length > 0) {\r\n      paragraph.children.unshift(u('text', ' '))\r\n    }\r\n\r\n    paragraph.children.unshift(\r\n      h(null, 'input', {\r\n        type: 'checkbox',\r\n        checked: node.checked,\r\n        disabled: true\r\n      })\r\n    )\r\n\r\n    // According to github-markdown-css, this class hides bullet.\r\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\r\n    props.className = ['task-list-item']\r\n  }\r\n\r\n  let index = -1\r\n\r\n  while (++index < result.length) {\r\n    const child = result[index]\r\n\r\n    // Add eols before nodes, except if this is a loose, first paragraph.\r\n    if (\r\n      loose ||\r\n      index !== 0 ||\r\n      child.type !== 'element' ||\r\n      child.tagName !== 'p'\r\n    ) {\r\n      wrapped.push(u('text', '\\n'))\r\n    }\r\n\r\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\r\n      wrapped.push(...child.children)\r\n    } else {\r\n      wrapped.push(child)\r\n    }\r\n  }\r\n\r\n  const tail = result[result.length - 1]\r\n\r\n  // Add a final eol.\r\n  if (tail && (loose || !('tagName' in tail) || tail.tagName !== 'p')) {\r\n    wrapped.push(u('text', '\\n'))\r\n  }\r\n\r\n  return h(node, 'li', props, wrapped)\r\n}\r\n\r\n/**\r\n * @param {List} node\r\n * @return {Boolean}\r\n */\r\nfunction listLoose(node) {\r\n  let loose = node.spread\r\n  const children = node.children\r\n  let index = -1\r\n\r\n  while (!loose && ++index < children.length) {\r\n    loose = listItemLoose(children[index])\r\n  }\r\n\r\n  return Boolean(loose)\r\n}\r\n\r\n/**\r\n * @param {ListItem} node\r\n * @return {Boolean}\r\n */\r\nfunction listItemLoose(node) {\r\n  const spread = node.spread\r\n\r\n  return spread === undefined || spread === null\r\n    ? node.children.length > 1\r\n    : spread\r\n}\r\n","import {blockquote} from './blockquote.js'\r\nimport {hardBreak} from './break.js'\r\nimport {code} from './code.js'\r\nimport {strikethrough} from './delete.js'\r\nimport {emphasis} from './emphasis.js'\r\nimport {footnoteReference} from './footnote-reference.js'\r\nimport {footnote} from './footnote.js'\r\nimport {heading} from './heading.js'\r\nimport {html} from './html.js'\r\nimport {imageReference} from './image-reference.js'\r\nimport {image} from './image.js'\r\nimport {inlineCode} from './inline-code.js'\r\nimport {linkReference} from './link-reference.js'\r\nimport {link} from './link.js'\r\nimport {listItem} from './list-item.js'\r\nimport {list} from './list.js'\r\nimport {paragraph} from './paragraph.js'\r\nimport {root} from './root.js'\r\nimport {strong} from './strong.js'\r\nimport {table} from './table.js'\r\nimport {text} from './text.js'\r\nimport {thematicBreak} from './thematic-break.js'\r\n\r\nexport const handlers = {\r\n  blockquote,\r\n  break: hardBreak,\r\n  code,\r\n  delete: strikethrough,\r\n  emphasis,\r\n  footnoteReference,\r\n  footnote,\r\n  heading,\r\n  html,\r\n  imageReference,\r\n  image,\r\n  inlineCode,\r\n  linkReference,\r\n  link,\r\n  listItem,\r\n  list,\r\n  paragraph,\r\n  root,\r\n  strong,\r\n  table,\r\n  text,\r\n  thematicBreak,\r\n  toml: ignore,\r\n  yaml: ignore,\r\n  definition: ignore,\r\n  footnoteDefinition: ignore\r\n}\r\n\r\n// Return nothing for nodes that are ignored.\r\nfunction ignore() {\r\n  return null\r\n}\r\n","/**\r\n * @typedef {import('mdast').Blockquote} Blockquote\r\n * @typedef {import('../index.js').Handler} Handler\r\n */\r\n\r\nimport {wrap} from '../wrap.js'\r\nimport {all} from '../traverse.js'\r\n\r\n/**\r\n * @type {Handler}\r\n * @param {Blockquote} node\r\n */\r\nexport function blockquote(h, node) {\r\n  return h(node, 'blockquote', wrap(all(h, node), true))\r\n}\r\n","/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').Text} Text\r\n * @typedef {import('mdast').Break} Break\r\n * @typedef {import('../index.js').Handler} Handler\r\n */\r\n\r\nimport {u} from 'unist-builder'\r\n\r\n/**\r\n * @type {Handler}\r\n * @param {Break} node\r\n * @returns {Array<Element|Text>}\r\n */\r\nexport function hardBreak(h, node) {\r\n  return [h(node, 'br'), u('text', '\\n')]\r\n}\r\n","/**\r\n * @typedef {import('mdast').Code} Code\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').Properties} Properties\r\n * @typedef {import('../index.js').Handler} Handler\r\n */\r\n\r\nimport {u} from 'unist-builder'\r\n\r\n/**\r\n * @type {Handler}\r\n * @param {Code} node\r\n */\r\nexport function code(h, node) {\r\n  const value = node.value ? node.value + '\\n' : ''\r\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\r\n  // on for years in remark now.\r\n  const lang = node.lang && node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/)\r\n  /** @type {Properties} */\r\n  const props = {}\r\n\r\n  if (lang) {\r\n    props.className = ['language-' + lang]\r\n  }\r\n\r\n  const code = h(node, 'code', props, [u('text', value)])\r\n\r\n  if (node.meta) {\r\n    code.data = {meta: node.meta}\r\n  }\r\n\r\n  return h(node.position, 'pre', [code])\r\n}\r\n","/**\r\n * @typedef {import('mdast').Delete} Delete\r\n * @typedef {import('../index.js').Handler} Handler\r\n */\r\n\r\nimport {all} from '../traverse.js'\r\n\r\n/**\r\n * @type {Handler}\r\n * @param {Delete} node\r\n */\r\nexport function strikethrough(h, node) {\r\n  return h(node, 'del', all(h, node))\r\n}\r\n","/**\r\n * @typedef {import('mdast').Emphasis} Emphasis\r\n * @typedef {import('../index.js').Handler} Handler\r\n */\r\n\r\nimport {all} from '../traverse.js'\r\n\r\n/**\r\n * @type {Handler}\r\n * @param {Emphasis} node\r\n */\r\nexport function emphasis(h, node) {\r\n  return h(node, 'em', all(h, node))\r\n}\r\n","/**\r\n * @typedef {import('mdast').Footnote} Footnote\r\n * @typedef {import('../index.js').Handler} Handler\r\n */\r\n\r\nimport {footnoteReference} from './footnote-reference.js'\r\n\r\n/**\r\n * @type {Handler}\r\n * @param {Footnote} node\r\n */\r\nexport function footnote(h, node) {\r\n  const footnoteById = h.footnoteById\r\n  const footnoteOrder = h.footnoteOrder\r\n  let no = 1\r\n\r\n  while (no in footnoteById) no++\r\n\r\n  const identifier = String(no)\r\n\r\n  // No need to check if `identifier` exists in `footnoteOrder`, it’s guaranteed\r\n  // to not exist because we just generated it.\r\n  footnoteOrder.push(identifier)\r\n\r\n  footnoteById[identifier] = {\r\n    type: 'footnoteDefinition',\r\n    identifier,\r\n    children: [{type: 'paragraph', children: node.children}],\r\n    position: node.position\r\n  }\r\n\r\n  return footnoteReference(h, {\r\n    type: 'footnoteReference',\r\n    identifier,\r\n    position: node.position\r\n  })\r\n}\r\n","/**\r\n * @typedef {import('mdast').Heading} Heading\r\n * @typedef {import('../index.js').Handler} Handler\r\n */\r\n\r\nimport {all} from '../traverse.js'\r\n\r\n/**\r\n * @type {Handler}\r\n * @param {Heading} node\r\n */\r\nexport function heading(h, node) {\r\n  return h(node, 'h' + node.depth, all(h, node))\r\n}\r\n","/**\r\n * @typedef {import('mdast').HTML} HTML\r\n * @typedef {import('../index.js').Handler} Handler\r\n */\r\n\r\nimport {u} from 'unist-builder'\r\n\r\n/**\r\n * Return either a `raw` node in dangerous mode, otherwise nothing.\r\n *\r\n * @type {Handler}\r\n * @param {HTML} node\r\n */\r\nexport function html(h, node) {\r\n  return h.dangerous ? h.augment(node, u('raw', node.value)) : null\r\n}\r\n","/**\r\n * @typedef {import('mdast').ImageReference} ImageReference\r\n * @typedef {import('hast').Properties} Properties\r\n * @typedef {import('../index.js').Handler} Handler\r\n */\r\n\r\nimport normalize from 'mdurl/encode.js'\r\nimport {revert} from '../revert.js'\r\n\r\n/**\r\n * @type {Handler}\r\n * @param {ImageReference} node\r\n */\r\nexport function imageReference(h, node) {\r\n  const def = h.definition(node.identifier)\r\n\r\n  if (!def) {\r\n    return revert(h, node)\r\n  }\r\n\r\n  /** @type {Properties} */\r\n  const props = {src: normalize(def.url || ''), alt: node.alt}\r\n\r\n  if (def.title !== null && def.title !== undefined) {\r\n    props.title = def.title\r\n  }\r\n\r\n  return h(node, 'img', props)\r\n}\r\n","/**\r\n * @typedef {import('mdast').Image} Image\r\n * @typedef {import('hast').Properties} Properties\r\n * @typedef {import('../index.js').Handler} Handler\r\n */\r\n\r\nimport normalize from 'mdurl/encode.js'\r\n\r\n/**\r\n * @type {Handler}\r\n * @param {Image} node\r\n */\r\nexport function image(h, node) {\r\n  /** @type {Properties} */\r\n  const props = {src: normalize(node.url), alt: node.alt}\r\n\r\n  if (node.title !== null && node.title !== undefined) {\r\n    props.title = node.title\r\n  }\r\n\r\n  return h(node, 'img', props)\r\n}\r\n","/**\r\n * @typedef {import('mdast').InlineCode} InlineCode\r\n * @typedef {import('../index.js').Handler} Handler\r\n */\r\n\r\nimport {u} from 'unist-builder'\r\n\r\n/**\r\n * @type {Handler}\r\n * @param {InlineCode} node\r\n */\r\nexport function inlineCode(h, node) {\r\n  return h(node, 'code', [u('text', node.value.replace(/\\r?\\n|\\r/g, ' '))])\r\n}\r\n","/**\r\n * @typedef {import('mdast').LinkReference} LinkReference\r\n * @typedef {import('hast').Properties} Properties\r\n * @typedef {import('../index.js').Handler} Handler\r\n */\r\n\r\nimport normalize from 'mdurl/encode.js'\r\nimport {revert} from '../revert.js'\r\nimport {all} from '../traverse.js'\r\n\r\n/**\r\n * @type {Handler}\r\n * @param {LinkReference} node\r\n */\r\nexport function linkReference(h, node) {\r\n  const def = h.definition(node.identifier)\r\n\r\n  if (!def) {\r\n    return revert(h, node)\r\n  }\r\n\r\n  /** @type {Properties} */\r\n  const props = {href: normalize(def.url || '')}\r\n\r\n  if (def.title !== null && def.title !== undefined) {\r\n    props.title = def.title\r\n  }\r\n\r\n  return h(node, 'a', props, all(h, node))\r\n}\r\n","/**\r\n * @typedef {import('mdast').Link} Link\r\n * @typedef {import('hast').Properties} Properties\r\n * @typedef {import('../index.js').Handler} Handler\r\n */\r\n\r\nimport normalize from 'mdurl/encode.js'\r\nimport {all} from '../traverse.js'\r\n\r\n/**\r\n * @type {Handler}\r\n * @param {Link} node\r\n */\r\nexport function link(h, node) {\r\n  /** @type {Properties} */\r\n  const props = {href: normalize(node.url)}\r\n\r\n  if (node.title !== null && node.title !== undefined) {\r\n    props.title = node.title\r\n  }\r\n\r\n  return h(node, 'a', props, all(h, node))\r\n}\r\n","/**\r\n * @typedef {import('mdast').Paragraph} Paragraph\r\n * @typedef {import('../index.js').Handler} Handler\r\n */\r\n\r\nimport {all} from '../traverse.js'\r\n\r\n/**\r\n * @type {Handler}\r\n * @param {Paragraph} node\r\n */\r\nexport function paragraph(h, node) {\r\n  return h(node, 'p', all(h, node))\r\n}\r\n","/**\r\n * @typedef {import('mdast').Root} Root\r\n * @typedef {import('../index.js').Handler} Handler\r\n */\r\n\r\nimport {u} from 'unist-builder'\r\nimport {all} from '../traverse.js'\r\nimport {wrap} from '../wrap.js'\r\n\r\n/**\r\n * @type {Handler}\r\n * @param {Root} node\r\n */\r\nexport function root(h, node) {\r\n  // @ts-expect-error `root`s are also fine.\r\n  return h.augment(node, u('root', wrap(all(h, node))))\r\n}\r\n","/**\r\n * @typedef {import('mdast').Strong} Strong\r\n * @typedef {import('../index.js').Handler} Handler\r\n */\r\n\r\nimport {all} from '../traverse.js'\r\n\r\n/**\r\n * @type {Handler}\r\n * @param {Strong} node\r\n */\r\nexport function strong(h, node) {\r\n  return h(node, 'strong', all(h, node))\r\n}\r\n","/**\r\n * @typedef {import('mdast').Table} Table\r\n * @typedef {import('mdast').TableCell} TableCell\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('../index.js').Handler} Handler\r\n * @typedef {import('../index.js').Content} Content\r\n */\r\n\r\nimport {pointStart, pointEnd} from 'unist-util-position'\r\nimport {wrap} from '../wrap.js'\r\nimport {all} from '../traverse.js'\r\n\r\n/**\r\n * @type {Handler}\r\n * @param {Table} node\r\n */\r\nexport function table(h, node) {\r\n  const rows = node.children\r\n  let index = -1\r\n  const align = node.align || []\r\n  /** @type {Array.<Element>} */\r\n  const result = []\r\n\r\n  while (++index < rows.length) {\r\n    const row = rows[index].children\r\n    const name = index === 0 ? 'th' : 'td'\r\n    let pos = node.align ? align.length : row.length\r\n    /** @type {Array.<Content>} */\r\n    const out = []\r\n\r\n    while (pos--) {\r\n      const cell = row[pos]\r\n      out[pos] = h(cell, name, {align: align[pos]}, cell ? all(h, cell) : [])\r\n    }\r\n\r\n    result[index] = h(rows[index], 'tr', wrap(out, true))\r\n  }\r\n\r\n  return h(\r\n    node,\r\n    'table',\r\n    wrap(\r\n      [h(result[0].position, 'thead', wrap([result[0]], true))].concat(\r\n        result[1]\r\n          ? h(\r\n              {\r\n                start: pointStart(result[1]),\r\n                end: pointEnd(result[result.length - 1])\r\n              },\r\n              'tbody',\r\n              wrap(result.slice(1), true)\r\n            )\r\n          : []\r\n      ),\r\n      true\r\n    )\r\n  )\r\n}\r\n","/**\r\n * @typedef {import('mdast').Text} Text\r\n * @typedef {import('../index.js').Handler} Handler\r\n */\r\n\r\nimport {u} from 'unist-builder'\r\n\r\n/**\r\n * @type {Handler}\r\n * @param {Text} node\r\n */\r\nexport function text(h, node) {\r\n  return h.augment(\r\n    node,\r\n    u('text', String(node.value).replace(/[ \\t]*(\\r?\\n|\\r)[ \\t]*/g, '$1'))\r\n  )\r\n}\r\n","/**\r\n * @typedef {import('mdast').Root|import('mdast').Parent['children'][number]} MdastNode\r\n * @typedef {import('hast').Root|import('hast').Parent['children'][number]} HastNode\r\n * @typedef {import('mdast').Parent} Parent\r\n * @typedef {import('mdast').Definition} Definition\r\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\r\n * @typedef {import('hast').Properties} Properties\r\n * @typedef {import('hast').Text} Text\r\n * @typedef {import('hast').Comment} Comment\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').Root} Root\r\n * @typedef {import('hast').ElementContent} Content\r\n * @typedef {import('unist-util-position').PositionLike} PositionLike\r\n *\r\n * @typedef EmbeddedHastFields\r\n * @property {string} [hName] Defines the tag name of an element\r\n * @property {Properties} [hProperties] Defines the properties of an element\r\n * @property {Array.<Content>} [hChildren] Defines the (hast) children of an element\r\n *\r\n * @typedef {Object.<string, unknown> & EmbeddedHastFields} Data unist data with embedded hast fields\r\n *\r\n * @typedef {MdastNode & {data?: Data}} NodeWithData unist node with embedded hast data\r\n *\r\n * @callback Handler\r\n * @param {H} h Handle context\r\n * @param {any} node mdast node to handle\r\n * @param {Parent|null} parent Parent of `node`\r\n * @returns {Content|Array.<Content>|null|undefined} hast node\r\n *\r\n * @callback HFunctionProps\r\n * @param {MdastNode|PositionLike|null|undefined} node mdast node or unist position\r\n * @param {string} tagName HTML tag name\r\n * @param {Properties} props Properties\r\n * @param {Array.<Content>?} [children] hast content\r\n * @returns {Element}\r\n *\r\n * @callback HFunctionNoProps\r\n * @param {MdastNode|PositionLike|null|undefined} node mdast node or unist position\r\n * @param {string} tagName HTML tag name\r\n * @param {Array.<Content>?} [children] hast content\r\n * @returns {Element}\r\n *\r\n * @typedef HFields\r\n * @property {boolean} dangerous Whether HTML is allowed\r\n * @property {(identifier: string) => Definition|null} definition Definition cache\r\n * @property {Object.<string, FootnoteDefinition>} footnoteById Footnote cache\r\n * @property {Array.<string>} footnoteOrder Order in which footnotes occur\r\n * @property {Handlers} handlers Applied handlers\r\n * @property {Handler} unknownHandler Handler for any none not in `passThrough` or otherwise handled\r\n * @property {(left: NodeWithData|PositionLike|null|undefined, right: Content) => Content} augment Like `h` but lower-level and usable on non-elements.\r\n * @property {Array.<string>} passThrough List of node types to pass through untouched (except for their children).\r\n *\r\n * @typedef Options\r\n * @property {boolean} [allowDangerousHtml=false] Whether to allow `html` nodes and inject them as `raw` HTML\r\n * @property {Handlers} [handlers] Object mapping mdast nodes to functions handling them\r\n * @property {Array.<string>} [passThrough] List of custom mdast node types to pass through (keep) in hast\r\n * @property {Handler} [unknownHandler] Handler for all unknown nodes.\r\n *\r\n * @typedef {Record.<string, Handler>} Handlers Map of node types to handlers\r\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} H Handle context\r\n */\r\n\r\nimport {u} from 'unist-builder'\r\nimport {visit} from 'unist-util-visit'\r\nimport {pointStart, pointEnd} from 'unist-util-position'\r\nimport {generated} from 'unist-util-generated'\r\nimport {definitions} from 'mdast-util-definitions'\r\nimport {one} from './traverse.js'\r\nimport {footer} from './footer.js'\r\nimport {handlers} from './handlers/index.js'\r\n\r\nconst own = {}.hasOwnProperty\r\n\r\n/**\r\n * Factory to transform.\r\n * @param {MdastNode} tree mdast node\r\n * @param {Options} [options] Configuration\r\n * @returns {H} `h` function\r\n */\r\nfunction factory(tree, options) {\r\n  const settings = options || {}\r\n  const dangerous = settings.allowDangerousHtml || false\r\n  /** @type {Object.<string, FootnoteDefinition>} */\r\n  const footnoteById = {}\r\n\r\n  h.dangerous = dangerous\r\n  h.definition = definitions(tree)\r\n  h.footnoteById = footnoteById\r\n  /** @type {Array.<string>} */\r\n  h.footnoteOrder = []\r\n  h.augment = augment\r\n  h.handlers = {...handlers, ...settings.handlers}\r\n  h.unknownHandler = settings.unknownHandler\r\n  h.passThrough = settings.passThrough\r\n\r\n  visit(tree, 'footnoteDefinition', (definition) => {\r\n    const id = String(definition.identifier).toUpperCase()\r\n\r\n    // Mimick CM behavior of link definitions.\r\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\r\n    if (!own.call(footnoteById, id)) {\r\n      footnoteById[id] = definition\r\n    }\r\n  })\r\n\r\n  // @ts-expect-error Hush, it’s fine!\r\n  return h\r\n\r\n  /**\r\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\r\n   * @param {(NodeWithData|PositionLike)?} left\r\n   * @param {Content} right\r\n   * @returns {Content}\r\n   */\r\n  function augment(left, right) {\r\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\r\n    if (left && 'data' in left && left.data) {\r\n      /** @type {Data} */\r\n      const data = left.data\r\n\r\n      if (data.hName) {\r\n        if (right.type !== 'element') {\r\n          right = {\r\n            type: 'element',\r\n            tagName: '',\r\n            properties: {},\r\n            children: []\r\n          }\r\n        }\r\n\r\n        right.tagName = data.hName\r\n      }\r\n\r\n      if (right.type === 'element' && data.hProperties) {\r\n        right.properties = {...right.properties, ...data.hProperties}\r\n      }\r\n\r\n      if ('children' in right && right.children && data.hChildren) {\r\n        right.children = data.hChildren\r\n      }\r\n    }\r\n\r\n    if (left) {\r\n      const ctx = 'type' in left ? left : {position: left}\r\n\r\n      if (!generated(ctx)) {\r\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\r\n      }\r\n    }\r\n\r\n    return right\r\n  }\r\n\r\n  /**\r\n   * Create an element for `node`.\r\n   *\r\n   * @type {HFunctionProps}\r\n   */\r\n  function h(node, tagName, props, children) {\r\n    if (Array.isArray(props)) {\r\n      children = props\r\n      props = {}\r\n    }\r\n\r\n    // @ts-expect-error augmenting an element yields an element.\r\n    return augment(node, {\r\n      type: 'element',\r\n      tagName,\r\n      properties: props || {},\r\n      children: children || []\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Transform `tree` (an mdast node) to a hast node.\r\n *\r\n * @param {MdastNode} tree mdast node\r\n * @param {Options} [options] Configuration\r\n * @returns {HastNode|null|undefined} hast node\r\n */\r\nexport function toHast(tree, options) {\r\n  const h = factory(tree, options)\r\n  const node = one(h, tree, null)\r\n  const foot = footer(h)\r\n\r\n  if (foot) {\r\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\r\n    // content.\r\n    // So assume `node` is a parent node.\r\n    node.children.push(u('text', '\\n'), foot)\r\n  }\r\n\r\n  return Array.isArray(node) ? {type: 'root', children: node} : node\r\n}\r\n","/**\r\n * @typedef PointLike\r\n * @property {number | null | undefined} [line]\r\n * @property {number | null | undefined} [column]\r\n * @property {number | null | undefined} [offset]\r\n *\r\n * @typedef PositionLike\r\n * @property {PointLike | null | undefined} [start]\r\n * @property {PointLike | null | undefined} [end]\r\n *\r\n * @typedef NodeLike\r\n * @property {PositionLike | null | undefined} [position]\r\n */\r\n\r\n/**\r\n * Check if `node` is generated.\r\n *\r\n * @param {NodeLike | null | undefined} [node]\r\n *   Node to check.\r\n * @returns {boolean}\r\n *   Whether `node` is generated (does not have positional info).\r\n */\r\nexport function generated(node) {\r\n  return (\r\n    !node ||\r\n    !node.position ||\r\n    !node.position.start ||\r\n    !node.position.start.line ||\r\n    !node.position.start.column ||\r\n    !node.position.end ||\r\n    !node.position.end.line ||\r\n    !node.position.end.column\r\n  )\r\n}\r\n","/**\r\n * @typedef {import('mdast').BlockContent} BlockContent\r\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\r\n * @typedef {import('mdast').Link} Link\r\n * @typedef {import('mdast').ListItem} ListItem\r\n * @typedef {import('mdast').Paragraph} Paragraph\r\n * @typedef {import('./index.js').H} H\r\n */\r\n\r\nimport {thematicBreak} from './handlers/thematic-break.js'\r\nimport {list} from './handlers/list.js'\r\nimport {wrap} from './wrap.js'\r\n\r\n/**\r\n * @param {H} h\r\n */\r\nexport function footer(h) {\r\n  const footnoteById = h.footnoteById\r\n  const footnoteOrder = h.footnoteOrder\r\n  let index = -1\r\n  /** @type {Array.<ListItem>} */\r\n  const listItems = []\r\n\r\n  while (++index < footnoteOrder.length) {\r\n    const def = footnoteById[footnoteOrder[index].toUpperCase()]\r\n\r\n    if (!def) {\r\n      continue\r\n    }\r\n\r\n    const marker = String(index + 1)\r\n    const content = [...def.children]\r\n    /** @type {Link} */\r\n    const backReference = {\r\n      type: 'link',\r\n      url: '#fnref' + marker,\r\n      data: {hProperties: {className: ['footnote-back'], role: 'doc-backlink'}},\r\n      children: [{type: 'text', value: '↩'}]\r\n    }\r\n    const tail = content[content.length - 1]\r\n\r\n    if (tail && tail.type === 'paragraph') {\r\n      tail.children.push(backReference)\r\n    } else {\r\n      // @ts-expect-error Indeed, link directly added in block content.\r\n      // Which we do because that way at least the handlers will be called\r\n      // for the other HTML we’re generating (as markdown).\r\n      content.push(backReference)\r\n    }\r\n\r\n    listItems.push({\r\n      type: 'listItem',\r\n      data: {hProperties: {id: 'fn' + marker, role: 'doc-endnote'}},\r\n      children: content,\r\n      position: def.position\r\n    })\r\n  }\r\n\r\n  if (listItems.length === 0) {\r\n    return null\r\n  }\r\n\r\n  return h(\r\n    null,\r\n    'section',\r\n    {className: ['footnotes'], role: 'doc-endnotes'},\r\n    wrap(\r\n      [\r\n        thematicBreak(h),\r\n        list(h, {type: 'list', ordered: true, children: listItems})\r\n      ],\r\n      true\r\n    )\r\n  )\r\n}\r\n","/**\r\n * @typedef {import('unist').Node} Node\r\n * @typedef {import('hast').Root} HastRoot\r\n * @typedef {import('mdast').Root} MdastRoot\r\n * @typedef {import('mdast-util-to-hast').Options} Options\r\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\r\n *\r\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\r\n */\r\n\r\nimport {toHast} from 'mdast-util-to-hast'\r\n\r\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\r\n\r\n/**\r\n * Plugin to bridge or mutate to rehype.\r\n *\r\n * If a destination is given, runs the destination with the new hast tree\r\n * (bridge-mode).\r\n * Without destination, returns the hast tree: further plugins run on that tree\r\n * (mutate-mode).\r\n *\r\n * @param destination\r\n *   Optional unified processor.\r\n * @param options\r\n *   Options passed to `mdast-util-to-hast`.\r\n */\r\nconst remarkRehype =\r\n  /** @type {(import('unified').Plugin<[Processor, Options?]|[Options]|[], MdastRoot>)} */\r\n  (\r\n    function (destination, options) {\r\n      return destination && 'run' in destination\r\n        ? bridge(destination, options)\r\n        : mutate(destination)\r\n    }\r\n  )\r\n\r\nexport default remarkRehype\r\n\r\n/**\r\n * Bridge-mode.\r\n * Runs the destination with the new hast tree.\r\n *\r\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\r\n */\r\nfunction bridge(destination, options) {\r\n  return (node, file, next) => {\r\n    destination.run(toHast(node, options), file, (error) => {\r\n      next(error)\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Mutate-mode.\r\n * Further transformers run on the nlcst tree.\r\n *\r\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\r\n */\r\nfunction mutate(options) {\r\n  // @ts-expect-error: assume a corresponding node is returned for `toHast`.\r\n  return (node) => toHast(node, options)\r\n}\r\n","/**\r\n * @typedef {import('./info.js').Info} Info\r\n * @typedef {Record<string, Info>} Properties\r\n * @typedef {Record<string, string>} Normal\r\n */\r\n\r\nexport class Schema {\r\n  /**\r\n   * @constructor\r\n   * @param {Properties} property\r\n   * @param {Normal} normal\r\n   * @param {string} [space]\r\n   */\r\n  constructor(property, normal, space) {\r\n    this.property = property\r\n    this.normal = normal\r\n    if (space) {\r\n      this.space = space\r\n    }\r\n  }\r\n}\r\n\r\n/** @type {Properties} */\r\nSchema.prototype.property = {}\r\n/** @type {Normal} */\r\nSchema.prototype.normal = {}\r\n/** @type {string|null} */\r\nSchema.prototype.space = null\r\n","/**\r\n * @typedef {import('./schema.js').Properties} Properties\r\n * @typedef {import('./schema.js').Normal} Normal\r\n */\r\n\r\nimport {Schema} from './schema.js'\r\n\r\n/**\r\n * @param {Schema[]} definitions\r\n * @param {string} [space]\r\n * @returns {Schema}\r\n */\r\nexport function merge(definitions, space) {\r\n  /** @type {Properties} */\r\n  const property = {}\r\n  /** @type {Normal} */\r\n  const normal = {}\r\n  let index = -1\r\n\r\n  while (++index < definitions.length) {\r\n    Object.assign(property, definitions[index].property)\r\n    Object.assign(normal, definitions[index].normal)\r\n  }\r\n\r\n  return new Schema(property, normal, space)\r\n}\r\n","/**\r\n * @param {string} value\r\n * @returns {string}\r\n */\r\nexport function normalize(value) {\r\n  return value.toLowerCase()\r\n}\r\n","export class Info {\r\n  /**\r\n   * @constructor\r\n   * @param {string} property\r\n   * @param {string} attribute\r\n   */\r\n  constructor(property, attribute) {\r\n    /** @type {string} */\r\n    this.property = property\r\n    /** @type {string} */\r\n    this.attribute = attribute\r\n  }\r\n}\r\n\r\n/** @type {string|null} */\r\nInfo.prototype.space = null\r\nInfo.prototype.boolean = false\r\nInfo.prototype.booleanish = false\r\nInfo.prototype.overloadedBoolean = false\r\nInfo.prototype.number = false\r\nInfo.prototype.commaSeparated = false\r\nInfo.prototype.spaceSeparated = false\r\nInfo.prototype.commaOrSpaceSeparated = false\r\nInfo.prototype.mustUseProperty = false\r\nInfo.prototype.defined = false\r\n","let powers = 0\r\n\r\nexport const boolean = increment()\r\nexport const booleanish = increment()\r\nexport const overloadedBoolean = increment()\r\nexport const number = increment()\r\nexport const spaceSeparated = increment()\r\nexport const commaSeparated = increment()\r\nexport const commaOrSpaceSeparated = increment()\r\n\r\nfunction increment() {\r\n  return 2 ** ++powers\r\n}\r\n","import {Info} from './info.js'\r\nimport * as types from './types.js'\r\n\r\n/** @type {Array<keyof types>} */\r\n// @ts-expect-error: hush.\r\nconst checks = Object.keys(types)\r\n\r\nexport class DefinedInfo extends Info {\r\n  /**\r\n   * @constructor\r\n   * @param {string} property\r\n   * @param {string} attribute\r\n   * @param {number|null} [mask]\r\n   * @param {string} [space]\r\n   */\r\n  constructor(property, attribute, mask, space) {\r\n    let index = -1\r\n\r\n    super(property, attribute)\r\n\r\n    mark(this, 'space', space)\r\n\r\n    if (typeof mask === 'number') {\r\n      while (++index < checks.length) {\r\n        const check = checks[index]\r\n        mark(this, checks[index], (mask & types[check]) === types[check])\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nDefinedInfo.prototype.defined = true\r\n\r\n/**\r\n * @param {DefinedInfo} values\r\n * @param {string} key\r\n * @param {unknown} value\r\n */\r\nfunction mark(values, key, value) {\r\n  if (value) {\r\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\r\n    values[key] = value\r\n  }\r\n}\r\n","/**\r\n * @typedef {import('./schema.js').Properties} Properties\r\n * @typedef {import('./schema.js').Normal} Normal\r\n *\r\n * @typedef {Record<string, string>} Attributes\r\n *\r\n * @typedef {Object} Definition\r\n * @property {Record<string, number|null>} properties\r\n * @property {(attributes: Attributes, property: string) => string} transform\r\n * @property {string} [space]\r\n * @property {Attributes} [attributes]\r\n * @property {Array<string>} [mustUseProperty]\r\n */\r\n\r\nimport {normalize} from '../normalize.js'\r\nimport {Schema} from './schema.js'\r\nimport {DefinedInfo} from './defined-info.js'\r\n\r\nconst own = {}.hasOwnProperty\r\n\r\n/**\r\n * @param {Definition} definition\r\n * @returns {Schema}\r\n */\r\nexport function create(definition) {\r\n  /** @type {Properties} */\r\n  const property = {}\r\n  /** @type {Normal} */\r\n  const normal = {}\r\n  /** @type {string} */\r\n  let prop\r\n\r\n  for (prop in definition.properties) {\r\n    if (own.call(definition.properties, prop)) {\r\n      const value = definition.properties[prop]\r\n      const info = new DefinedInfo(\r\n        prop,\r\n        definition.transform(definition.attributes || {}, prop),\r\n        value,\r\n        definition.space\r\n      )\r\n\r\n      if (\r\n        definition.mustUseProperty &&\r\n        definition.mustUseProperty.includes(prop)\r\n      ) {\r\n        info.mustUseProperty = true\r\n      }\r\n\r\n      property[prop] = info\r\n\r\n      normal[normalize(prop)] = prop\r\n      normal[normalize(info.attribute)] = prop\r\n    }\r\n  }\r\n\r\n  return new Schema(property, normal, definition.space)\r\n}\r\n","import {create} from './util/create.js'\r\n\r\nexport const xlink = create({\r\n  space: 'xlink',\r\n  transform(_, prop) {\r\n    return 'xlink:' + prop.slice(5).toLowerCase()\r\n  },\r\n  properties: {\r\n    xLinkActuate: null,\r\n    xLinkArcRole: null,\r\n    xLinkHref: null,\r\n    xLinkRole: null,\r\n    xLinkShow: null,\r\n    xLinkTitle: null,\r\n    xLinkType: null\r\n  }\r\n})\r\n","import {create} from './util/create.js'\r\n\r\nexport const xml = create({\r\n  space: 'xml',\r\n  transform(_, prop) {\r\n    return 'xml:' + prop.slice(3).toLowerCase()\r\n  },\r\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\r\n})\r\n","/**\r\n * @param {Record<string, string>} attributes\r\n * @param {string} attribute\r\n * @returns {string}\r\n */\r\nexport function caseSensitiveTransform(attributes, attribute) {\r\n  return attribute in attributes ? attributes[attribute] : attribute\r\n}\r\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\r\n\r\n/**\r\n * @param {Record<string, string>} attributes\r\n * @param {string} property\r\n * @returns {string}\r\n */\r\nexport function caseInsensitiveTransform(attributes, property) {\r\n  return caseSensitiveTransform(attributes, property.toLowerCase())\r\n}\r\n","import {create} from './util/create.js'\r\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\r\n\r\nexport const xmlns = create({\r\n  space: 'xmlns',\r\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\r\n  transform: caseInsensitiveTransform,\r\n  properties: {xmlns: null, xmlnsXLink: null}\r\n})\r\n","import {booleanish, number, spaceSeparated} from './util/types.js'\r\nimport {create} from './util/create.js'\r\n\r\nexport const aria = create({\r\n  transform(_, prop) {\r\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\r\n  },\r\n  properties: {\r\n    ariaActiveDescendant: null,\r\n    ariaAtomic: booleanish,\r\n    ariaAutoComplete: null,\r\n    ariaBusy: booleanish,\r\n    ariaChecked: booleanish,\r\n    ariaColCount: number,\r\n    ariaColIndex: number,\r\n    ariaColSpan: number,\r\n    ariaControls: spaceSeparated,\r\n    ariaCurrent: null,\r\n    ariaDescribedBy: spaceSeparated,\r\n    ariaDetails: null,\r\n    ariaDisabled: booleanish,\r\n    ariaDropEffect: spaceSeparated,\r\n    ariaErrorMessage: null,\r\n    ariaExpanded: booleanish,\r\n    ariaFlowTo: spaceSeparated,\r\n    ariaGrabbed: booleanish,\r\n    ariaHasPopup: null,\r\n    ariaHidden: booleanish,\r\n    ariaInvalid: null,\r\n    ariaKeyShortcuts: null,\r\n    ariaLabel: null,\r\n    ariaLabelledBy: spaceSeparated,\r\n    ariaLevel: number,\r\n    ariaLive: null,\r\n    ariaModal: booleanish,\r\n    ariaMultiLine: booleanish,\r\n    ariaMultiSelectable: booleanish,\r\n    ariaOrientation: null,\r\n    ariaOwns: spaceSeparated,\r\n    ariaPlaceholder: null,\r\n    ariaPosInSet: number,\r\n    ariaPressed: booleanish,\r\n    ariaReadOnly: booleanish,\r\n    ariaRelevant: null,\r\n    ariaRequired: booleanish,\r\n    ariaRoleDescription: spaceSeparated,\r\n    ariaRowCount: number,\r\n    ariaRowIndex: number,\r\n    ariaRowSpan: number,\r\n    ariaSelected: booleanish,\r\n    ariaSetSize: number,\r\n    ariaSort: null,\r\n    ariaValueMax: number,\r\n    ariaValueMin: number,\r\n    ariaValueNow: number,\r\n    ariaValueText: null,\r\n    role: null\r\n  }\r\n})\r\n","import {\r\n  boolean,\r\n  overloadedBoolean,\r\n  booleanish,\r\n  number,\r\n  spaceSeparated,\r\n  commaSeparated\r\n} from './util/types.js'\r\nimport {create} from './util/create.js'\r\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\r\n\r\nexport const html = create({\r\n  space: 'html',\r\n  attributes: {\r\n    acceptcharset: 'accept-charset',\r\n    classname: 'class',\r\n    htmlfor: 'for',\r\n    httpequiv: 'http-equiv'\r\n  },\r\n  transform: caseInsensitiveTransform,\r\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\r\n  properties: {\r\n    // Standard Properties.\r\n    abbr: null,\r\n    accept: commaSeparated,\r\n    acceptCharset: spaceSeparated,\r\n    accessKey: spaceSeparated,\r\n    action: null,\r\n    allow: null,\r\n    allowFullScreen: boolean,\r\n    allowPaymentRequest: boolean,\r\n    allowUserMedia: boolean,\r\n    alt: null,\r\n    as: null,\r\n    async: boolean,\r\n    autoCapitalize: null,\r\n    autoComplete: spaceSeparated,\r\n    autoFocus: boolean,\r\n    autoPlay: boolean,\r\n    capture: boolean,\r\n    charSet: null,\r\n    checked: boolean,\r\n    cite: null,\r\n    className: spaceSeparated,\r\n    cols: number,\r\n    colSpan: null,\r\n    content: null,\r\n    contentEditable: booleanish,\r\n    controls: boolean,\r\n    controlsList: spaceSeparated,\r\n    coords: number | commaSeparated,\r\n    crossOrigin: null,\r\n    data: null,\r\n    dateTime: null,\r\n    decoding: null,\r\n    default: boolean,\r\n    defer: boolean,\r\n    dir: null,\r\n    dirName: null,\r\n    disabled: boolean,\r\n    download: overloadedBoolean,\r\n    draggable: booleanish,\r\n    encType: null,\r\n    enterKeyHint: null,\r\n    form: null,\r\n    formAction: null,\r\n    formEncType: null,\r\n    formMethod: null,\r\n    formNoValidate: boolean,\r\n    formTarget: null,\r\n    headers: spaceSeparated,\r\n    height: number,\r\n    hidden: boolean,\r\n    high: number,\r\n    href: null,\r\n    hrefLang: null,\r\n    htmlFor: spaceSeparated,\r\n    httpEquiv: spaceSeparated,\r\n    id: null,\r\n    imageSizes: null,\r\n    imageSrcSet: null,\r\n    inputMode: null,\r\n    integrity: null,\r\n    is: null,\r\n    isMap: boolean,\r\n    itemId: null,\r\n    itemProp: spaceSeparated,\r\n    itemRef: spaceSeparated,\r\n    itemScope: boolean,\r\n    itemType: spaceSeparated,\r\n    kind: null,\r\n    label: null,\r\n    lang: null,\r\n    language: null,\r\n    list: null,\r\n    loading: null,\r\n    loop: boolean,\r\n    low: number,\r\n    manifest: null,\r\n    max: null,\r\n    maxLength: number,\r\n    media: null,\r\n    method: null,\r\n    min: null,\r\n    minLength: number,\r\n    multiple: boolean,\r\n    muted: boolean,\r\n    name: null,\r\n    nonce: null,\r\n    noModule: boolean,\r\n    noValidate: boolean,\r\n    onAbort: null,\r\n    onAfterPrint: null,\r\n    onAuxClick: null,\r\n    onBeforeMatch: null,\r\n    onBeforePrint: null,\r\n    onBeforeUnload: null,\r\n    onBlur: null,\r\n    onCancel: null,\r\n    onCanPlay: null,\r\n    onCanPlayThrough: null,\r\n    onChange: null,\r\n    onClick: null,\r\n    onClose: null,\r\n    onContextLost: null,\r\n    onContextMenu: null,\r\n    onContextRestored: null,\r\n    onCopy: null,\r\n    onCueChange: null,\r\n    onCut: null,\r\n    onDblClick: null,\r\n    onDrag: null,\r\n    onDragEnd: null,\r\n    onDragEnter: null,\r\n    onDragExit: null,\r\n    onDragLeave: null,\r\n    onDragOver: null,\r\n    onDragStart: null,\r\n    onDrop: null,\r\n    onDurationChange: null,\r\n    onEmptied: null,\r\n    onEnded: null,\r\n    onError: null,\r\n    onFocus: null,\r\n    onFormData: null,\r\n    onHashChange: null,\r\n    onInput: null,\r\n    onInvalid: null,\r\n    onKeyDown: null,\r\n    onKeyPress: null,\r\n    onKeyUp: null,\r\n    onLanguageChange: null,\r\n    onLoad: null,\r\n    onLoadedData: null,\r\n    onLoadedMetadata: null,\r\n    onLoadEnd: null,\r\n    onLoadStart: null,\r\n    onMessage: null,\r\n    onMessageError: null,\r\n    onMouseDown: null,\r\n    onMouseEnter: null,\r\n    onMouseLeave: null,\r\n    onMouseMove: null,\r\n    onMouseOut: null,\r\n    onMouseOver: null,\r\n    onMouseUp: null,\r\n    onOffline: null,\r\n    onOnline: null,\r\n    onPageHide: null,\r\n    onPageShow: null,\r\n    onPaste: null,\r\n    onPause: null,\r\n    onPlay: null,\r\n    onPlaying: null,\r\n    onPopState: null,\r\n    onProgress: null,\r\n    onRateChange: null,\r\n    onRejectionHandled: null,\r\n    onReset: null,\r\n    onResize: null,\r\n    onScroll: null,\r\n    onScrollEnd: null,\r\n    onSecurityPolicyViolation: null,\r\n    onSeeked: null,\r\n    onSeeking: null,\r\n    onSelect: null,\r\n    onSlotChange: null,\r\n    onStalled: null,\r\n    onStorage: null,\r\n    onSubmit: null,\r\n    onSuspend: null,\r\n    onTimeUpdate: null,\r\n    onToggle: null,\r\n    onUnhandledRejection: null,\r\n    onUnload: null,\r\n    onVolumeChange: null,\r\n    onWaiting: null,\r\n    onWheel: null,\r\n    open: boolean,\r\n    optimum: number,\r\n    pattern: null,\r\n    ping: spaceSeparated,\r\n    placeholder: null,\r\n    playsInline: boolean,\r\n    poster: null,\r\n    preload: null,\r\n    readOnly: boolean,\r\n    referrerPolicy: null,\r\n    rel: spaceSeparated,\r\n    required: boolean,\r\n    reversed: boolean,\r\n    rows: number,\r\n    rowSpan: number,\r\n    sandbox: spaceSeparated,\r\n    scope: null,\r\n    scoped: boolean,\r\n    seamless: boolean,\r\n    selected: boolean,\r\n    shape: null,\r\n    size: number,\r\n    sizes: null,\r\n    slot: null,\r\n    span: number,\r\n    spellCheck: booleanish,\r\n    src: null,\r\n    srcDoc: null,\r\n    srcLang: null,\r\n    srcSet: null,\r\n    start: number,\r\n    step: null,\r\n    style: null,\r\n    tabIndex: number,\r\n    target: null,\r\n    title: null,\r\n    translate: null,\r\n    type: null,\r\n    typeMustMatch: boolean,\r\n    useMap: null,\r\n    value: booleanish,\r\n    width: number,\r\n    wrap: null,\r\n\r\n    // Legacy.\r\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\r\n    align: null, // Several. Use CSS `text-align` instead,\r\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\r\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\r\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\r\n    background: null, // `<body>`. Use CSS `background-image` instead\r\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\r\n    border: number, // `<table>`. Use CSS `border-width` instead,\r\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\r\n    bottomMargin: number, // `<body>`\r\n    cellPadding: null, // `<table>`\r\n    cellSpacing: null, // `<table>`\r\n    char: null, // Several table elements. When `align=char`, sets the character to align on\r\n    charOff: null, // Several table elements. When `char`, offsets the alignment\r\n    classId: null, // `<object>`\r\n    clear: null, // `<br>`. Use CSS `clear` instead\r\n    code: null, // `<object>`\r\n    codeBase: null, // `<object>`\r\n    codeType: null, // `<object>`\r\n    color: null, // `<font>` and `<hr>`. Use CSS instead\r\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\r\n    declare: boolean, // `<object>`\r\n    event: null, // `<script>`\r\n    face: null, // `<font>`. Use CSS instead\r\n    frame: null, // `<table>`\r\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\r\n    hSpace: number, // `<img>` and `<object>`\r\n    leftMargin: number, // `<body>`\r\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\r\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\r\n    lowSrc: null, // `<img>`. Use a `<picture>`\r\n    marginHeight: number, // `<body>`\r\n    marginWidth: number, // `<body>`\r\n    noResize: boolean, // `<frame>`\r\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\r\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\r\n    noWrap: boolean, // `<td>` and `<th>`\r\n    object: null, // `<applet>`\r\n    profile: null, // `<head>`\r\n    prompt: null, // `<isindex>`\r\n    rev: null, // `<link>`\r\n    rightMargin: number, // `<body>`\r\n    rules: null, // `<table>`\r\n    scheme: null, // `<meta>`\r\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\r\n    standby: null, // `<object>`\r\n    summary: null, // `<table>`\r\n    text: null, // `<body>`. Use CSS `color` instead\r\n    topMargin: number, // `<body>`\r\n    valueType: null, // `<param>`\r\n    version: null, // `<html>`. Use a doctype.\r\n    vAlign: null, // Several. Use CSS `vertical-align` instead\r\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\r\n    vSpace: number, // `<img>` and `<object>`\r\n\r\n    // Non-standard Properties.\r\n    allowTransparency: null,\r\n    autoCorrect: null,\r\n    autoSave: null,\r\n    disablePictureInPicture: boolean,\r\n    disableRemotePlayback: boolean,\r\n    prefix: null,\r\n    property: null,\r\n    results: number,\r\n    security: null,\r\n    unselectable: null\r\n  }\r\n})\r\n","import {\r\n  boolean,\r\n  number,\r\n  spaceSeparated,\r\n  commaSeparated,\r\n  commaOrSpaceSeparated\r\n} from './util/types.js'\r\nimport {create} from './util/create.js'\r\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\r\n\r\nexport const svg = create({\r\n  space: 'svg',\r\n  attributes: {\r\n    accentHeight: 'accent-height',\r\n    alignmentBaseline: 'alignment-baseline',\r\n    arabicForm: 'arabic-form',\r\n    baselineShift: 'baseline-shift',\r\n    capHeight: 'cap-height',\r\n    className: 'class',\r\n    clipPath: 'clip-path',\r\n    clipRule: 'clip-rule',\r\n    colorInterpolation: 'color-interpolation',\r\n    colorInterpolationFilters: 'color-interpolation-filters',\r\n    colorProfile: 'color-profile',\r\n    colorRendering: 'color-rendering',\r\n    crossOrigin: 'crossorigin',\r\n    dataType: 'datatype',\r\n    dominantBaseline: 'dominant-baseline',\r\n    enableBackground: 'enable-background',\r\n    fillOpacity: 'fill-opacity',\r\n    fillRule: 'fill-rule',\r\n    floodColor: 'flood-color',\r\n    floodOpacity: 'flood-opacity',\r\n    fontFamily: 'font-family',\r\n    fontSize: 'font-size',\r\n    fontSizeAdjust: 'font-size-adjust',\r\n    fontStretch: 'font-stretch',\r\n    fontStyle: 'font-style',\r\n    fontVariant: 'font-variant',\r\n    fontWeight: 'font-weight',\r\n    glyphName: 'glyph-name',\r\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\r\n    glyphOrientationVertical: 'glyph-orientation-vertical',\r\n    hrefLang: 'hreflang',\r\n    horizAdvX: 'horiz-adv-x',\r\n    horizOriginX: 'horiz-origin-x',\r\n    horizOriginY: 'horiz-origin-y',\r\n    imageRendering: 'image-rendering',\r\n    letterSpacing: 'letter-spacing',\r\n    lightingColor: 'lighting-color',\r\n    markerEnd: 'marker-end',\r\n    markerMid: 'marker-mid',\r\n    markerStart: 'marker-start',\r\n    navDown: 'nav-down',\r\n    navDownLeft: 'nav-down-left',\r\n    navDownRight: 'nav-down-right',\r\n    navLeft: 'nav-left',\r\n    navNext: 'nav-next',\r\n    navPrev: 'nav-prev',\r\n    navRight: 'nav-right',\r\n    navUp: 'nav-up',\r\n    navUpLeft: 'nav-up-left',\r\n    navUpRight: 'nav-up-right',\r\n    onAbort: 'onabort',\r\n    onActivate: 'onactivate',\r\n    onAfterPrint: 'onafterprint',\r\n    onBeforePrint: 'onbeforeprint',\r\n    onBegin: 'onbegin',\r\n    onCancel: 'oncancel',\r\n    onCanPlay: 'oncanplay',\r\n    onCanPlayThrough: 'oncanplaythrough',\r\n    onChange: 'onchange',\r\n    onClick: 'onclick',\r\n    onClose: 'onclose',\r\n    onCopy: 'oncopy',\r\n    onCueChange: 'oncuechange',\r\n    onCut: 'oncut',\r\n    onDblClick: 'ondblclick',\r\n    onDrag: 'ondrag',\r\n    onDragEnd: 'ondragend',\r\n    onDragEnter: 'ondragenter',\r\n    onDragExit: 'ondragexit',\r\n    onDragLeave: 'ondragleave',\r\n    onDragOver: 'ondragover',\r\n    onDragStart: 'ondragstart',\r\n    onDrop: 'ondrop',\r\n    onDurationChange: 'ondurationchange',\r\n    onEmptied: 'onemptied',\r\n    onEnd: 'onend',\r\n    onEnded: 'onended',\r\n    onError: 'onerror',\r\n    onFocus: 'onfocus',\r\n    onFocusIn: 'onfocusin',\r\n    onFocusOut: 'onfocusout',\r\n    onHashChange: 'onhashchange',\r\n    onInput: 'oninput',\r\n    onInvalid: 'oninvalid',\r\n    onKeyDown: 'onkeydown',\r\n    onKeyPress: 'onkeypress',\r\n    onKeyUp: 'onkeyup',\r\n    onLoad: 'onload',\r\n    onLoadedData: 'onloadeddata',\r\n    onLoadedMetadata: 'onloadedmetadata',\r\n    onLoadStart: 'onloadstart',\r\n    onMessage: 'onmessage',\r\n    onMouseDown: 'onmousedown',\r\n    onMouseEnter: 'onmouseenter',\r\n    onMouseLeave: 'onmouseleave',\r\n    onMouseMove: 'onmousemove',\r\n    onMouseOut: 'onmouseout',\r\n    onMouseOver: 'onmouseover',\r\n    onMouseUp: 'onmouseup',\r\n    onMouseWheel: 'onmousewheel',\r\n    onOffline: 'onoffline',\r\n    onOnline: 'ononline',\r\n    onPageHide: 'onpagehide',\r\n    onPageShow: 'onpageshow',\r\n    onPaste: 'onpaste',\r\n    onPause: 'onpause',\r\n    onPlay: 'onplay',\r\n    onPlaying: 'onplaying',\r\n    onPopState: 'onpopstate',\r\n    onProgress: 'onprogress',\r\n    onRateChange: 'onratechange',\r\n    onRepeat: 'onrepeat',\r\n    onReset: 'onreset',\r\n    onResize: 'onresize',\r\n    onScroll: 'onscroll',\r\n    onSeeked: 'onseeked',\r\n    onSeeking: 'onseeking',\r\n    onSelect: 'onselect',\r\n    onShow: 'onshow',\r\n    onStalled: 'onstalled',\r\n    onStorage: 'onstorage',\r\n    onSubmit: 'onsubmit',\r\n    onSuspend: 'onsuspend',\r\n    onTimeUpdate: 'ontimeupdate',\r\n    onToggle: 'ontoggle',\r\n    onUnload: 'onunload',\r\n    onVolumeChange: 'onvolumechange',\r\n    onWaiting: 'onwaiting',\r\n    onZoom: 'onzoom',\r\n    overlinePosition: 'overline-position',\r\n    overlineThickness: 'overline-thickness',\r\n    paintOrder: 'paint-order',\r\n    panose1: 'panose-1',\r\n    pointerEvents: 'pointer-events',\r\n    referrerPolicy: 'referrerpolicy',\r\n    renderingIntent: 'rendering-intent',\r\n    shapeRendering: 'shape-rendering',\r\n    stopColor: 'stop-color',\r\n    stopOpacity: 'stop-opacity',\r\n    strikethroughPosition: 'strikethrough-position',\r\n    strikethroughThickness: 'strikethrough-thickness',\r\n    strokeDashArray: 'stroke-dasharray',\r\n    strokeDashOffset: 'stroke-dashoffset',\r\n    strokeLineCap: 'stroke-linecap',\r\n    strokeLineJoin: 'stroke-linejoin',\r\n    strokeMiterLimit: 'stroke-miterlimit',\r\n    strokeOpacity: 'stroke-opacity',\r\n    strokeWidth: 'stroke-width',\r\n    tabIndex: 'tabindex',\r\n    textAnchor: 'text-anchor',\r\n    textDecoration: 'text-decoration',\r\n    textRendering: 'text-rendering',\r\n    typeOf: 'typeof',\r\n    underlinePosition: 'underline-position',\r\n    underlineThickness: 'underline-thickness',\r\n    unicodeBidi: 'unicode-bidi',\r\n    unicodeRange: 'unicode-range',\r\n    unitsPerEm: 'units-per-em',\r\n    vAlphabetic: 'v-alphabetic',\r\n    vHanging: 'v-hanging',\r\n    vIdeographic: 'v-ideographic',\r\n    vMathematical: 'v-mathematical',\r\n    vectorEffect: 'vector-effect',\r\n    vertAdvY: 'vert-adv-y',\r\n    vertOriginX: 'vert-origin-x',\r\n    vertOriginY: 'vert-origin-y',\r\n    wordSpacing: 'word-spacing',\r\n    writingMode: 'writing-mode',\r\n    xHeight: 'x-height',\r\n    // These were camelcased in Tiny. Now lowercased in SVG 2\r\n    playbackOrder: 'playbackorder',\r\n    timelineBegin: 'timelinebegin'\r\n  },\r\n  transform: caseSensitiveTransform,\r\n  properties: {\r\n    about: commaOrSpaceSeparated,\r\n    accentHeight: number,\r\n    accumulate: null,\r\n    additive: null,\r\n    alignmentBaseline: null,\r\n    alphabetic: number,\r\n    amplitude: number,\r\n    arabicForm: null,\r\n    ascent: number,\r\n    attributeName: null,\r\n    attributeType: null,\r\n    azimuth: number,\r\n    bandwidth: null,\r\n    baselineShift: null,\r\n    baseFrequency: null,\r\n    baseProfile: null,\r\n    bbox: null,\r\n    begin: null,\r\n    bias: number,\r\n    by: null,\r\n    calcMode: null,\r\n    capHeight: number,\r\n    className: spaceSeparated,\r\n    clip: null,\r\n    clipPath: null,\r\n    clipPathUnits: null,\r\n    clipRule: null,\r\n    color: null,\r\n    colorInterpolation: null,\r\n    colorInterpolationFilters: null,\r\n    colorProfile: null,\r\n    colorRendering: null,\r\n    content: null,\r\n    contentScriptType: null,\r\n    contentStyleType: null,\r\n    crossOrigin: null,\r\n    cursor: null,\r\n    cx: null,\r\n    cy: null,\r\n    d: null,\r\n    dataType: null,\r\n    defaultAction: null,\r\n    descent: number,\r\n    diffuseConstant: number,\r\n    direction: null,\r\n    display: null,\r\n    dur: null,\r\n    divisor: number,\r\n    dominantBaseline: null,\r\n    download: boolean,\r\n    dx: null,\r\n    dy: null,\r\n    edgeMode: null,\r\n    editable: null,\r\n    elevation: number,\r\n    enableBackground: null,\r\n    end: null,\r\n    event: null,\r\n    exponent: number,\r\n    externalResourcesRequired: null,\r\n    fill: null,\r\n    fillOpacity: number,\r\n    fillRule: null,\r\n    filter: null,\r\n    filterRes: null,\r\n    filterUnits: null,\r\n    floodColor: null,\r\n    floodOpacity: null,\r\n    focusable: null,\r\n    focusHighlight: null,\r\n    fontFamily: null,\r\n    fontSize: null,\r\n    fontSizeAdjust: null,\r\n    fontStretch: null,\r\n    fontStyle: null,\r\n    fontVariant: null,\r\n    fontWeight: null,\r\n    format: null,\r\n    fr: null,\r\n    from: null,\r\n    fx: null,\r\n    fy: null,\r\n    g1: commaSeparated,\r\n    g2: commaSeparated,\r\n    glyphName: commaSeparated,\r\n    glyphOrientationHorizontal: null,\r\n    glyphOrientationVertical: null,\r\n    glyphRef: null,\r\n    gradientTransform: null,\r\n    gradientUnits: null,\r\n    handler: null,\r\n    hanging: number,\r\n    hatchContentUnits: null,\r\n    hatchUnits: null,\r\n    height: null,\r\n    href: null,\r\n    hrefLang: null,\r\n    horizAdvX: number,\r\n    horizOriginX: number,\r\n    horizOriginY: number,\r\n    id: null,\r\n    ideographic: number,\r\n    imageRendering: null,\r\n    initialVisibility: null,\r\n    in: null,\r\n    in2: null,\r\n    intercept: number,\r\n    k: number,\r\n    k1: number,\r\n    k2: number,\r\n    k3: number,\r\n    k4: number,\r\n    kernelMatrix: commaOrSpaceSeparated,\r\n    kernelUnitLength: null,\r\n    keyPoints: null, // SEMI_COLON_SEPARATED\r\n    keySplines: null, // SEMI_COLON_SEPARATED\r\n    keyTimes: null, // SEMI_COLON_SEPARATED\r\n    kerning: null,\r\n    lang: null,\r\n    lengthAdjust: null,\r\n    letterSpacing: null,\r\n    lightingColor: null,\r\n    limitingConeAngle: number,\r\n    local: null,\r\n    markerEnd: null,\r\n    markerMid: null,\r\n    markerStart: null,\r\n    markerHeight: null,\r\n    markerUnits: null,\r\n    markerWidth: null,\r\n    mask: null,\r\n    maskContentUnits: null,\r\n    maskUnits: null,\r\n    mathematical: null,\r\n    max: null,\r\n    media: null,\r\n    mediaCharacterEncoding: null,\r\n    mediaContentEncodings: null,\r\n    mediaSize: number,\r\n    mediaTime: null,\r\n    method: null,\r\n    min: null,\r\n    mode: null,\r\n    name: null,\r\n    navDown: null,\r\n    navDownLeft: null,\r\n    navDownRight: null,\r\n    navLeft: null,\r\n    navNext: null,\r\n    navPrev: null,\r\n    navRight: null,\r\n    navUp: null,\r\n    navUpLeft: null,\r\n    navUpRight: null,\r\n    numOctaves: null,\r\n    observer: null,\r\n    offset: null,\r\n    onAbort: null,\r\n    onActivate: null,\r\n    onAfterPrint: null,\r\n    onBeforePrint: null,\r\n    onBegin: null,\r\n    onCancel: null,\r\n    onCanPlay: null,\r\n    onCanPlayThrough: null,\r\n    onChange: null,\r\n    onClick: null,\r\n    onClose: null,\r\n    onCopy: null,\r\n    onCueChange: null,\r\n    onCut: null,\r\n    onDblClick: null,\r\n    onDrag: null,\r\n    onDragEnd: null,\r\n    onDragEnter: null,\r\n    onDragExit: null,\r\n    onDragLeave: null,\r\n    onDragOver: null,\r\n    onDragStart: null,\r\n    onDrop: null,\r\n    onDurationChange: null,\r\n    onEmptied: null,\r\n    onEnd: null,\r\n    onEnded: null,\r\n    onError: null,\r\n    onFocus: null,\r\n    onFocusIn: null,\r\n    onFocusOut: null,\r\n    onHashChange: null,\r\n    onInput: null,\r\n    onInvalid: null,\r\n    onKeyDown: null,\r\n    onKeyPress: null,\r\n    onKeyUp: null,\r\n    onLoad: null,\r\n    onLoadedData: null,\r\n    onLoadedMetadata: null,\r\n    onLoadStart: null,\r\n    onMessage: null,\r\n    onMouseDown: null,\r\n    onMouseEnter: null,\r\n    onMouseLeave: null,\r\n    onMouseMove: null,\r\n    onMouseOut: null,\r\n    onMouseOver: null,\r\n    onMouseUp: null,\r\n    onMouseWheel: null,\r\n    onOffline: null,\r\n    onOnline: null,\r\n    onPageHide: null,\r\n    onPageShow: null,\r\n    onPaste: null,\r\n    onPause: null,\r\n    onPlay: null,\r\n    onPlaying: null,\r\n    onPopState: null,\r\n    onProgress: null,\r\n    onRateChange: null,\r\n    onRepeat: null,\r\n    onReset: null,\r\n    onResize: null,\r\n    onScroll: null,\r\n    onSeeked: null,\r\n    onSeeking: null,\r\n    onSelect: null,\r\n    onShow: null,\r\n    onStalled: null,\r\n    onStorage: null,\r\n    onSubmit: null,\r\n    onSuspend: null,\r\n    onTimeUpdate: null,\r\n    onToggle: null,\r\n    onUnload: null,\r\n    onVolumeChange: null,\r\n    onWaiting: null,\r\n    onZoom: null,\r\n    opacity: null,\r\n    operator: null,\r\n    order: null,\r\n    orient: null,\r\n    orientation: null,\r\n    origin: null,\r\n    overflow: null,\r\n    overlay: null,\r\n    overlinePosition: number,\r\n    overlineThickness: number,\r\n    paintOrder: null,\r\n    panose1: null,\r\n    path: null,\r\n    pathLength: number,\r\n    patternContentUnits: null,\r\n    patternTransform: null,\r\n    patternUnits: null,\r\n    phase: null,\r\n    ping: spaceSeparated,\r\n    pitch: null,\r\n    playbackOrder: null,\r\n    pointerEvents: null,\r\n    points: null,\r\n    pointsAtX: number,\r\n    pointsAtY: number,\r\n    pointsAtZ: number,\r\n    preserveAlpha: null,\r\n    preserveAspectRatio: null,\r\n    primitiveUnits: null,\r\n    propagate: null,\r\n    property: commaOrSpaceSeparated,\r\n    r: null,\r\n    radius: null,\r\n    referrerPolicy: null,\r\n    refX: null,\r\n    refY: null,\r\n    rel: commaOrSpaceSeparated,\r\n    rev: commaOrSpaceSeparated,\r\n    renderingIntent: null,\r\n    repeatCount: null,\r\n    repeatDur: null,\r\n    requiredExtensions: commaOrSpaceSeparated,\r\n    requiredFeatures: commaOrSpaceSeparated,\r\n    requiredFonts: commaOrSpaceSeparated,\r\n    requiredFormats: commaOrSpaceSeparated,\r\n    resource: null,\r\n    restart: null,\r\n    result: null,\r\n    rotate: null,\r\n    rx: null,\r\n    ry: null,\r\n    scale: null,\r\n    seed: null,\r\n    shapeRendering: null,\r\n    side: null,\r\n    slope: null,\r\n    snapshotTime: null,\r\n    specularConstant: number,\r\n    specularExponent: number,\r\n    spreadMethod: null,\r\n    spacing: null,\r\n    startOffset: null,\r\n    stdDeviation: null,\r\n    stemh: null,\r\n    stemv: null,\r\n    stitchTiles: null,\r\n    stopColor: null,\r\n    stopOpacity: null,\r\n    strikethroughPosition: number,\r\n    strikethroughThickness: number,\r\n    string: null,\r\n    stroke: null,\r\n    strokeDashArray: commaOrSpaceSeparated,\r\n    strokeDashOffset: null,\r\n    strokeLineCap: null,\r\n    strokeLineJoin: null,\r\n    strokeMiterLimit: number,\r\n    strokeOpacity: number,\r\n    strokeWidth: null,\r\n    style: null,\r\n    surfaceScale: number,\r\n    syncBehavior: null,\r\n    syncBehaviorDefault: null,\r\n    syncMaster: null,\r\n    syncTolerance: null,\r\n    syncToleranceDefault: null,\r\n    systemLanguage: commaOrSpaceSeparated,\r\n    tabIndex: number,\r\n    tableValues: null,\r\n    target: null,\r\n    targetX: number,\r\n    targetY: number,\r\n    textAnchor: null,\r\n    textDecoration: null,\r\n    textRendering: null,\r\n    textLength: null,\r\n    timelineBegin: null,\r\n    title: null,\r\n    transformBehavior: null,\r\n    type: null,\r\n    typeOf: commaOrSpaceSeparated,\r\n    to: null,\r\n    transform: null,\r\n    u1: null,\r\n    u2: null,\r\n    underlinePosition: number,\r\n    underlineThickness: number,\r\n    unicode: null,\r\n    unicodeBidi: null,\r\n    unicodeRange: null,\r\n    unitsPerEm: number,\r\n    values: null,\r\n    vAlphabetic: number,\r\n    vMathematical: number,\r\n    vectorEffect: null,\r\n    vHanging: number,\r\n    vIdeographic: number,\r\n    version: null,\r\n    vertAdvY: number,\r\n    vertOriginX: number,\r\n    vertOriginY: number,\r\n    viewBox: null,\r\n    viewTarget: null,\r\n    visibility: null,\r\n    width: null,\r\n    widths: null,\r\n    wordSpacing: null,\r\n    writingMode: null,\r\n    x: null,\r\n    x1: null,\r\n    x2: null,\r\n    xChannelSelector: null,\r\n    xHeight: number,\r\n    y: null,\r\n    y1: null,\r\n    y2: null,\r\n    yChannelSelector: null,\r\n    z: null,\r\n    zoomAndPan: null\r\n  }\r\n})\r\n","/**\r\n * @typedef {import('./lib/util/info.js').Info} Info\r\n * @typedef {import('./lib/util/schema.js').Schema} Schema\r\n */\r\n\r\nimport {merge} from './lib/util/merge.js'\r\nimport {xlink} from './lib/xlink.js'\r\nimport {xml} from './lib/xml.js'\r\nimport {xmlns} from './lib/xmlns.js'\r\nimport {aria} from './lib/aria.js'\r\nimport {html as htmlBase} from './lib/html.js'\r\nimport {svg as svgBase} from './lib/svg.js'\r\n\r\nexport {find} from './lib/find.js'\r\nexport {hastToReact} from './lib/hast-to-react.js'\r\nexport {normalize} from './lib/normalize.js'\r\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\r\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\r\n","import {visit} from 'unist-util-visit'\r\n\r\n/**\r\n * @typedef {import('unist').Node} Node\r\n * @typedef {import('hast').Root} Root\r\n * @typedef {import('hast').Element} Element\r\n *\r\n * @callback AllowElement\r\n * @param {Element} element\r\n * @param {number} index\r\n * @param {Element|Root} parent\r\n * @returns {boolean|undefined}\r\n *\r\n * @typedef Options\r\n * @property {Array<string>} [allowedElements]\r\n * @property {Array<string>} [disallowedElements=[]]\r\n * @property {AllowElement} [allowElement]\r\n * @property {boolean} [unwrapDisallowed=false]\r\n */\r\n\r\n/**\r\n * @type {import('unified').Plugin<[Options], Root>}\r\n */\r\nexport default function rehypeFilter(options) {\r\n  if (options.allowedElements && options.disallowedElements) {\r\n    throw new TypeError(\r\n      'Only one of `allowedElements` and `disallowedElements` should be defined'\r\n    )\r\n  }\r\n\r\n  if (\r\n    options.allowedElements ||\r\n    options.disallowedElements ||\r\n    options.allowElement\r\n  ) {\r\n    return (tree) => {\r\n      visit(tree, 'element', (node, index, parent_) => {\r\n        const parent = /** @type {Element|Root} */ (parent_)\r\n        /** @type {boolean|undefined} */\r\n        let remove\r\n\r\n        if (options.allowedElements) {\r\n          remove = !options.allowedElements.includes(node.tagName)\r\n        } else if (options.disallowedElements) {\r\n          remove = options.disallowedElements.includes(node.tagName)\r\n        }\r\n\r\n        if (!remove && options.allowElement && typeof index === 'number') {\r\n          remove = !options.allowElement(node, index, parent)\r\n        }\r\n\r\n        if (remove && typeof index === 'number') {\r\n          if (options.unwrapDisallowed && node.children) {\r\n            parent.children.splice(index, 1, ...node.children)\r\n          } else {\r\n            parent.children.splice(index, 1)\r\n          }\r\n\r\n          return index\r\n        }\r\n\r\n        return undefined\r\n      })\r\n    }\r\n  }\r\n}\r\n","const protocols = ['http', 'https', 'mailto', 'tel']\r\n\r\n/**\r\n * @param {string} uri\r\n * @returns {string}\r\n */\r\nexport function uriTransformer(uri) {\r\n  const url = (uri || '').trim()\r\n  const first = url.charAt(0)\r\n\r\n  if (first === '#' || first === '/') {\r\n    return url\r\n  }\r\n\r\n  const colon = url.indexOf(':')\r\n  if (colon === -1) {\r\n    return url\r\n  }\r\n\r\n  let index = -1\r\n\r\n  while (++index < protocols.length) {\r\n    const protocol = protocols[index]\r\n\r\n    if (\r\n      colon === protocol.length &&\r\n      url.slice(0, protocol.length).toLowerCase() === protocol\r\n    ) {\r\n      return url\r\n    }\r\n  }\r\n\r\n  index = url.indexOf('?')\r\n  if (index !== -1 && colon > index) {\r\n    return url\r\n  }\r\n\r\n  index = url.indexOf('#')\r\n  if (index !== -1 && colon > index) {\r\n    return url\r\n  }\r\n\r\n  // eslint-disable-next-line no-script-url\r\n  return 'javascript:void(0)'\r\n}\r\n","/**\r\n * Check if the given value is *inter-element whitespace*.\r\n *\r\n * @param {unknown} thing\r\n *   Thing to check (typically `Node` or `string`).\r\n * @returns {boolean}\r\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\r\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\r\n *   (`\\r`), or form feed (`\\f`).\r\n *   If a node is passed it must be a `Text` node, whose `value` field is\r\n *   checked.\r\n */\r\nexport function whitespace(thing) {\r\n  /** @type {string} */\r\n  const value =\r\n    // @ts-expect-error looks like a node.\r\n    thing && typeof thing === 'object' && thing.type === 'text'\r\n      ? // @ts-expect-error looks like a text.\r\n        thing.value || ''\r\n      : thing\r\n\r\n  // HTML whitespace expression.\r\n  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.\r\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === ''\r\n}\r\n","/**\r\n * @typedef {import('./util/schema.js').Schema} Schema\r\n */\r\n\r\nimport {normalize} from './normalize.js'\r\nimport {DefinedInfo} from './util/defined-info.js'\r\nimport {Info} from './util/info.js'\r\n\r\nconst valid = /^data[-\\w.:]+$/i\r\nconst dash = /-[a-z]/g\r\nconst cap = /[A-Z]/g\r\n\r\n/**\r\n * @param {Schema} schema\r\n * @param {string} value\r\n * @returns {Info}\r\n */\r\nexport function find(schema, value) {\r\n  const normal = normalize(value)\r\n  let prop = value\r\n  let Type = Info\r\n\r\n  if (normal in schema.normal) {\r\n    return schema.property[schema.normal[normal]]\r\n  }\r\n\r\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\r\n    // Attribute or property.\r\n    if (value.charAt(4) === '-') {\r\n      // Turn it into a property.\r\n      const rest = value.slice(5).replace(dash, camelcase)\r\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\r\n    } else {\r\n      // Turn it into an attribute.\r\n      const rest = value.slice(4)\r\n\r\n      if (!dash.test(rest)) {\r\n        let dashes = rest.replace(cap, kebab)\r\n\r\n        if (dashes.charAt(0) !== '-') {\r\n          dashes = '-' + dashes\r\n        }\r\n\r\n        value = 'data' + dashes\r\n      }\r\n    }\r\n\r\n    Type = DefinedInfo\r\n  }\r\n\r\n  return new Type(prop, value)\r\n}\r\n\r\n/**\r\n * @param {string} $0\r\n * @returns {string}\r\n */\r\nfunction kebab($0) {\r\n  return '-' + $0.toLowerCase()\r\n}\r\n\r\n/**\r\n * @param {string} $0\r\n * @returns {string}\r\n */\r\nfunction camelcase($0) {\r\n  return $0.charAt(1).toUpperCase()\r\n}\r\n","/**\r\n * `hast` is close to `React`, but differs in a couple of cases.\r\n *\r\n * To get a React property from a hast property, check if it is in\r\n * `hastToReact`, if it is, then use the corresponding value,\r\n * otherwise, use the hast property.\r\n *\r\n * @type {Record<string, string>}\r\n */\r\nexport const hastToReact = {\r\n  classId: 'classID',\r\n  dataType: 'datatype',\r\n  itemId: 'itemID',\r\n  strokeDashArray: 'strokeDasharray',\r\n  strokeDashOffset: 'strokeDashoffset',\r\n  strokeLineCap: 'strokeLinecap',\r\n  strokeLineJoin: 'strokeLinejoin',\r\n  strokeMiterLimit: 'strokeMiterlimit',\r\n  typeOf: 'typeof',\r\n  xLinkActuate: 'xlinkActuate',\r\n  xLinkArcRole: 'xlinkArcrole',\r\n  xLinkHref: 'xlinkHref',\r\n  xLinkRole: 'xlinkRole',\r\n  xLinkShow: 'xlinkShow',\r\n  xLinkTitle: 'xlinkTitle',\r\n  xLinkType: 'xlinkType',\r\n  xmlnsXLink: 'xmlnsXlink'\r\n}\r\n","/**\r\n * @template T\r\n * @typedef {import('react').ComponentType<T>} ComponentType<T>\r\n */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('react').ComponentPropsWithoutRef<T>} ComponentPropsWithoutRef<T>\r\n */\r\n\r\n/**\r\n * @typedef {import('react').ReactNode} ReactNode\r\n * @typedef {import('unist').Position} Position\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').ElementContent} ElementContent\r\n * @typedef {import('hast').Root} Root\r\n * @typedef {import('hast').Text} Text\r\n * @typedef {import('hast').Comment} Comment\r\n * @typedef {import('hast').DocType} Doctype\r\n * @typedef {import('property-information').Info} Info\r\n * @typedef {import('property-information').Schema} Schema\r\n * @typedef {import('./complex-types').ReactMarkdownProps} ReactMarkdownProps\r\n *\r\n * @typedef Raw\r\n * @property {'raw'} type\r\n * @property {string} value\r\n *\r\n * @typedef Context\r\n * @property {Options} options\r\n * @property {Schema} schema\r\n * @property {number} listDepth\r\n *\r\n * @callback TransformLink\r\n * @param {string} href\r\n * @param {Array<ElementContent>} children\r\n * @param {string?} title\r\n * @returns {string}\r\n *\r\n * @callback TransformImage\r\n * @param {string} src\r\n * @param {string} alt\r\n * @param {string?} title\r\n * @returns {string}\r\n *\r\n * @typedef {import('react').HTMLAttributeAnchorTarget} TransformLinkTargetType\r\n *\r\n * @callback TransformLinkTarget\r\n * @param {string} href\r\n * @param {Array<ElementContent>} children\r\n * @param {string?} title\r\n * @returns {TransformLinkTargetType|undefined}\r\n *\r\n * @typedef {keyof JSX.IntrinsicElements} ReactMarkdownNames\r\n *\r\n * To do: is `data-sourcepos` typeable?\r\n *\r\n * @typedef {ComponentPropsWithoutRef<'code'> & ReactMarkdownProps & {inline?: boolean}} CodeProps\r\n * @typedef {ComponentPropsWithoutRef<'h1'> & ReactMarkdownProps & {level: number}} HeadingProps\r\n * @typedef {ComponentPropsWithoutRef<'li'> & ReactMarkdownProps & {checked: boolean|null, index: number, ordered: boolean}} LiProps\r\n * @typedef {ComponentPropsWithoutRef<'ol'> & ReactMarkdownProps & {depth: number, ordered: true}} OrderedListProps\r\n * @typedef {ComponentPropsWithoutRef<'table'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: boolean}} TableCellProps\r\n * @typedef {ComponentPropsWithoutRef<'tr'> & ReactMarkdownProps & {isHeader: boolean}} TableRowProps\r\n * @typedef {ComponentPropsWithoutRef<'ul'> & ReactMarkdownProps & {depth: number, ordered: false}} UnorderedListProps\r\n *\r\n * @typedef {ComponentType<CodeProps>} CodeComponent\r\n * @typedef {ComponentType<HeadingProps>} HeadingComponent\r\n * @typedef {ComponentType<LiProps>} LiComponent\r\n * @typedef {ComponentType<OrderedListProps>} OrderedListComponent\r\n * @typedef {ComponentType<TableCellProps>} TableCellComponent\r\n * @typedef {ComponentType<TableRowProps>} TableRowComponent\r\n * @typedef {ComponentType<UnorderedListProps>} UnorderedListComponent\r\n *\r\n * @typedef SpecialComponents\r\n * @property {CodeComponent|ReactMarkdownNames} code\r\n * @property {HeadingComponent|ReactMarkdownNames} h1\r\n * @property {HeadingComponent|ReactMarkdownNames} h2\r\n * @property {HeadingComponent|ReactMarkdownNames} h3\r\n * @property {HeadingComponent|ReactMarkdownNames} h4\r\n * @property {HeadingComponent|ReactMarkdownNames} h5\r\n * @property {HeadingComponent|ReactMarkdownNames} h6\r\n * @property {LiComponent|ReactMarkdownNames} li\r\n * @property {OrderedListComponent|ReactMarkdownNames} ol\r\n * @property {TableCellComponent|ReactMarkdownNames} td\r\n * @property {TableCellComponent|ReactMarkdownNames} th\r\n * @property {TableRowComponent|ReactMarkdownNames} tr\r\n * @property {UnorderedListComponent|ReactMarkdownNames} ul\r\n *\r\n * @typedef {Partial<Omit<import('./complex-types').NormalComponents, keyof SpecialComponents> & SpecialComponents>} Components\r\n *\r\n * @typedef Options\r\n * @property {boolean} [sourcePos=false]\r\n * @property {boolean} [rawSourcePos=false]\r\n * @property {boolean} [skipHtml=false]\r\n * @property {boolean} [includeElementIndex=false]\r\n * @property {null|false|TransformLink} [transformLinkUri]\r\n * @property {TransformImage} [transformImageUri]\r\n * @property {TransformLinkTargetType|TransformLinkTarget} [linkTarget]\r\n * @property {Components} [components]\r\n */\r\n\r\nimport React from 'react'\r\nimport ReactIs from 'react-is'\r\nimport {whitespace} from 'hast-util-whitespace'\r\nimport {svg, find, hastToReact} from 'property-information'\r\nimport {stringify as spaces} from 'space-separated-tokens'\r\nimport {stringify as commas} from 'comma-separated-tokens'\r\nimport style from 'style-to-object'\r\n\r\nconst own = {}.hasOwnProperty\r\n\r\n// The table-related elements that must not contain whitespace text according\r\n// to React.\r\nconst tableElements = new Set(['table', 'thead', 'tbody', 'tfoot', 'tr'])\r\n\r\n/**\r\n * @param {Context} context\r\n * @param {Element|Root} node\r\n */\r\nexport function childrenToReact(context, node) {\r\n  /** @type {Array<ReactNode>} */\r\n  const children = []\r\n  let childIndex = -1\r\n  /** @type {Comment|Doctype|Element|Raw|Text} */\r\n  let child\r\n\r\n  while (++childIndex < node.children.length) {\r\n    child = node.children[childIndex]\r\n\r\n    if (child.type === 'element') {\r\n      children.push(toReact(context, child, childIndex, node))\r\n    } else if (child.type === 'text') {\r\n      // Currently, a warning is triggered by react for *any* white space in\r\n      // tables.\r\n      // So we drop it.\r\n      // See: <https://github.com/facebook/react/pull/7081>.\r\n      // See: <https://github.com/facebook/react/pull/7515>.\r\n      // See: <https://github.com/remarkjs/remark-react/issues/64>.\r\n      // See: <https://github.com/remarkjs/react-markdown/issues/576>.\r\n      if (\r\n        node.type !== 'element' ||\r\n        !tableElements.has(node.tagName) ||\r\n        !whitespace(child)\r\n      ) {\r\n        children.push(child.value)\r\n      }\r\n    } else if (child.type === 'raw' && !context.options.skipHtml) {\r\n      // Default behavior is to show (encoded) HTML.\r\n      children.push(child.value)\r\n    }\r\n  }\r\n\r\n  return children\r\n}\r\n\r\n/**\r\n * @param {Context} context\r\n * @param {Element} node\r\n * @param {number} index\r\n * @param {Element|Root} parent\r\n */\r\nfunction toReact(context, node, index, parent) {\r\n  const options = context.options\r\n  const parentSchema = context.schema\r\n  /** @type {ReactMarkdownNames} */\r\n  // @ts-expect-error assume a known HTML/SVG element.\r\n  const name = node.tagName\r\n  /** @type {Record<string, unknown>} */\r\n  const properties = {}\r\n  let schema = parentSchema\r\n  /** @type {string} */\r\n  let property\r\n\r\n  if (parentSchema.space === 'html' && name === 'svg') {\r\n    schema = svg\r\n    context.schema = schema\r\n  }\r\n\r\n  if (node.properties) {\r\n    for (property in node.properties) {\r\n      if (own.call(node.properties, property)) {\r\n        addProperty(properties, property, node.properties[property], context)\r\n      }\r\n    }\r\n  }\r\n\r\n  if (name === 'ol' || name === 'ul') {\r\n    context.listDepth++\r\n  }\r\n\r\n  const children = childrenToReact(context, node)\r\n\r\n  if (name === 'ol' || name === 'ul') {\r\n    context.listDepth--\r\n  }\r\n\r\n  // Restore parent schema.\r\n  context.schema = parentSchema\r\n\r\n  // Nodes created by plugins do not have positional info, in which case we use\r\n  // an object that matches the position interface.\r\n  const position = node.position || {\r\n    start: {line: null, column: null, offset: null},\r\n    end: {line: null, column: null, offset: null}\r\n  }\r\n  const component =\r\n    options.components && own.call(options.components, name)\r\n      ? options.components[name]\r\n      : name\r\n  const basic = typeof component === 'string' || component === React.Fragment\r\n\r\n  if (!ReactIs.isValidElementType(component)) {\r\n    throw new TypeError(\r\n      `Component for name \\`${name}\\` not defined or is not renderable`\r\n    )\r\n  }\r\n\r\n  properties.key = [\r\n    name,\r\n    position.start.line,\r\n    position.start.column,\r\n    index\r\n  ].join('-')\r\n\r\n  if (name === 'a' && options.linkTarget) {\r\n    properties.target =\r\n      typeof options.linkTarget === 'function'\r\n        ? options.linkTarget(\r\n            String(properties.href || ''),\r\n            node.children,\r\n            typeof properties.title === 'string' ? properties.title : null\r\n          )\r\n        : options.linkTarget\r\n  }\r\n\r\n  if (name === 'a' && options.transformLinkUri) {\r\n    properties.href = options.transformLinkUri(\r\n      String(properties.href || ''),\r\n      node.children,\r\n      typeof properties.title === 'string' ? properties.title : null\r\n    )\r\n  }\r\n\r\n  if (\r\n    !basic &&\r\n    name === 'code' &&\r\n    parent.type === 'element' &&\r\n    parent.tagName !== 'pre'\r\n  ) {\r\n    properties.inline = true\r\n  }\r\n\r\n  if (\r\n    !basic &&\r\n    (name === 'h1' ||\r\n      name === 'h2' ||\r\n      name === 'h3' ||\r\n      name === 'h4' ||\r\n      name === 'h5' ||\r\n      name === 'h6')\r\n  ) {\r\n    properties.level = Number.parseInt(name.charAt(1), 10)\r\n  }\r\n\r\n  if (name === 'img' && options.transformImageUri) {\r\n    properties.src = options.transformImageUri(\r\n      String(properties.src || ''),\r\n      String(properties.alt || ''),\r\n      typeof properties.title === 'string' ? properties.title : null\r\n    )\r\n  }\r\n\r\n  if (!basic && name === 'li' && parent.type === 'element') {\r\n    const input = getInputElement(node)\r\n    properties.checked =\r\n      input && input.properties ? Boolean(input.properties.checked) : null\r\n    properties.index = getElementsBeforeCount(parent, node)\r\n    properties.ordered = parent.tagName === 'ol'\r\n  }\r\n\r\n  if (!basic && (name === 'ol' || name === 'ul')) {\r\n    properties.ordered = name === 'ol'\r\n    properties.depth = context.listDepth\r\n  }\r\n\r\n  if (name === 'td' || name === 'th') {\r\n    if (properties.align) {\r\n      if (!properties.style) properties.style = {}\r\n      // @ts-expect-error assume `style` is an object\r\n      properties.style.textAlign = properties.align\r\n      delete properties.align\r\n    }\r\n\r\n    if (!basic) {\r\n      properties.isHeader = name === 'th'\r\n    }\r\n  }\r\n\r\n  if (!basic && name === 'tr' && parent.type === 'element') {\r\n    properties.isHeader = Boolean(parent.tagName === 'thead')\r\n  }\r\n\r\n  // If `sourcePos` is given, pass source information (line/column info from markdown source).\r\n  if (options.sourcePos) {\r\n    properties['data-sourcepos'] = flattenPosition(position)\r\n  }\r\n\r\n  if (!basic && options.rawSourcePos) {\r\n    properties.sourcePosition = node.position\r\n  }\r\n\r\n  // If `includeElementIndex` is given, pass node index info to components.\r\n  if (!basic && options.includeElementIndex) {\r\n    properties.index = getElementsBeforeCount(parent, node)\r\n    properties.siblingCount = getElementsBeforeCount(parent)\r\n  }\r\n\r\n  if (!basic) {\r\n    properties.node = node\r\n  }\r\n\r\n  // Ensure no React warnings are emitted for void elements w/ children.\r\n  return children.length > 0\r\n    ? React.createElement(component, properties, children)\r\n    : React.createElement(component, properties)\r\n}\r\n\r\n/**\r\n * @param {Element|Root} node\r\n * @returns {Element?}\r\n */\r\nfunction getInputElement(node) {\r\n  let index = -1\r\n\r\n  while (++index < node.children.length) {\r\n    const child = node.children[index]\r\n\r\n    if (child.type === 'element' && child.tagName === 'input') {\r\n      return child\r\n    }\r\n  }\r\n\r\n  return null\r\n}\r\n\r\n/**\r\n * @param {Element|Root} parent\r\n * @param {Element} [node]\r\n * @returns {number}\r\n */\r\nfunction getElementsBeforeCount(parent, node) {\r\n  let index = -1\r\n  let count = 0\r\n\r\n  while (++index < parent.children.length) {\r\n    if (parent.children[index] === node) break\r\n    if (parent.children[index].type === 'element') count++\r\n  }\r\n\r\n  return count\r\n}\r\n\r\n/**\r\n * @param {Record<string, unknown>} props\r\n * @param {string} prop\r\n * @param {unknown} value\r\n * @param {Context} ctx\r\n */\r\nfunction addProperty(props, prop, value, ctx) {\r\n  const info = find(ctx.schema, prop)\r\n  let result = value\r\n\r\n  // Ignore nullish and `NaN` values.\r\n  // eslint-disable-next-line no-self-compare\r\n  if (result === null || result === undefined || result !== result) {\r\n    return\r\n  }\r\n\r\n  // Accept `array`.\r\n  // Most props are space-separated.\r\n  if (Array.isArray(result)) {\r\n    result = info.commaSeparated ? commas(result) : spaces(result)\r\n  }\r\n\r\n  if (info.property === 'style' && typeof result === 'string') {\r\n    result = parseStyle(result)\r\n  }\r\n\r\n  if (info.space && info.property) {\r\n    props[\r\n      own.call(hastToReact, info.property)\r\n        ? hastToReact[info.property]\r\n        : info.property\r\n    ] = result\r\n  } else if (info.attribute) {\r\n    props[info.attribute] = result\r\n  }\r\n}\r\n\r\n/**\r\n * @param {string} value\r\n * @returns {Record<string, string>}\r\n */\r\nfunction parseStyle(value) {\r\n  /** @type {Record<string, string>} */\r\n  const result = {}\r\n\r\n  try {\r\n    style(value, iterator)\r\n  } catch {\r\n    // Silent.\r\n  }\r\n\r\n  return result\r\n\r\n  /**\r\n   * @param {string} name\r\n   * @param {string} v\r\n   */\r\n  function iterator(name, v) {\r\n    const k = name.slice(0, 4) === '-ms-' ? `ms-${name.slice(4)}` : name\r\n    result[k.replace(/-([a-z])/g, styleReplacer)] = v\r\n  }\r\n}\r\n\r\n/**\r\n * @param {unknown} _\r\n * @param {string} $1\r\n */\r\nfunction styleReplacer(_, $1) {\r\n  return $1.toUpperCase()\r\n}\r\n\r\n/**\r\n * @param {Position|{start: {line: null, column: null, offset: null}, end: {line: null, column: null, offset: null}}} pos\r\n * @returns {string}\r\n */\r\nfunction flattenPosition(pos) {\r\n  return [\r\n    pos.start.line,\r\n    ':',\r\n    pos.start.column,\r\n    '-',\r\n    pos.end.line,\r\n    ':',\r\n    pos.end.column\r\n  ]\r\n    .map((d) => String(d))\r\n    .join('')\r\n}\r\n","/**\r\n * @typedef Options\r\n *   Configuration for `stringify`.\r\n * @property {boolean} [padLeft=true]\r\n *   Whether to pad a space before a token.\r\n * @property {boolean} [padRight=false]\r\n *   Whether to pad a space after a token.\r\n */\r\n\r\n/**\r\n * @typedef {Options} StringifyOptions\r\n *   Please use `StringifyOptions` instead.\r\n */\r\n\r\n/**\r\n * Parse comma-separated tokens to an array.\r\n *\r\n * @param {string} value\r\n *   Comma-separated tokens.\r\n * @returns {Array<string>}\r\n *   List of tokens.\r\n */\r\nexport function parse(value) {\r\n  /** @type {Array<string>} */\r\n  const tokens = []\r\n  const input = String(value || '')\r\n  let index = input.indexOf(',')\r\n  let start = 0\r\n  /** @type {boolean} */\r\n  let end = false\r\n\r\n  while (!end) {\r\n    if (index === -1) {\r\n      index = input.length\r\n      end = true\r\n    }\r\n\r\n    const token = input.slice(start, index).trim()\r\n\r\n    if (token || !end) {\r\n      tokens.push(token)\r\n    }\r\n\r\n    start = index + 1\r\n    index = input.indexOf(',', start)\r\n  }\r\n\r\n  return tokens\r\n}\r\n\r\n/**\r\n * Serialize an array of strings or numbers to comma-separated tokens.\r\n *\r\n * @param {Array<string|number>} values\r\n *   List of tokens.\r\n * @param {Options} [options]\r\n *   Configuration for `stringify` (optional).\r\n * @returns {string}\r\n *   Comma-separated tokens.\r\n */\r\nexport function stringify(values, options) {\r\n  const settings = options || {}\r\n\r\n  // Ensure the last empty entry is seen.\r\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\r\n\r\n  return input\r\n    .join(\r\n      (settings.padRight ? ' ' : '') +\r\n        ',' +\r\n        (settings.padLeft === false ? '' : ' ')\r\n    )\r\n    .trim()\r\n}\r\n","/**\r\n * Parse space-separated tokens to an array of strings.\r\n *\r\n * @param {string} value\r\n *   Space-separated tokens.\r\n * @returns {Array<string>}\r\n *   List of tokens.\r\n */\r\nexport function parse(value) {\r\n  const input = String(value || '').trim()\r\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\r\n}\r\n\r\n/**\r\n * Serialize an array of strings as space separated-tokens.\r\n *\r\n * @param {Array<string|number>} values\r\n *   List of tokens.\r\n * @returns {string}\r\n *   Space-separated tokens.\r\n */\r\nexport function stringify(values) {\r\n  return values.join(' ').trim()\r\n}\r\n","/**\r\n * @typedef {import('react').ReactNode} ReactNode\r\n * @typedef {import('react').ReactElement<{}>} ReactElement\r\n * @typedef {import('unified').PluggableList} PluggableList\r\n * @typedef {import('hast').Root} Root\r\n * @typedef {import('./rehype-filter.js').Options} FilterOptions\r\n * @typedef {import('./ast-to-react.js').Options} TransformOptions\r\n *\r\n * @typedef CoreOptions\r\n * @property {string} children\r\n *\r\n * @typedef PluginOptions\r\n * @property {PluggableList} [plugins=[]] **deprecated**: use `remarkPlugins` instead\r\n * @property {PluggableList} [remarkPlugins=[]]\r\n * @property {PluggableList} [rehypePlugins=[]]\r\n *\r\n * @typedef LayoutOptions\r\n * @property {string} [className]\r\n *\r\n * @typedef {CoreOptions & PluginOptions & LayoutOptions & FilterOptions & TransformOptions} ReactMarkdownOptions\r\n *\r\n * @typedef Deprecation\r\n * @property {string} id\r\n * @property {string} [to]\r\n */\r\n\r\nimport React from 'react'\r\nimport {VFile} from 'vfile'\r\nimport {unified} from 'unified'\r\nimport remarkParse from 'remark-parse'\r\nimport remarkRehype from 'remark-rehype'\r\nimport PropTypes from 'prop-types'\r\nimport {html} from 'property-information'\r\nimport rehypeFilter from './rehype-filter.js'\r\nimport {uriTransformer} from './uri-transformer.js'\r\nimport {childrenToReact} from './ast-to-react.js'\r\n\r\nconst own = {}.hasOwnProperty\r\nconst changelog =\r\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\r\n\r\n/** @type {Record<string, Deprecation>} */\r\nconst deprecated = {\r\n  renderers: {to: 'components', id: 'change-renderers-to-components'},\r\n  astPlugins: {id: 'remove-buggy-html-in-markdown-parser'},\r\n  allowDangerousHtml: {id: 'remove-buggy-html-in-markdown-parser'},\r\n  escapeHtml: {id: 'remove-buggy-html-in-markdown-parser'},\r\n  source: {to: 'children', id: 'change-source-to-children'},\r\n  allowNode: {\r\n    to: 'allowElement',\r\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\r\n  },\r\n  allowedTypes: {\r\n    to: 'allowedElements',\r\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\r\n  },\r\n  disallowedTypes: {\r\n    to: 'disallowedElements',\r\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\r\n  },\r\n  includeNodeIndex: {\r\n    to: 'includeElementIndex',\r\n    id: 'change-includenodeindex-to-includeelementindex'\r\n  }\r\n}\r\n\r\n/**\r\n * React component to render markdown.\r\n *\r\n * @param {ReactMarkdownOptions} options\r\n * @returns {ReactElement}\r\n */\r\nexport function ReactMarkdown(options) {\r\n  for (const key in deprecated) {\r\n    if (own.call(deprecated, key) && own.call(options, key)) {\r\n      const deprecation = deprecated[key]\r\n      console.warn(\r\n        `[react-markdown] Warning: please ${\r\n          deprecation.to ? `use \\`${deprecation.to}\\` instead of` : 'remove'\r\n        } \\`${key}\\` (see <${changelog}#${deprecation.id}> for more info)`\r\n      )\r\n      delete deprecated[key]\r\n    }\r\n  }\r\n\r\n  const processor = unified()\r\n    .use(remarkParse)\r\n    // TODO: deprecate `plugins` in v8.0.0.\r\n    .use(options.remarkPlugins || options.plugins || [])\r\n    .use(remarkRehype, {allowDangerousHtml: true})\r\n    .use(options.rehypePlugins || [])\r\n    .use(rehypeFilter, options)\r\n\r\n  const file = new VFile()\r\n\r\n  if (typeof options.children === 'string') {\r\n    file.value = options.children\r\n  } else if (options.children !== undefined && options.children !== null) {\r\n    console.warn(\r\n      `[react-markdown] Warning: please pass a string as \\`children\\` (not: \\`${options.children}\\`)`\r\n    )\r\n  }\r\n\r\n  const hastNode = processor.runSync(processor.parse(file), file)\r\n\r\n  if (hastNode.type !== 'root') {\r\n    throw new TypeError('Expected a `root` node')\r\n  }\r\n\r\n  /** @type {ReactElement} */\r\n  let result = React.createElement(\r\n    React.Fragment,\r\n    {},\r\n    childrenToReact({options, schema: html, listDepth: 0}, hastNode)\r\n  )\r\n\r\n  if (options.className) {\r\n    result = React.createElement('div', {className: options.className}, result)\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nReactMarkdown.defaultProps = {transformLinkUri: uriTransformer}\r\n\r\nReactMarkdown.propTypes = {\r\n  // Core options:\r\n  children: PropTypes.string,\r\n  // Layout options:\r\n  className: PropTypes.string,\r\n  // Filter options:\r\n  allowElement: PropTypes.func,\r\n  allowedElements: PropTypes.arrayOf(PropTypes.string),\r\n  disallowedElements: PropTypes.arrayOf(PropTypes.string),\r\n  unwrapDisallowed: PropTypes.bool,\r\n  // Plugin options:\r\n  remarkPlugins: PropTypes.arrayOf(\r\n    PropTypes.oneOfType([\r\n      PropTypes.object,\r\n      PropTypes.func,\r\n      PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.object, PropTypes.func]))\r\n    ])\r\n  ),\r\n  rehypePlugins: PropTypes.arrayOf(\r\n    PropTypes.oneOfType([\r\n      PropTypes.object,\r\n      PropTypes.func,\r\n      PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.object, PropTypes.func]))\r\n    ])\r\n  ),\r\n  // Transform options:\r\n  sourcePos: PropTypes.bool,\r\n  rawSourcePos: PropTypes.bool,\r\n  skipHtml: PropTypes.bool,\r\n  includeElementIndex: PropTypes.bool,\r\n  transformLinkUri: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\r\n  linkTarget: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n  transformImageUri: PropTypes.func,\r\n  components: PropTypes.object\r\n}\r\n"],"names":["hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","trim","str","replace","style","TypeError","lineno","column","updatePosition","lines","match","lastIndexOf","position","start","line","node","Position","whitespace","this","end","source","content","errorsList","error","msg","err","Error","reason","filename","silent","push","re","m","exec","slice","comments","rules","c","comment","pos","charAt","type","declaration","prop","val","ret","property","decl","decls","declarations","encodeCache","encode","string","exclude","keepEscaped","l","code","nextCode","cache","result","defaultChars","ch","String","fromCharCode","test","toUpperCase","charCodeAt","getEncodeCache","encodeURIComponent","componentChars","b","d","e","f","g","h","k","n","p","q","r","u","v","w","Symbol","for","x","y","a","t","$$typeof","z","A","B","C","D","E","F","G","H","I","ContextConsumer","ContextProvider","Element","ForwardRef","Fragment","Lazy","Memo","Portal","Profiler","StrictMode","Suspense","isAsyncMode","isConcurrentMode","isContextConsumer","isContextProvider","isElement","isForwardRef","isFragment","isLazy","isMemo","isPortal","isProfiler","isStrictMode","isSuspense","isValidElementType","typeOf","parse","require","iterator","output","hasIterator","len","isBuffer","_construct","Parent","args","Class","isNativeReflectConstruct","Reflect","construct","bind","apply","instance","Function","setPrototypeOf","_wrapNativeSuper","_cache","Map","undefined","fn","indexOf","has","get","set","Wrapper","getPrototypeOf","create","stringifyPosition","point","index","VFileMessage","_Error","_inherits","_super","_createSuper","place","origin","_this","_classCallCheck","parts","message","stack","fatal","ruleId","file","actual","expected","url","note","_createClass","path","basename","ext","assertPath","seenNonSlash","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","join","joined","_len","segments","_key","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","normalizeString","normalize","sep","JSON","stringify","proc","cwd","isUrl","fileUrlOrPath","href","urlToPath","URL","protocol","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","order","VFile","bufferLike","buffer","data","messages","history","stored","map","_toConsumableArray","includes","assertNonEmpty","assertPart","stem","encoding","part","_toArray","arrayWithHoles","iterableToArray","unsupportedIterableToArray","nonIterableRest","bail","toStringTag","trough","fns","pipeline","run","values","middlewareIndex","callback","pop","next","_len2","_key2","middleware","called","wrapped","_len3","parameters","_key3","fnExpectsCallback","done","Promise","then","_len4","_key4","concat","wrap","use","middelware","unified","base","frozen","transformers","attachers","namespace","freezeIndex","processor","assertUnfrozen","own","Parser","Compiler","freeze","_attachers$freezeInde","attacher","transformer","Number","POSITIVE_INFINITY","settings","addPlugin","addList","addPreset","assign","add","_value","plugin","plugins","entry","isPlainObj","doc","vfile","assertParser","newable","assertCompiler","assertNode","compile","executor","resolve","reject","tree","runSync","complete","assertDone","process","processSync","destination","keys","asyncName","Boolean","looksLikeAVFile","emptyOptions","one","includeImageAlt","includeHtml","alt","all","children","splice","list","remove","items","chunkStart","from","unshift","syntaxExtension","extension","hook","left","right","constructs","existing","before","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","regex","factorySpace","effects","ok","max","limit","size","enter","prefix","consume","exit","tokenize","previous","contentStart","attempt","parser","contentInitial","lineStart","token","contentType","document","childFlow","childToken","lineStartOffset","self","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","events","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","offset","containerContinue","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","nok","disable","null","blankLine","after","partial","subtokenize","event","lineIndex","otherIndex","otherEvent","subevents","more","jumps","_isInFirstContentOfListItem","subcontent","_container","eventIndex","context","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","initial","flowInitial","afterConstruct","resolver","resolveAll","createResolver","initializeFactory","text","field","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","bufferIndex","tabs","chunk","_index","_bufferIndex","createTokenizer","initialize","columnStart","resolveAllConstructs","accountForPotentialSkip","fields","constructFactory","info","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","state","view","startIndex","startBufferIndex","endIndex","endBufferIndex","head","shift","sliceChunks","_point","chunkIndex","go","_","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","resolveTo","thematicBreak","marker","sequence","initialSize","kind","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","notBlank","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","open","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","begin","escape","factoryWhitespace","normalizeIdentifier","toLowerCase","definition","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","defined","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","paragraph","heading","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","element","createElement","decodeNamedCharacterReference","characterReference","innerHTML","char","textContent","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","close","media","group","label","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","classifyCharacter","attention","attentionMarkers","_open","_close","openingSequence","closingSequence","nextEvents","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","between","tailExitIndex","headEnterIndex","_document","_defineProperty","_flowInitial","_flow","_string","_text","resolveText","extensions","combineExtensions","defaultConstructs","search","decodeNumericCharacterReference","parseInt","characterEscapeOrReference","decode","$0","$1","$2","hex","fromMarkdown","config","transforms","canContainEols","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","html","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","tokenStack","resume","setData","getData","listStack","prepareList","handler","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","lang","title","depth","referenceType","ancestor","decodeString","fragment","ordered","spread","checked","compiler","postprocess","atCarriageReturn","endPosition","lastIndex","Math","ceil","preprocess","combined","_combined$key","_combined$key2","remarkParse","props","convert","castFactory","typeFactory","anyFactory","propsFactory","tests","checks","_checks$index","visitParents","visitor","reverse","is","step","factory","parents","visit","subresult","grandparents","toResult","parent","pointStart","pointEnd","clean","unknown","augment","handlers","passThrough","returnNode","unknownHandler","_objectSpread","nodes","loose","properties","className","footnoteReference","footnoteOrder","id","role","revert","subtype","suffix","contents","listItemLoose","blockquote","break","delete","footnote","footnoteById","no","dangerous","imageReference","inlineCode","linkReference","listLoose","disabled","child","root","table","rows","align","row","out","cell","toml","ignore","yaml","footnoteDefinition","allowDangerousHtml","definitions","hName","hProperties","hChildren","ctx","generated","toHast","foot","listItems","backReference","footer","bridge","mutate","Schema","normal","space","merge","Info","attribute","boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","powers","increment","pow","types","DefinedInfo","_Info","mask","mark","_assertThisInitialized","transform","attributes","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","capture","charSet","cite","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","dateTime","decoding","default","defer","dir","dirName","download","draggable","encType","enterKeyHint","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","hrefLang","htmlFor","httpEquiv","imageSizes","imageSrcSet","inputMode","integrity","isMap","itemId","itemProp","itemRef","itemScope","itemType","language","loading","loop","low","manifest","maxLength","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","optimum","pattern","ping","placeholder","playsInline","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rowSpan","sandbox","scope","scoped","seamless","selected","shape","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","tabIndex","translate","typeMustMatch","useMap","width","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","charOff","classId","clear","codeBase","codeType","color","compact","declare","face","frame","frameBorder","hSpace","leftMargin","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","results","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","opacity","operator","orient","orientation","overflow","overlay","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","restart","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x1","x2","xChannelSelector","y1","y2","yChannelSelector","zoomAndPan","htmlBase","svgBase","rehypeFilter","allowedElements","disallowedElements","allowElement","parent_","_parent$children","unwrapDisallowed","protocols","thing","valid","dash","cap","kebab","camelcase","hastToReact","tableElements","Set","childrenToReact","childIndex","toReact","skipHtml","parentSchema","schema","addProperty","listDepth","component","components","basic","React","ReactIs","linkTarget","transformLinkUri","inline","level","transformImageUri","input","getInputElement","getElementsBeforeCount","textAlign","isHeader","sourcePos","rawSourcePos","sourcePosition","includeElementIndex","siblingCount","count","Type","rest","dashes","find","padRight","padLeft","commas","_unused","styleReplacer","parseStyle","changelog","deprecated","renderers","astPlugins","escapeHtml","allowNode","allowedTypes","disallowedTypes","includeNodeIndex","ReactMarkdown","deprecation","console","warn","remarkPlugins","remarkRehype","rehypePlugins","hastNode","defaultProps","uri","first","colon","propTypes","PropTypes"],"sourceRoot":""}